"""Add check constraint to compliance_frameworks

from __future__ import annotations

Revision ID: 802adb6d1be8
Revises: cdd9337435cf
Create Date: 2025-07-17 00:31:48.592947

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "802adb6d1be8"
down_revision = None
branch_labels = None
depends_on = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "compliance_frameworks",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column(
            "applicable_indu", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("employee_thresh", sa.Integer(), nullable=True),
        sa.Column("revenue_thresho", sa.String(), nullable=True),
        sa.Column(
            "geographic_scop", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "key_requirement", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "control_domains", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "evidence_types", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "relevance_facto", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("complexity_scor", sa.Integer(), nullable=True),
        sa.Column("implementation_", sa.Integer(), nullable=True),
        sa.Column("estimated_cost_", sa.String(), nullable=True),
        sa.Column("policy_template", sa.Text(), nullable=True),
        sa.Column(
            "control_templat", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "evidence_templa", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("version", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.CheckConstraint(
            "version ~ '^[0-9]+\\.[0-9]+(\\.[0-9]+)?$'",
            name=op.f(
                "ck_compliance_frameworks_ck_compliance_frameworks_version_format"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_compliance_frameworks")),
        sa.UniqueConstraint("name", name=op.f("uq_compliance_frameworks_name")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("email", name=op.f("uq_users_email")),
    )
    op.create_table(
        "business_profiles",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("company_name", sa.String(), nullable=False),
        sa.Column("industry", sa.String(), nullable=False),
        sa.Column("employee_count", sa.Integer(), nullable=False),
        sa.Column("annual_revenue", sa.String(), nullable=True),
        sa.Column("country", sa.String(), nullable=True),
        sa.Column("data_sensitivity", sa.String(), nullable=False),
        sa.Column("handles_personal_data", sa.Boolean(), nullable=False),
        sa.Column("processes_payments", sa.Boolean(), nullable=False),
        sa.Column("stores_health_data", sa.Boolean(), nullable=False),
        sa.Column("provides_financial_services", sa.Boolean(), nullable=False),
        sa.Column("operates_critical_infrastructure", sa.Boolean(), nullable=False),
        sa.Column("has_international_operations", sa.Boolean(), nullable=False),
        sa.Column(
            "cloud_providers", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("saas_tools", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "development_tools", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "existing_frameworks",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "planned_frameworks", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("compliance_budget", sa.String(), nullable=True),
        sa.Column("compliance_timeline", sa.String(), nullable=True),
        sa.Column("assessment_completed", sa.Boolean(), nullable=True),
        sa.Column(
            "assessment_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_business_profiles_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_business_profiles")),
        sa.UniqueConstraint("user_id", name=op.f("uq_business_profiles_user_id")),
    )
    op.create_table(
        "integrations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("provider", sa.String(length=50), nullable=False),
        sa.Column("encrypted_credentials", sa.Text(), nullable=False),
        sa.Column("health_status", sa.JSON(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("last_health_check", sa.DateTime(), nullable=True),
        sa.Column("configuration_metadata", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_integrations_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_integrations")),
        sa.UniqueConstraint("user_id", "provider", name="unique_user_provider"),
    )
    op.create_index(
        "idx_provider_active", "integrations", ["provider", "is_active"], unique=False
    )
    op.create_index(
        "idx_user_active", "integrations", ["user_id", "is_active"], unique=False
    )
    op.create_index(
        "idx_user_provider", "integrations", ["user_id", "provider"], unique=False
    )
    op.create_table(
        "assessment_sessions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=True),
        sa.Column("session_type", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("current_stage", sa.Integer(), nullable=True),
        sa.Column("total_stages", sa.Integer(), nullable=True),
        sa.Column("questions_answered", sa.Integer(), nullable=True),
        sa.Column("total_questions", sa.Integer(), nullable=True),
        sa.Column("responses", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "calculated_scores", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "recommendations", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("last_activity", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column(
            "recommended_frameworks",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "priority_order", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("next_steps", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_assessment_sessions_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_assessment_sessions_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_assessment_sessions")),
    )
    op.create_table(
        "chat_conversations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "ARCHIVED", "DELETED", name="conversationstatus"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_chat_conversations_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_chat_conversations_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_chat_conversations")),
    )
    op.create_table(
        "evidence",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=False),
        sa.Column("framework_id", sa.UUID(), nullable=False),
        sa.Column("control_id", sa.String(length=100), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("source", sa.String(length=50), nullable=True),
        sa.Column("tags", sa.JSON(), nullable=True),
        sa.Column("file_path", sa.String(length=255), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=True),
        sa.Column(
            "ai_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_evidence_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["framework_id"],
            ["compliance_frameworks.id"],
            name=op.f("fk_evidence_framework_id_compliance_frameworks"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_evidence_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_evidence")),
    )
    op.create_table(
        "evidence_collections",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("integration_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("framework_id", sa.String(length=50), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("progress_percentage", sa.Integer(), nullable=True),
        sa.Column("evidence_types_requested", sa.JSON(), nullable=True),
        sa.Column("evidence_types_completed", sa.JSON(), nullable=True),
        sa.Column("quality_score", sa.JSON(), nullable=True),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("estimated_completion", sa.DateTime(), nullable=True),
        sa.Column("current_activity", sa.String(length=200), nullable=True),
        sa.Column("errors", sa.JSON(), nullable=True),
        sa.Column("business_profile", sa.JSON(), nullable=True),
        sa.Column("collection_mode", sa.String(length=20), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["integration_id"],
            ["integrations.id"],
            name=op.f("fk_evidence_collections_integration_id_integrations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_evidence_collections_user_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_evidence_collections")),
    )
    op.create_index(
        "idx_collection_created", "evidence_collections", ["created_at"], unique=False
    )
    op.create_index(
        "idx_collection_framework",
        "evidence_collections",
        ["framework_id"],
        unique=False,
    )
    op.create_index(
        "idx_collection_integration",
        "evidence_collections",
        ["integration_id"],
        unique=False,
    )
    op.create_index(
        "idx_collection_status", "evidence_collections", ["status"], unique=False
    )
    op.create_index(
        "idx_collection_user", "evidence_collections", ["user_id"], unique=False
    )
    op.create_table(
        "evidence_items",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=False),
        sa.Column("framework_id", sa.UUID(), nullable=False),
        sa.Column("evidence_name", sa.String(), nullable=False),
        sa.Column("evidence_type", sa.String(), nullable=False),
        sa.Column("control_reference", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("required_for_audit", sa.Boolean(), nullable=True),
        sa.Column("collection_frequency", sa.String(), nullable=True),
        sa.Column("collection_method", sa.String(), nullable=True),
        sa.Column("automation_source", sa.String(), nullable=True),
        sa.Column("automation_guidance", sa.Text(), nullable=True),
        sa.Column("file_path", sa.String(), nullable=True),
        sa.Column("file_type", sa.String(), nullable=True),
        sa.Column("file_size_bytes", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("collection_notes", sa.Text(), nullable=True),
        sa.Column("review_notes", sa.Text(), nullable=True),
        sa.Column("collected_by", sa.String(), nullable=True),
        sa.Column("collected_at", sa.DateTime(), nullable=True),
        sa.Column("reviewed_by", sa.String(), nullable=True),
        sa.Column("reviewed_at", sa.DateTime(), nullable=True),
        sa.Column("approved_by", sa.String(), nullable=True),
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        sa.Column("priority", sa.String(), nullable=True),
        sa.Column("effort_estimate", sa.String(), nullable=True),
        sa.Column("audit_section", sa.String(), nullable=True),
        sa.Column("compliance_score_impact", sa.Float(), nullable=True),
        sa.Column(
            "ai_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_evidence_items_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["framework_id"],
            ["compliance_frameworks.id"],
            name=op.f("fk_evidence_items_framework_id_compliance_frameworks"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_evidence_items_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_evidence_items")),
    )
    op.create_table(
        "generated_policies",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("business_profil", sa.UUID(), nullable=False),
        sa.Column("framework_id", sa.UUID(), nullable=False),
        sa.Column("policy_name", sa.String(), nullable=False),
        sa.Column("framework_name", sa.String(), nullable=False),
        sa.Column("policy_type", sa.String(), nullable=True),
        sa.Column("generation_prompt", sa.Text(), nullable=False),
        sa.Column("generation_model", sa.String(), nullable=True),
        sa.Column("generation_time_seconds", sa.Float(), nullable=False),
        sa.Column("policy_content", sa.Text(), nullable=False),
        sa.Column("procedures", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "tool_recommendations",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("sections", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("controls", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "responsibilities", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("word_count", sa.Integer(), nullable=True),
        sa.Column("estimated_reading_time", sa.Integer(), nullable=True),
        sa.Column("compliance_coverage", sa.Float(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("review_notes", sa.Text(), nullable=True),
        sa.Column("generated_at", sa.DateTime(), nullable=True),
        sa.Column("reviewed_at", sa.DateTime(), nullable=True),
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["business_profil"],
            ["business_profiles.id"],
            name=op.f("fk_generated_policies_business_profil_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["framework_id"],
            ["compliance_frameworks.id"],
            name=op.f("fk_generated_policies_framework_id_compliance_frameworks"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_generated_policies_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_generated_policies")),
    )
    op.create_table(
        "implementation_plans",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=False),
        sa.Column("framework_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("phases", sa.JSON(), nullable=True),
        sa.Column("planned_start_date", sa.DateTime(), nullable=True),
        sa.Column("planned_end_date", sa.DateTime(), nullable=True),
        sa.Column("actual_start_date", sa.DateTime(), nullable=True),
        sa.Column("actual_end_date", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_implementation_plans_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["framework_id"],
            ["compliance_frameworks.id"],
            name=op.f("fk_implementation_plans_framework_id_compliance_frameworks"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_implementation_plans_user_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_implementation_plans")),
    )
    op.create_table(
        "integration_health_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("integration_id", sa.UUID(), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("response_time", sa.JSON(), nullable=True),
        sa.Column("error_details", sa.JSON(), nullable=True),
        sa.Column("health_data", sa.JSON(), nullable=True),
        sa.Column("checked_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["integration_id"],
            ["integrations.id"],
            name=op.f("fk_integration_health_logs_integration_id_integrations"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_integration_health_logs")),
    )
    op.create_index(
        "idx_health_checked", "integration_health_logs", ["checked_at"], unique=False
    )
    op.create_index(
        "idx_health_integration",
        "integration_health_logs",
        ["integration_id"],
        unique=False,
    )
    op.create_index(
        "idx_health_status", "integration_health_logs", ["status"], unique=False
    )
    op.create_table(
        "policies",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=False),
        sa.Column("framework_name", sa.String(length=100), nullable=False),
        sa.Column("policy_title", sa.String(length=255), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("version", sa.String(length=20), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_policies_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_policies_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_policies")),
    )
    op.create_table(
        "readiness_assessments",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("framework_id", sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=False),
        sa.Column("overall_score", sa.Float(), nullable=False),
        sa.Column("score_breakdown", sa.JSON(), nullable=False),
        sa.Column("priority_actions", sa.JSON(), nullable=True),
        sa.Column("quick_wins", sa.JSON(), nullable=True),
        sa.Column("score_trend", sa.String(), nullable=True),
        sa.Column("estimated_readiness_date", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_readiness_assessments_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["framework_id"],
            ["compliance_frameworks.id"],
            name=op.f("fk_readiness_assessments_framework_id_compliance_frameworks"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_readiness_assessments_user_id_users"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_readiness_assessments")),
    )
    op.create_table(
        "report_schedules",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=False),
        sa.Column("report_type", sa.String(), nullable=False),
        sa.Column("frequency", sa.String(), nullable=False),
        sa.Column("parameters", sa.JSON(), nullable=True),
        sa.Column("recipients", sa.JSON(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("last_run_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_report_schedules_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_report_schedules_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_report_schedules")),
    )
    op.create_table(
        "assessment_questions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("session_id", sa.UUID(), nullable=False),
        sa.Column("question_text", sa.Text(), nullable=False),
        sa.Column("answer_text", sa.Text(), nullable=True),
        sa.Column("question_type", sa.String(length=50), nullable=False),
        sa.Column("options", sa.JSON(), nullable=True),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["assessment_sessions.id"],
            name=op.f("fk_assessment_questions_session_id_assessment_sessions"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_assessment_questions")),
    )
    op.create_table(
        "chat_messages",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("message_metadata", sa.JSON(), nullable=True),
        sa.Column("sequence_number", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["chat_conversations.id"],
            name=op.f("fk_chat_messages_conversation_id_chat_conversations"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_chat_messages")),
    )
    op.create_table(
        "integration_evidence_items",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("collection_id", sa.UUID(), nullable=False),
        sa.Column("evidence_type", sa.String(length=100), nullable=False),
        sa.Column("source_system", sa.String(length=50), nullable=False),
        sa.Column("resource_id", sa.String(length=500), nullable=False),
        sa.Column("resource_name", sa.String(length=500), nullable=False),
        sa.Column("evidence_data", sa.JSON(), nullable=False),
        sa.Column(
            "compliance_controls",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("quality_score", sa.JSON(), nullable=True),
        sa.Column("data_classification", sa.String(length=50), nullable=True),
        sa.Column("retention_policy", sa.String(length=50), nullable=True),
        sa.Column("checksum", sa.String(length=64), nullable=True),
        sa.Column("collected_at", sa.DateTime(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["collection_id"],
            ["evidence_collections.id"],
            name=op.f(
                "fk_integration_evidence_items_collection_id_evidence_collections"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_integration_evidence_items")),
    )
    op.create_index(
        "idx_evidence_collected",
        "integration_evidence_items",
        ["collected_at"],
        unique=False,
    )
    op.create_index(
        "idx_evidence_collection",
        "integration_evidence_items",
        ["collection_id"],
        unique=False,
    )
    op.create_index(
        "idx_evidence_controls",
        "integration_evidence_items",
        [sa.literal_column("compliance_controls jsonb_path_ops")],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_evidence_resource",
        "integration_evidence_items",
        ["resource_id"],
        unique=False,
    )
    op.create_index(
        "idx_evidence_source",
        "integration_evidence_items",
        ["source_system"],
        unique=False,
    )
    op.create_index(
        "idx_evidence_type",
        "integration_evidence_items",
        ["evidence_type"],
        unique=False,
    )
    op.create_table(
        "evidence_audit_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("integration_id", sa.UUID(), nullable=True),
        sa.Column("collection_id", sa.UUID(), nullable=True),
        sa.Column("evidence_item_id", sa.UUID(), nullable=True),
        sa.Column("action", sa.String(length=50), nullable=False),
        sa.Column("resource_type", sa.String(length=50), nullable=False),
        sa.Column("resource_id", sa.String(length=100), nullable=False),
        sa.Column("details", sa.JSON(), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.String(length=500), nullable=True),
        sa.Column("request_id", sa.String(length=100), nullable=True),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["collection_id"],
            ["evidence_collections.id"],
            name=op.f("fk_evidence_audit_logs_collection_id_evidence_collections"),
        ),
        sa.ForeignKeyConstraint(
            ["evidence_item_id"],
            ["integration_evidence_items.id"],
            name=op.f(
                "fk_evidence_audit_logs_evidence_item_id_integration_evidence_items"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["integration_id"],
            ["integrations.id"],
            name=op.f("fk_evidence_audit_logs_integration_id_integrations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_evidence_audit_logs_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_evidence_audit_logs")),
    )
    op.create_index("idx_audit_action", "evidence_audit_logs", ["action"], unique=False)
    op.create_index(
        "idx_audit_request", "evidence_audit_logs", ["request_id"], unique=False
    )
    op.create_index(
        "idx_audit_resource",
        "evidence_audit_logs",
        ["resource_type", "resource_id"],
        unique=False,
    )
    op.create_index(
        "idx_audit_timestamp", "evidence_audit_logs", ["timestamp"], unique=False
    )
    op.create_index("idx_audit_user", "evidence_audit_logs", ["user_id"], unique=False)
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_audit_user", table_name="evidence_audit_logs")
    op.drop_index("idx_audit_timestamp", table_name="evidence_audit_logs")
    op.drop_index("idx_audit_resource", table_name="evidence_audit_logs")
    op.drop_index("idx_audit_request", table_name="evidence_audit_logs")
    op.drop_index("idx_audit_action", table_name="evidence_audit_logs")
    op.drop_table("evidence_audit_logs")
    op.drop_index("idx_evidence_type", table_name="integration_evidence_items")
    op.drop_index("idx_evidence_source", table_name="integration_evidence_items")
    op.drop_index("idx_evidence_resource", table_name="integration_evidence_items")
    op.drop_index(
        "idx_evidence_controls",
        table_name="integration_evidence_items",
        postgresql_using="gin",
    )
    op.drop_index("idx_evidence_collection", table_name="integration_evidence_items")
    op.drop_index("idx_evidence_collected", table_name="integration_evidence_items")
    op.drop_table("integration_evidence_items")
    op.drop_table("chat_messages")
    op.drop_table("assessment_questions")
    op.drop_table("report_schedules")
    op.drop_table("readiness_assessments")
    op.drop_table("policies")
    op.drop_index("idx_health_status", table_name="integration_health_logs")
    op.drop_index("idx_health_integration", table_name="integration_health_logs")
    op.drop_index("idx_health_checked", table_name="integration_health_logs")
    op.drop_table("integration_health_logs")
    op.drop_table("implementation_plans")
    op.drop_table("generated_policies")
    op.drop_table("evidence_items")
    op.drop_index("idx_collection_user", table_name="evidence_collections")
    op.drop_index("idx_collection_status", table_name="evidence_collections")
    op.drop_index("idx_collection_integration", table_name="evidence_collections")
    op.drop_index("idx_collection_framework", table_name="evidence_collections")
    op.drop_index("idx_collection_created", table_name="evidence_collections")
    op.drop_table("evidence_collections")
    op.drop_table("evidence")
    op.drop_table("chat_conversations")
    op.drop_table("assessment_sessions")
    op.drop_index("idx_user_provider", table_name="integrations")
    op.drop_index("idx_user_active", table_name="integrations")
    op.drop_index("idx_provider_active", table_name="integrations")
    op.drop_table("integrations")
    op.drop_table("business_profiles")
    op.drop_table("users")
    op.drop_table("compliance_frameworks")
    # ### end Alembic commands ###
