"""Add RBAC system database schema

from __future__ import annotations

Revision ID: 8b656f197a19
Revises: b8a4b53d1de0
Create Date: 2025-07-25 03:32:39.337401

"""

from alembic import op
import sqlalchemy as sa

# Constants for commonly used strings
USER_ID_COLUMN = "users.id"
USER_ID_FIELD = "user_id"

# revision identifiers, used by Alembic.
revision = "8b656f197a19"
down_revision = "b8a4b53d1de0"
branch_labels = None
depends_on = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("display_name", sa.String(length=150), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("category", sa.String(length=50), nullable=False),
        sa.Column("resource_type", sa.String(length=50), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_permissions")),
        sa.UniqueConstraint("name", name=op.f("uq_permissions_name")),
    )
    op.create_table(
        "roles",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("display_name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_system_role", sa.Boolean(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_roles")),
        sa.UniqueConstraint("name", name=op.f("uq_roles_name")),
    )
    op.create_table(
        "framework_access",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.Column("framework_id", sa.UUID(), nullable=False),
        sa.Column(
            "access_level",
            sa.Enum("read", "write", "admin", name="access_level_enum"),
            nullable=False,
        ),
        sa.Column("granted_at", sa.DateTime(), nullable=True),
        sa.Column("granted_by", sa.UUID(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["framework_id"],
            ["compliance_frameworks.id"],
            name=op.f("fk_framework_access_framework_id_compliance_frameworks"),
        ),
        sa.ForeignKeyConstraint(
            ["granted_by"],
            [USER_ID_COLUMN],
            name=op.f("fk_framework_access_granted_by_users"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name=op.f("fk_framework_access_role_id_roles")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_framework_access")),
        sa.UniqueConstraint("role_id", "framework_id", name="uq_role_framework_access"),
    )
    op.create_table(
        "role_permissions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.Column("permission_id", sa.UUID(), nullable=False),
        sa.Column("granted_at", sa.DateTime(), nullable=True),
        sa.Column("granted_by", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["granted_by"],
            [USER_ID_COLUMN],
            name=op.f("fk_role_permissions_granted_by_users"),
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            name=op.f("fk_role_permissions_permission_id_permissions"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name=op.f("fk_role_permissions_role_id_roles")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_role_permissions")),
        sa.UniqueConstraint("role_id", "permission_id", name="uq_role_permission"),
    )
    op.create_table(
        "user_roles",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(USER_ID_FIELD, sa.UUID(), nullable=False),
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.Column("granted_by", sa.UUID(), nullable=True),
        sa.Column("granted_at", sa.DateTime(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["granted_by"], [USER_ID_COLUMN], name=op.f("fk_user_roles_granted_by_users")
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name=op.f("fk_user_roles_role_id_roles")
        ),
        sa.ForeignKeyConstraint(
            [USER_ID_FIELD], [USER_ID_COLUMN], name=op.f("fk_user_roles_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_roles")),
        sa.UniqueConstraint(USER_ID_FIELD, "role_id", name="uq_user_role"),
    )
    op.create_table(
        "user_sessions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(USER_ID_FIELD, sa.UUID(), nullable=False),
        sa.Column("session_token", sa.String(length=255), nullable=False),
        sa.Column("roles_at_login", sa.String(length=500), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.String(length=500), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("last_activity", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("logout_reason", sa.String(length=50), nullable=True),
        sa.ForeignKeyConstraint(
            [USER_ID_FIELD], [USER_ID_COLUMN], name=op.f("fk_user_sessions_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_sessions")),
        sa.UniqueConstraint(
            "session_token", name=op.f("uq_user_sessions_session_token")
        ),
    )
    op.create_table(
        "audit_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(USER_ID_FIELD, sa.UUID(), nullable=True),
        sa.Column("session_id", sa.UUID(), nullable=True),
        sa.Column("action", sa.String(length=100), nullable=False),
        sa.Column("resource_type", sa.String(length=50), nullable=True),
        sa.Column("resource_id", sa.String(length=100), nullable=True),
        sa.Column("details", sa.Text(), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.String(length=500), nullable=True),
        sa.Column(
            "severity",
            sa.Enum("info", "warning", "error", "critical", name="severity_enum"),
            nullable=False,
        ),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["user_sessions.id"],
            name=op.f("fk_audit_logs_session_id_user_sessions"),
        ),
        sa.ForeignKeyConstraint(
            [USER_ID_FIELD], [USER_ID_COLUMN], name=op.f("fk_audit_logs_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_audit_logs")),
    )
    op.create_table(
        "data_access",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(USER_ID_FIELD, sa.UUID(), nullable=False),
        sa.Column("business_profile_id", sa.UUID(), nullable=True),
        sa.Column(
            "access_type",
            sa.Enum(
                "own_data", "organization_data", "all_data", name="data_access_enum"
            ),
            nullable=False,
        ),
        sa.Column("granted_at", sa.DateTime(), nullable=True),
        sa.Column("granted_by", sa.UUID(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["business_profile_id"],
            ["business_profiles.id"],
            name=op.f("fk_data_access_business_profile_id_business_profiles"),
        ),
        sa.ForeignKeyConstraint(
            ["granted_by"], [USER_ID_COLUMN], name=op.f("fk_data_access_granted_by_users")
        ),
        sa.ForeignKeyConstraint(
            [USER_ID_FIELD], [USER_ID_COLUMN], name=op.f("fk_data_access_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_data_access")),
        sa.UniqueConstraint(
            USER_ID_FIELD, "business_profile_id", name="uq_user_business_data_access"
        ),
    )
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("data_access")
    op.drop_table("audit_logs")
    op.drop_table("user_sessions")
    op.drop_table("user_roles")
    op.drop_table("role_permissions")
    op.drop_table("framework_access")
    op.drop_table("roles")
    op.drop_table("permissions")
    # ### end Alembic commands ###
