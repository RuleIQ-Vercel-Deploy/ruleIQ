"""Add is_verified column to users table

Revision ID: f40a4f619cad
Revises: 433c68d53999
Create Date: 2025-09-04 16:53:40.125245

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f40a4f619cad'
down_revision = '433c68d53999'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_api_key_scopes_key_scope'), table_name='api_key_scopes')
    op.drop_table('api_key_scopes')
    op.drop_index(op.f('checkpoint_blobs_thread_id_idx'), table_name='checkpoint_blobs')
    op.drop_table('checkpoint_blobs')
    op.drop_index(op.f('idx_api_key_usage_key_timestamp'), table_name='api_key_usage')
    op.drop_index(op.f('idx_api_key_usage_timestamp'), table_name='api_key_usage')
    op.drop_index(op.f('ix_api_key_usage_timestamp'), table_name='api_key_usage')
    op.drop_table('api_key_usage')
    op.drop_index(op.f('checkpoints_thread_id_idx'), table_name='checkpoints')
    op.drop_table('checkpoints')
    op.drop_index(op.f('idx_api_keys_expires'), table_name='api_keys')
    op.drop_index(op.f('idx_api_keys_org_status'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_organization_id'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_table('checkpoint_migrations')
    op.drop_index(op.f('checkpoint_writes_thread_id_idx'), table_name='checkpoint_writes')
    op.drop_table('checkpoint_writes')
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'is_verified')
    op.create_table('checkpoint_writes',
    sa.Column('thread_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('checkpoint_ns', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
    sa.Column('checkpoint_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('idx', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('channel', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('blob', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('task_path', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('thread_id', 'checkpoint_ns', 'checkpoint_id', 'task_id', 'idx', name=op.f('checkpoint_writes_pkey'))
    )
    op.create_index(op.f('checkpoint_writes_thread_id_idx'), 'checkpoint_writes', ['thread_id'], unique=False)
    op.create_table('checkpoint_migrations',
    sa.Column('v', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('v', name=op.f('checkpoint_migrations_pkey'))
    )
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('key_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('key_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('organization_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('key_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('allowed_ips', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('allowed_origins', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('rate_limit', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rate_limit_window', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pk_api_keys'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_api_keys_organization_id'), 'api_keys', ['organization_id'], unique=False)
    op.create_index(op.f('ix_api_keys_key_id'), 'api_keys', ['key_id'], unique=True)
    op.create_index(op.f('idx_api_keys_org_status'), 'api_keys', ['organization_id', 'status'], unique=False)
    op.create_index(op.f('idx_api_keys_expires'), 'api_keys', ['expires_at'], unique=False)
    op.create_table('checkpoints',
    sa.Column('thread_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('checkpoint_ns', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
    sa.Column('checkpoint_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parent_checkpoint_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('checkpoint', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('thread_id', 'checkpoint_ns', 'checkpoint_id', name=op.f('checkpoints_pkey'))
    )
    op.create_index(op.f('checkpoints_thread_id_idx'), 'checkpoints', ['thread_id'], unique=False)
    op.create_table('api_key_usage',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('key_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('endpoint', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['key_id'], ['api_keys.key_id'], name=op.f('fk_api_key_usage_key_id_api_keys'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_api_key_usage'))
    )
    op.create_index(op.f('ix_api_key_usage_timestamp'), 'api_key_usage', ['timestamp'], unique=False)
    op.create_index(op.f('idx_api_key_usage_timestamp'), 'api_key_usage', ['timestamp'], unique=False)
    op.create_index(op.f('idx_api_key_usage_key_timestamp'), 'api_key_usage', ['key_id', 'timestamp'], unique=False)
    op.create_table('checkpoint_blobs',
    sa.Column('thread_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('checkpoint_ns', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
    sa.Column('channel', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('blob', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('thread_id', 'checkpoint_ns', 'channel', 'version', name=op.f('checkpoint_blobs_pkey'))
    )
    op.create_index(op.f('checkpoint_blobs_thread_id_idx'), 'checkpoint_blobs', ['thread_id'], unique=False)
    op.create_table('api_key_scopes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('key_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('scope', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('granted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('granted_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['key_id'], ['api_keys.key_id'], name=op.f('fk_api_key_scopes_key_id_api_keys'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_api_key_scopes'))
    )
    op.create_index(op.f('idx_api_key_scopes_key_scope'), 'api_key_scopes', ['key_id', 'scope'], unique=True)
    # ### end Alembic commands ###