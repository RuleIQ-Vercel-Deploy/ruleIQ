
"residual_risks"str
5,"Calculate residual risk across all domains"str
ÚÐ"
        MATCH (risk:Risk)
        OPTIONAL MATCH (risk)<-[m:MITIGATES]-(ctrl:Control)
        WITH risk, 
             risk.risk_score AS inherent_risk,
             COALESCE(AVG(m.mitigation_percentage), 0) AS avg_mitigation
        RETURN risk.name AS risk_name,
               risk.category AS category,
               inherent_risk,
               ROUND(inherent_risk * (1 - avg_mitigation/100.0), 2) AS residual_risk,
               CASE 
                 WHEN inherent_risk * (1 - avg_mitigation/100.0) >= 15 THEN 'HIGH'
                 WHEN inherent_risk * (1 - avg_mitigation/100.0) >= 10 THEN 'MEDIUM'
                 ELSE 'LOW'
               END AS risk_level
        ORDER BY residual_risk DESC
        "strself
Ð' Ð(+"Û(
&
Ò Ò(äquery"#id#:Bstr#
!

ã ã(1"#unknown-value#,
*

ã ã(1results"#unknown-value#&
$

ä ä(*"#new-object#Bdict"
 

ä ä()	"	#map-set#:

ä ä(**A/home/omar/Documents/ruleIQ/langgraph_agent/core/neo4j_service.py