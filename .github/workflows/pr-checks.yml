name: Pull Request Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - develop


permissions:
  contents: read
  pull-requests: write  # Only if needed for PR comments
  issues: write  # Only if needed for issues
  packages: write  # Only if pushing to registry
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  MIN_COVERAGE: 80

jobs:
  # PR validation
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            test
            chore
            perf
            ci
            build
            revert
      
      - name: Check PR size
        run: |
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
          ADDITIONS=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{sum+=$1} END {print sum}')
          DELETIONS=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{sum+=$2} END {print sum}')
          
          echo "Changed files: $CHANGED_FILES"
          echo "Additions: $ADDITIONS"
          echo "Deletions: $DELETIONS"
          
          if [ "$ADDITIONS" -gt 1000 ]; then
            echo "‚ö†Ô∏è Warning: Large PR with $ADDITIONS additions. Consider breaking it down."
          fi
      
      - name: Check for conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          if ! git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q "<<<<<<< "; then
            echo "‚úÖ No merge conflicts detected"
          else
            echo "‚ùå Merge conflicts detected"
            exit 1
          fi

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy pylint isort
      
      - name: Python formatting check
        run: |
          black --check --diff .
          isort --check-only --diff .
      
      - name: Python linting
        run: |
          flake8 . --count --statistics
          pylint $(git ls-files '*.py') --exit-zero
      
      - name: Python type checking
        run: mypy . --ignore-missing-imports
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Frontend linting
        working-directory: ./frontend
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
            pnpm run lint
            pnpm run type-check
          else
            npm ci
            npm run lint
            npm run type-check
          fi

  # Test coverage check
  coverage-check:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ruleiq_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://ruleiq_test:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term
      
      - name: Check coverage threshold
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.get('line-rate')) * 100)")
          echo "Current coverage: ${COVERAGE}%"
          echo "Minimum required: ${MIN_COVERAGE}%"
          
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below minimum ${MIN_COVERAGE}%"
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets minimum requirement"
          fi
      
      - name: Coverage report comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: ${{ env.MIN_COVERAGE }}
          MINIMUM_ORANGE: 70

  # Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for documentation updates
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          # Check if code files were changed
          CODE_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '\.(py|ts|tsx|js|jsx)$'; then
            CODE_CHANGED=true
          fi
          
          # Check if docs were updated
          DOCS_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '(README|CONTRIBUTING|docs/|\.md$)'; then
            DOCS_CHANGED=true
          fi
          
          if [ "$CODE_CHANGED" = true ] && [ "$DOCS_CHANGED" = false ]; then
            echo "‚ö†Ô∏è Code changes detected but no documentation updates"
            echo "Please ensure documentation is updated if needed"
          fi
      
      - name: Check README badges
        run: |
          if [ -f "README.md" ]; then
            echo "Checking for required badges in README..."
            grep -q "github.com/.*/workflows/.*/badge.svg" README.md || echo "‚ö†Ô∏è CI badge missing"
          fi

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for dependency changes
        run: |
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -qE '(requirements\.txt|package\.json|package-lock\.json)'; then
            echo "üì¶ Dependency changes detected"
            
            # Check for lock file updates
            if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q 'package.json'; then
              if ! git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q 'package-lock.json'; then
                echo "‚ùå package.json changed but package-lock.json not updated"
                exit 1
              fi
            fi
          fi
      
      - name: Check for security vulnerabilities
        run: |
          pip install safety
          safety check || echo "‚ö†Ô∏è Security vulnerabilities found in dependencies"

  # Database migration check
  migration-check:
    name: Migration Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ruleiq_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install alembic psycopg2-binary sqlalchemy
      
      - name: Check for migration conflicts
        env:
          DATABASE_URL: postgresql://ruleiq_test:test_password@localhost:5432/ruleiq_test
        run: |
          if [ -d "alembic/versions" ]; then
            echo "Checking database migrations..."
            
            # Check for multiple heads
            HEADS=$(alembic heads | wc -l)
            if [ "$HEADS" -gt 1 ]; then
              echo "‚ùå Multiple migration heads detected. Please merge migrations."
              exit 1
            fi
            
            # Test migration up and down
            alembic upgrade head
            alembic downgrade -1
            alembic upgrade head
            
            echo "‚úÖ Migrations are valid"
          fi

  # PR summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-validation, code-quality, coverage-check, docs-check, dependency-check, migration-check]
    if: always()
    
    steps:
      - name: Generate PR summary
        run: |
          echo "## üìã PR Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PR Validation | ${{ needs.pr-validation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Coverage | ${{ needs.coverage-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docs-check.result == 'success' && '‚úÖ Checked' || '‚ö†Ô∏è Review' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-check.result == 'success' && '‚úÖ Valid' || '‚ö†Ô∏è Review' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Migrations | ${{ needs.migration-check.result == 'success' && '‚úÖ Valid' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.pr-validation.result }}" == "success" ] && \
             [ "${{ needs.code-quality.result }}" == "success" ] && \
             [ "${{ needs.coverage-check.result }}" == "success" ] && \
             [ "${{ needs.migration-check.result }}" == "success" ]; then
            echo "### ‚úÖ All required checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Some checks failed. Please review and fix." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Generated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY