name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Backend Testing and Quality Checks
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ruleiq_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist
          pip install flake8 black mypy pylint bandit safety
      
      - name: Run linting
        run: |
          # Black formatting check
          black --check .
          
          # Flake8 linting
          flake8 . --count --statistics --output-file=flake8-report.txt || true
          
          # Pylint
          pylint $(git ls-files '*.py') --output-format=parseable --output=pylint-report.txt || true
      
      - name: Type checking
        run: |
          mypy . --ignore-missing-imports --no-error-summary || true
      
      - name: Security scan
        run: |
          # Bandit security scanning
          bandit -r . -f json -o bandit-report.json || true
          
          # Safety check for known vulnerabilities
          safety check --json || true
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://ruleiq_test:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
          CI: true
        run: |
          pytest tests/ \
            --cov=. \
            --cov-report=xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --junit-xml=test-results/pytest.xml \
            --timeout=60 \
            -v \
            --tb=short
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-backend
          path: test-results/
      
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend
          path: |
            coverage.xml
            htmlcov/

  # Frontend Testing and Quality Checks
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./frontend
        run: |
          npm run lint -- --output-file eslint-report.json --format json || true
          npm run lint
      
      - name: Type checking
        working-directory: ./frontend
        run: npm run type-check
      
      - name: Run tests with coverage
        working-directory: ./frontend
        run: npm run test:ci
      
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: frontend/coverage/

  # SonarCloud Analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-backend
          path: .
      
      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-frontend
          path: frontend/coverage

      - name: Load SONAR_TOKEN via Doppler (fallback to GitHub secret)
        shell: bash
        run: |
          set -e
          FALLBACK="${{ secrets.SONAR_TOKEN }}"
          if [ -n "${{ secrets.DOPPLER_TOKEN }}" ]; then
            echo "Attempting to load SONAR_TOKEN from Doppler..."
            if SONAR=$(doppler secrets get SONAR_TOKEN --project "${{ secrets.DOPPLER_PROJECT }}" --config "${{ secrets.DOPPLER_CONFIG }}" --plain --token "${{ secrets.DOPPLER_TOKEN }}"); then
              if [ -n "$SONAR" ]; then
                echo "SONAR_TOKEN loaded from Doppler"
                echo "SONAR_TOKEN=$SONAR" >> $GITHUB_ENV
              fi
            fi
          fi
          if [ -z "${SONAR_TOKEN:-}" ]; then
            if [ -n "$FALLBACK" ]; then
              echo "Falling back to SONAR_TOKEN from GitHub Secrets"
              echo "SONAR_TOKEN=$FALLBACK" >> $GITHUB_ENV
            else
              echo "ERROR: SONAR_TOKEN not configured in Doppler or GitHub Secrets" >&2
              exit 1
            fi
          fi
      
      - name: SonarCloud Scan (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ruliq-compliance-platform
            -Dsonar.organization=omara1-bakri
            -Dsonar.sources=.
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.eslint.reportPaths=frontend/eslint-report.json
            -Dsonar.python.flake8.reportPaths=flake8-report.txt
            -Dsonar.python.pylint.reportPaths=pylint-report.txt
            -Dsonar.python.bandit.reportPaths=bandit-report.json
            -Dsonar.exclusions=**/node_modules/**,**/.venv/**,**/htmlcov/**,**/coverage/**,**/.next/**,**/dist/**,**/build/**
            -Dsonar.tests=tests/,frontend/tests/
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.branch.name=${{ github.head_ref }}
            -Dsonar.verbose=true

      - name: SonarCloud Scan (Branch)
        if: ${{ github.event_name != 'pull_request' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ruliq-compliance-platform
            -Dsonar.organization=omara1-bakri
            -Dsonar.sources=.
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.eslint.reportPaths=frontend/eslint-report.json
            -Dsonar.python.flake8.reportPaths=flake8-report.txt
            -Dsonar.python.pylint.reportPaths=pylint-report.txt
            -Dsonar.python.bandit.reportPaths=bandit-report.json
            -Dsonar.exclusions=**/node_modules/**,**/.venv/**,**/htmlcov/**,**/coverage/**,**/.next/**,**/dist/**,**/build/**
            -Dsonar.tests=tests/,frontend/tests/
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.verbose=true

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ruleiq:${{ github.sha }}
            ruleiq:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ruleiq:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Quality Gate Check
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, sonarcloud, docker-build]
    
    steps:
      - name: Check Quality Gate
        run: |
          echo "âœ… All quality checks passed!"
          echo "- Backend tests: Passed"
          echo "- Frontend tests: Passed"
          echo "- SonarCloud analysis: Completed"
          echo "- Docker build: Successful"
          echo "- Security scans: Completed"