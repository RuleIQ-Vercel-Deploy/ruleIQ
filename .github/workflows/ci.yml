name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Backend Testing and Quality Checks
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ruleiq_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist
          pip install flake8 black mypy pylint bandit safety
      
      - name: Run linting
        run: |
          # Black formatting check
          black --check .
          
          # Flake8 linting
          flake8 . --count --statistics --output-file=flake8-report.txt || true
          
          # Pylint
          pylint $(git ls-files '*.py') --output-format=parseable --output=pylint-report.txt || true
      
      - name: Type checking
        run: |
          mypy . --ignore-missing-imports --no-error-summary || true
      
      - name: Security scan
        run: |
          # Bandit security scanning
          bandit -r . -f json -o bandit-report.json || true
          
          # Safety check for known vulnerabilities
          safety check --json || true
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://ruleiq_test:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
          CI: true
        run: |
          pytest tests/ \
            --cov=. \
            --cov-report=xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --junit-xml=test-results/pytest.xml \
            --timeout=60 \
            -v \
            --tb=short
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-backend
          path: test-results/
      
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend
          path: |
            coverage.xml
            htmlcov/

  # Frontend Testing and Quality Checks
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./frontend
        run: |
          npm run lint -- --output-file eslint-report.json --format json || true
          npm run lint
      
      - name: Type checking
        working-directory: ./frontend
        run: npm run type-check
      
      - name: Run tests with coverage
        working-directory: ./frontend
        run: npm run test:ci
      
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: frontend/coverage/

  

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ruleiq:${{ github.sha }}
            ruleiq:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ruleiq:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Quality Gate Check
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    env:
      MIN_BACKEND_COVERAGE: ${{ vars.COVERAGE_MIN_BACKEND }}
      MIN_FRONTEND_COVERAGE: ${{ vars.COVERAGE_MIN_FRONTEND }}
    steps:
      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-backend
          path: artifacts/backend

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-frontend
          path: artifacts/frontend

      - name: Enforce coverage thresholds and summarize
        shell: bash
        run: |
          set -e

          MB="${MIN_BACKEND_COVERAGE:-60}"
          MF="${MIN_FRONTEND_COVERAGE:-60}"

          echo "Using coverage thresholds -> Backend: ${MB}% | Frontend: ${MF}%"

          # Backend coverage from Cobertura XML
          BACKEND_XML="artifacts/backend/coverage.xml"
          if [ ! -f "$BACKEND_XML" ]; then
            echo "ERROR: Backend coverage file not found at $BACKEND_XML" >&2
            exit 1
          fi

          BACKEND_PCT=$(python3 - <<'PY'
import xml.etree.ElementTree as ET, sys
root = ET.parse(sys.argv[1]).getroot()
val = root.get('line-rate')
pct = float(val) * 100 if val is not None else None
print(f"{pct:.2f}" if pct is not None else "NaN")
PY
"$BACKEND_XML")

          # Frontend coverage from lcov.info
          FRONTEND_LCOV="artifacts/frontend/lcov.info"
          if [ ! -f "$FRONTEND_LCOV" ]; then
            echo "ERROR: Frontend lcov file not found at $FRONTEND_LCOV" >&2
            exit 1
          fi

          FRONTEND_PCT=$(awk '
            BEGIN{LF=0; LH=0}
            /^LF:/ {LF += $2}
            /^LH:/ {LH += $2}
            END {
              pct = (LF > 0) ? (100.0*LH/LF) : 0;
              printf "%.2f", pct
            }' "$FRONTEND_LCOV")

          echo "Backend coverage:  ${BACKEND_PCT}% (min ${MB}%)"
          echo "Frontend coverage: ${FRONTEND_PCT}% (min ${MF}%)"

          export BACKEND_PCT FRONTEND_PCT MB MF

          python3 - <<PY
import os, sys
bp = float(os.environ["BACKEND_PCT"])
fp = float(os.environ["FRONTEND_PCT"])
mb = float(os.environ["MB"])
mf = float(os.environ["MF"])
fail = 0
if bp < mb:
    print(f"FAIL: Backend coverage {bp:.2f}% is below minimum {mb:.2f}%")
    fail = 1
if fp < mf:
    print(f"FAIL: Frontend coverage {fp:.2f}% is below minimum {mf:.2f}%")
    fail = 1
sys.exit(fail)
PY

      - name: Write summary
        if: always()
        run: |
          echo "## âœ… Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backend coverage threshold: ${MIN_BACKEND_COVERAGE:-60}%" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend coverage threshold: ${MIN_FRONTEND_COVERAGE:-60}%" >> $GITHUB_STEP_SUMMARY
          if [ -f artifacts/backend/coverage.xml ]; then
            BP=$(python - <<'PY'
import xml.etree.ElementTree as ET
root = ET.parse("artifacts/backend/coverage.xml").getroot()
val = root.get("line-rate")
print(f"{float(val)*100:.2f}" if val else "n/a")
PY
)
            echo "- Backend coverage: ${BP}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Backend coverage: n/a (file missing)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f artifacts/frontend/lcov.info ]; then
            FP=$(awk 'BEGIN{LF=0; LH=0} /^LF:/ {LF += $2} /^LH:/ {LH += $2} END {pct = (LF > 0) ? (100.0*LH/LF) : 0; printf "%.2f", pct}' artifacts/frontend/lcov.info)
            echo "- Frontend coverage: ${FP}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Frontend coverage: n/a (file missing)" >> $GITHUB_STEP_SUMMARY
          fi