name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_pass
  POSTGRES_DB: test_db
  DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
  REDIS_URL: redis://localhost:6379/0
  SECRET_KEY: test-secret-key-for-ci
  JWT_SECRET_KEY: test-jwt-secret-key
  ENVIRONMENT: test
  DEBUG: false

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout

      - name: Validate CI dependencies
        run: |
          test -f scripts/ci/validate_ci_dependencies.py && python scripts/ci/validate_ci_dependencies.py || echo "validate_ci_dependencies.py missing; skipping"

      - name: Run database migrations
        run: |
          python -c "from database.db_setup import create_tables; create_tables()"

      - name: Check database health
        run: |
          test -f database_health_check.py && python database_health_check.py | tee db_health.log || echo "database_health_check.py missing; skipping"

      - name: Validate FastAPI application
        run: |
          python -m scripts.validate_fastapi_app || true
        continue-on-error: true

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=api --cov=services --cov-report=xml --cov-report=term

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --timeout=60

      - name: Validate API endpoints
        run: |
          test -f validate_endpoints.py && python validate_endpoints.py | tee endpoint_validation.log || echo "validate_endpoints.py missing; skipping"
      
      - name: Upload validation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-logs
          path: |
            endpoint_validation.log
            endpoint_validation_report.json
            db_health.log
            database_health_report.json

      - name: Upload coverage reports
        uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4.6.0
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      # Configure CODACY_PROJECT_TOKEN or CODACY_API_TOKEN in repository secrets
      # Settings > Secrets and variables > Actions
      - name: Upload coverage to Codacy
        uses: codacy/codacy-coverage-reporter-action@89d6c85cfafaec52c72b6c5e8b2878d33104c699 # v1.3.0
        if: env.CODACY_PROJECT_TOKEN != '' || env.CODACY_API_TOKEN != ''
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml
          language: python
        continue-on-error: true

  frontend-build:
    name: Frontend Build & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Cache pnpm store
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm run type-check

      - name: Run linting
        run: pnpm run lint

      - name: Build application
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NEXT_PUBLIC_APP_URL: http://localhost:3000
        run: pnpm run build

      - name: Check bundle size
        run: |
          pnpm run analyze:bundle || true

  api-validation:
    name: API Validation
    runs-on: ubuntu-latest
    needs: [backend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start API server
        run: |
          uvicorn api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Health check
        run: |
          curl -f http://localhost:8000/health || exit 1

      - name: Validate OpenAPI schema
        run: |
          curl -f http://localhost:8000/openapi.json > openapi.json
          python -c "import json; json.load(open('openapi.json'))"

      - name: Test critical endpoints
        run: |
          # Test authentication endpoint
          curl -X POST http://localhost:8000/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"test","password":"test"}' || true
          
          # Test health endpoint
          curl -f http://localhost:8000/health
          
          # Test readiness endpoint
          curl -f http://localhost:8000/ready || true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Build backend Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ruleiq/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: ruleiq/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  visualization-backend:
    name: Visualization Backend
    runs-on: ubuntu-latest
    if: ${{ hashFiles('visualization-backend/requirements.txt') != '' }}
    defaults:
      run:
        working-directory: ./visualization-backend

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest tests/ -v || true

      - name: Validate Pydantic models
        run: |
          python -c "from app import models; print('Models validated')" || true

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build, api-validation, docker-build]
    if: always()
    steps:
      - name: CI Pipeline Summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Build | ${{ needs.frontend-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Validation | ${{ needs.api-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-tests.result }}" != "success" || \
                "${{ needs.frontend-build.result }}" != "success" || \
                "${{ needs.api-validation.result }}" != "success" || \
                "${{ needs.docker-build.result }}" != "success" ]]; then
            echo ""
            echo "⚠️ Some CI checks failed. Please review the logs above."
            exit 1
          else
            echo ""
            echo "✅ All CI checks passed successfully!"
          fi