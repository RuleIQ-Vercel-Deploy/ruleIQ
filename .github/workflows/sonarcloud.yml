name: SonarCloud Analysis

on:
  workflow_dispatch:

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      # Backend Setup
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Doppler CLI
        if: ${{ secrets.DOPPLER_TOKEN != '' }}
        run: |
          curl -Ls https://cli.doppler.com/install.sh | sudo sh

      - name: Setup Doppler and install backend dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -n "${{ secrets.DOPPLER_TOKEN }}" ]; then
            doppler run --token "${{ secrets.DOPPLER_TOKEN }}" -- pip install -r requirements.txt
            doppler run --token "${{ secrets.DOPPLER_TOKEN }}" -- pip install pytest pytest-cov flake8 pylint bandit
          else
            pip install -r requirements.txt
            pip install pytest pytest-cov flake8 pylint bandit
          fi

      - name: Load SONAR_TOKEN via Doppler (fallback to GitHub secret)
        shell: bash
        run: |
          set -e
          OK=0
          if [ -n "${{ secrets.DOPPLER_TOKEN }}" ]; then
            echo "Attempting to load SONAR_TOKEN from Doppler..."
            SONAR="$(doppler secrets get SONAR_TOKEN --project "${{ secrets.DOPPLER_PROJECT }}" --config "${{ secrets.DOPPLER_CONFIG }}" --plain --token "${{ secrets.DOPPLER_TOKEN }}" || true)"
            if [ -n "$SONAR" ]; then
              echo "Loaded SONAR_TOKEN from Doppler"
              echo "SONAR_TOKEN=$SONAR" >> "$GITHUB_ENV"
              OK=1
            fi
          fi
          if [ "$OK" -eq 0 ] && [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "Falling back to SONAR_TOKEN from GitHub Secrets"
            echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}" >> "$GITHUB_ENV"
            OK=1
          fi
          if [ "$OK" -eq 0 ]; then
            echo "ERROR: SONAR_TOKEN not configured in Doppler or GitHub Secrets" >&2
            exit 1
          fi

      - name: Run backend tests with coverage
        run: |
          if [ -n "${{ secrets.DOPPLER_TOKEN }}" ]; then
            doppler run --token "${{ secrets.DOPPLER_TOKEN }}" -- python -m pytest \
              --cov=api --cov=services --cov=database --cov=utils --cov=config \
              --cov-report=xml:coverage.xml --cov-report=html:htmlcov \
              tests/ || true
          else
            python -m pytest \
              --cov=api --cov=services --cov=database --cov=utils --cov=config \
              --cov-report=xml:coverage.xml --cov-report=html:htmlcov \
              tests/ || true
          fi

      # Frontend Setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: Run frontend linting
        run: |
          cd frontend
          pnpm lint --format json --output-file eslint-report.json || true

      - name: Run frontend tests with coverage
        run: |
          cd frontend
          pnpm test:coverage --run || true

      # Python linting and security analysis
      - name: Run Python linting
        run: |
          # Flake8
          flake8 --format=json --output-file=flake8-report.json . || true

          # Pylint
          pylint api services database utils config --output-format=json > pylint-report.json || true

          # Bandit security analysis
          bandit -r api services database utils config -f json -o bandit-report.json || true

      # SonarCloud Scan
      - name: SonarCloud Scan (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ruliq-compliance-platform
            -Dsonar.organization=omara1-bakri
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/*.test.js,**/*.spec.ts,**/*.spec.tsx,**/test_*.py,**/*_test.py,**/node_modules/**,**/.venv/**,**/htmlcov/**,**/coverage/**,**/.next/**,**/dist/**,**/build/**
            -Dsonar.tests=tests/,frontend/tests/,frontend/components/**/*.test.tsx,frontend/lib/**/*.test.ts
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.eslint.reportPaths=frontend/eslint-report.json
            -Dsonar.python.flake8.reportPaths=flake8-report.json
            -Dsonar.python.pylint.reportPaths=pylint-report.json
            -Dsonar.python.bandit.reportPaths=bandit-report.json
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.branch.name=${{ github.head_ref }}
            -Dsonar.verbose=true

      - name: SonarCloud Scan (Branch)
        if: ${{ github.event_name != 'pull_request' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ruliq-compliance-platform
            -Dsonar.organization=omara1-bakri
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/*.test.js,**/*.spec.ts,**/*.spec.tsx,**/test_*.py,**/*_test.py,**/node_modules/**,**/.venv/**,**/htmlcov/**,**/coverage/**,**/.next/**,**/dist/**,**/build/**
            -Dsonar.tests=tests/,frontend/tests/,frontend/components/**/*.test.tsx,frontend/lib/**/*.test.ts
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.eslint.reportPaths=frontend/eslint-report.json
            -Dsonar.python.flake8.reportPaths=flake8-report.json
            -Dsonar.python.pylint.reportPaths=pylint-report.json
            -Dsonar.python.bandit.reportPaths=bandit-report.json
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.verbose=true