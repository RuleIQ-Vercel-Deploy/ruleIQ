name: SonarCloud Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  build-test-analyze:
    name: Build, Test, and Analyze
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ruleiq_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist
          pip install flake8 pylint bandit

      - name: Python linting and security (reports for Sonar)
        run: |
          flake8 . --count --statistics --output-file=flake8-report.txt || true
          pylint $(git ls-files '*.py') --output-format=parseable --output=pylint-report.txt || true
          bandit -r . -f json -o bandit-report.json || true

      - name: Run backend tests with coverage
        env:
          DATABASE_URL: postgresql://ruleiq_test:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
          CI: true
        run: |
          pytest tests/ \
            --cov=. \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --timeout=60 \
            -v \
            --tb=short || true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Frontend lint (report for Sonar)
        working-directory: ./frontend
        run: |
          npm run lint -- --output-file eslint-report.json --format json || true

      - name: Run frontend tests with coverage
        working-directory: ./frontend
        run: npm run test:ci || true

      # Optional but recommended by SonarCloud template for performance
      - name: Set up JDK 17 (Sonar scanner dependency)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        uses: actions/cache@v4
        with:
          path: ~/.sonar/native-sonar-scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}