name: SonarCloud Analysis

on:
  push:
    branches: [main, develop, staging, 'release/**']
  pull_request:
    branches: [main, develop, staging]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      # Backend Setup
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Doppler CLI
        run: |
          curl -Ls https://cli.doppler.com/install.sh | sudo sh

      - name: Setup Doppler and install backend dependencies
        run: |
          python -m pip install --upgrade pip
          doppler run --token ${{ secrets.DOPPLER_TOKEN }} -- pip install -r requirements.txt
          doppler run --token ${{ secrets.DOPPLER_TOKEN }} -- pip install pytest pytest-cov flake8 pylint bandit

      - name: Run backend tests with coverage
        run: |
          doppler run --token ${{ secrets.DOPPLER_TOKEN }} -- python -m pytest \
            --cov=api --cov=services --cov=database --cov=utils --cov=config \
            --cov-report=xml:coverage.xml --cov-report=html:htmlcov \
            tests/ || true

      # Frontend Setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: Run frontend linting
        run: |
          cd frontend
          pnpm lint --format json --output-file eslint-report.json || true

      - name: Run frontend tests with coverage
        run: |
          cd frontend
          pnpm test:coverage --run || true

      # Python linting and security analysis
      - name: Run Python linting
        run: |
          # Flake8
          flake8 --format=json --output-file=flake8-report.json . || true

          # Pylint
          pylint api services database utils config --output-format=json > pylint-report.json || true

          # Bandit security analysis
          bandit -r api services database utils config -f json -o bandit-report.json || true

      # SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT }}
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/*.test.js,**/*.spec.ts,**/*.spec.tsx,**/test_*.py,**/*_test.py,**/node_modules/**,**/.venv/**,**/htmlcov/**,**/coverage/**,**/.next/**,**/dist/**,**/build/**
            -Dsonar.tests=tests/,frontend/tests/,frontend/components/**/*.test.tsx,frontend/lib/**/*.test.ts
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.eslint.reportPaths=frontend/eslint-report.json
            -Dsonar.python.flake8.reportPaths=flake8-report.json
            -Dsonar.python.pylint.reportPaths=pylint-report.json
            -Dsonar.python.bandit.reportPaths=bandit-report.json