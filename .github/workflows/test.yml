name: Test Suite

on:
  push:
    branches: [main, develop, agent-swarm]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ruleiq_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          # Critical dependencies for 2,550 test collection
          pip install pyotp freezegun aiofiles docker pydantic_ai graphiti_core
          # Test dependencies
          pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist

      - name: Set up test environment
        run: |
          # Create test directories
          mkdir -p data/cache data/logs uploads
          # Set test environment variables
          echo "TESTING=true" >> $GITHUB_ENV
          echo "ENVIRONMENT=testing" >> $GITHUB_ENV

      - name: Validate test collection
        run: |
          python -m pytest --collect-only -q
          echo "âœ… Test collection successful: $(python -m pytest --collect-only -q 2>/dev/null | grep -c 'tests collected')"

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://ruleiq_test:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-github-actions
          JWT_SECRET_KEY: test-jwt-secret-key-for-github-actions
          ENVIRONMENT: testing
          TESTING: true
        run: |
          python -m pytest \
            --cov=api \
            --cov=services \
            --cov=app \
            --cov=core \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --junit-xml=test-results.xml \
            --timeout=60 \
            --maxfail=10 \
            tests/

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            test-results.xml
            coverage.xml
            htmlcov/

  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Lint frontend code
        run: |
          cd frontend
          npm run lint

      - name: Type checking
        run: |
          cd frontend
          npm run type-check

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-test-results

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Quality Gate Check
        uses: sonarqube-community/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deployment-ready:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, sonarcloud]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deployment readiness validation
        run: |
          echo "ðŸŽ¯ Deployment Readiness Validation"
          echo "âœ… Backend tests passed"
          echo "âœ… Frontend build successful"  
          echo "âœ… SonarCloud analysis complete"
          echo "ðŸš€ Ready for staging deployment"

      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << 'EOF'
          # Deployment Summary
          
          **Build Status**: âœ… SUCCESS
          **Tests**: âœ… PASSED
          **Coverage**: Generated
          **Security Scan**: âœ… COMPLETED
          **Quality Gate**: Checked
          
          **Deployment Target**: Staging Ready
          **Next Steps**: Production security review
          EOF

      - name: Archive deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md