name: Integration Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'


permissions:
  contents: read
  pull-requests: write  # Only if needed for PR comments
  issues: write  # Only if needed for issues
  packages: write  # Only if pushing to registry
env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'
  NODE_VERSION: '18'

jobs:
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements*.txt', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            postgresql-client \
            redis-tools \
            libpq-dev \
            build-essential
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt || true
          pip install pytest-cov pytest-xdist pytest-timeout
      
      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing
          TESTING: 'true'
        run: |
          # Create test database schema
          PGPASSWORD=test_password psql -h localhost -U test_user -d ruleiq_test -c "CREATE SCHEMA IF NOT EXISTS public;"
          
          # Run database migrations
          alembic upgrade head || echo "No migrations to run"
          
          # Verify database connection
          python -c "from database import test_connection; print(test_connection.verify_connection())"
      
      - name: Run integration tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/ruleiq_test
          TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing
          TESTING: 'true'
          PYTEST_TIMEOUT: 300
        run: |
          # Run integration tests in parallel with coverage
          pytest tests/integration/ \
            -v \
            --tb=short \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            -n auto \
            --maxfail=5 \
            --timeout=60 \
            --timeout-method=thread \
            -m "integration" \
            --junitxml=test-results/integration-junit.xml
      
      - name: Run API endpoint tests
        if: success() || failure()
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-ci
        run: |
          pytest tests/integration/test_api_endpoints.py \
            -v \
            --tb=short \
            --timeout=30
      
      - name: Run authentication flow tests
        if: success() || failure()
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-ci
        run: |
          pytest tests/integration/test_auth_flow.py \
            -v \
            --tb=short \
            --timeout=30
      
      - name: Run transaction tests
        if: success() || failure()
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/test_transactions.py \
            -v \
            --tb=short \
            --timeout=30
      
      - name: Generate coverage report
        if: always()
        run: |
          # Generate coverage badge
          coverage-badge -o coverage.svg -f
          
          # Print coverage summary
          coverage report --skip-covered --skip-empty
          
          # Check coverage thresholds
          coverage report --fail-under=80 || echo "Coverage below threshold"
      

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/
            htmlcov/
            coverage.xml
            coverage.svg
      
      - name: Performance regression check
        if: success()
        run: |
          # Run performance tests
          pytest tests/integration/ \
            -v \
            -m "slow_integration" \
            --benchmark-only \
            --benchmark-autosave \
            --benchmark-compare \
            --benchmark-compare-fail=min:10% || echo "Performance regression detected"
      
      - name: Security scan
        if: success()
        run: |
          # Run security checks
          pip install bandit safety
          bandit -r . -ll -x tests/
          safety check --json
      
      - name: Post results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Integration Test Results\n\n${coverage}\n\n✅ All integration tests passed!`
            });

  parallel-integration-tests:
    name: Parallel Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        test-group: [auth, api, transactions, compliance, billing]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test_${{ matrix.test-group }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-xdist pytest-timeout
      
      - name: Run test group - ${{ matrix.test-group }}
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/ruleiq_test_${{ matrix.test-group }}
          REDIS_URL: redis://localhost:6379/${{ strategy.job-index }}
          TEST_GROUP: ${{ matrix.test-group }}
        run: |
          case "${{ matrix.test-group }}" in
            auth)
              pytest tests/integration/test_auth_flow.py -v
              ;;
            api)
              pytest tests/integration/test_api_endpoints.py -v -k "not auth"
              ;;
            transactions)
              pytest tests/integration/test_transactions.py -v
              ;;
            compliance)
              pytest tests/integration/test_api_endpoints.py::TestComplianceEndpoints -v
              ;;
            billing)
              pytest tests/integration/test_api_endpoints.py::TestBillingEndpoints -v
              ;;
          esac
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-group }}
          path: test-results/

  integration-test-summary:
    name: Integration Test Summary
    needs: [integration-tests, parallel-integration-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate summary report
        run: |
          echo "# Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ **Main Integration Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Main Integration Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.parallel-integration-tests.result }}" == "success" ]; then
            echo "✅ **Parallel Integration Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Parallel Integration Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "![Coverage](coverage.svg)" >> $GITHUB_STEP_SUMMARY
      
      - name: Check overall status
        if: needs.integration-tests.result == 'failure' || needs.parallel-integration-tests.result == 'failure'
        run: exit 1