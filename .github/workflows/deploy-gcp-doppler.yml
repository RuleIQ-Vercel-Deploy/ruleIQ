name: Deploy to Google Cloud Run

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        default: 'staging'
        options:
          - production
          - staging
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SERVICE: ruleiq-backend
  REGION: europe-west2
  DOPPLER_PROJECT: ruleiq

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7

      - name: Set Environment Config
        id: env-config
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'production' }}"
          if [ "$ENV_NAME" = "staging" ]; then
            echo "DOPPLER_CONFIG=stg" >> $GITHUB_ENV
          else
            echo "DOPPLER_CONFIG=prd" >> $GITHUB_ENV
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa  # v2.1.3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@98ddc00a17442e89a24bbf282954a3b65ce6d200  # v2.1.0

      - name: Extract Project ID
        run: |
          PROJECT_ID=$(gcloud config get-value project)
          echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "Using Project ID: $PROJECT_ID"

      - name: Configure Docker for GCP
        run: |
          # Try to enable APIs (may fail if service account lacks permission)
          gcloud services enable containerregistry.googleapis.com --project=${{ env.GCP_PROJECT_ID }} || echo "Could not enable Container Registry API - assuming already enabled"
          gcloud services enable run.googleapis.com --project=${{ env.GCP_PROJECT_ID }} || echo "Could not enable Cloud Run API - assuming already enabled"

          # Configure Docker
          gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -t gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@014df23b1329b615816a38eb5f473bb9000700b1  # v3

      - name: Sync Doppler secrets to Google Secret Manager
        id: sync-secrets
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          # Try to enable Secret Manager API if not already enabled
          gcloud services enable secretmanager.googleapis.com --project=${{ env.GCP_PROJECT_ID }} || echo "Could not enable Secret Manager API - assuming already enabled"

          # Fetch secrets from Doppler
          SECRETS_JSON=$(doppler secrets download --no-file --format json --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG }})
          SECRET_NAMES=""

          # Loop through secrets and sync them to Google Secret Manager
          for SECRET_NAME in $(echo "$SECRETS_JSON" | jq -r 'keys[]'); do
            SECRET_VALUE=$(echo "$SECRETS_JSON" | jq -r --arg key "$SECRET_NAME" '.[$key]')
            SECRET_ID="${SERVICE}-${DOPPLER_CONFIG}-${SECRET_NAME}" # e.g., ruleiq-backend-prd-DATABASE_URL

            if gcloud secrets describe "$SECRET_ID" --project=${{ env.GCP_PROJECT_ID }} &>/dev/null; then
              echo "Updating secret $SECRET_ID"
              echo -n "$SECRET_VALUE" | gcloud secrets versions add "$SECRET_ID" --data-file=- --project=${{ env.GCP_PROJECT_ID }}
            else
              echo "Creating secret $SECRET_ID"
              echo -n "$SECRET_VALUE" | gcloud secrets create "$SECRET_ID" --replication-policy="automatic" --data-file=- --project=${{ env.GCP_PROJECT_ID }}
            fi
            SECRET_NAMES="${SECRET_NAMES}${SECRET_NAME}=${SECRET_ID}:latest,"
          done

          # Save the list of secret mappings for the deploy step
          echo "secret_args=${SECRET_NAMES%,}" >> $GITHUB_OUTPUT

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.SERVICE }} \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 2 \
            --timeout 300 \
            --max-instances 100 \
            --min-instances 1 \
            --port 8080 \
            --set-env-vars="PYTHONUNBUFFERED=1,ENVIRONMENT=production,PORT=8080" \
            --set-secrets="${{ steps.sync-secrets.outputs.secret_args }}"

          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to: $SERVICE_URL"

      - name: Smoke Test Deployment
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          echo "üîç Smoke testing deployment at: $URL/health"
          sleep 5 # Give service a moment to stabilize
          curl --fail --retry 5 --retry-delay 10 "$URL/health"

      - name: Clean up old images
        if: always()
        continue-on-error: true
        run: |
          echo "This step should be updated to use Artifact Registry 'gcloud artifacts docker images delete' command"
          # Note: The gcloud command for cleaning Artifact Registry is different from GCR.
          # Example: gcloud artifacts docker images list <repo> --sort-by=~CREATE_TIME | tail -n +6 | awk '{print $1}' | xargs -I {} gcloud artifacts docker images delete {} --quiet