name: SonarQube Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      # Backend Setup
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run backend tests with coverage
        run: |
          python -m pytest --cov=api --cov=services --cov=database --cov=utils --cov=config \
            --cov-report=xml:coverage.xml --cov-report=html:htmlcov \
            tests/

      # Frontend Setup
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile

      - name: Run frontend linting
        run: |
          cd frontend
          pnpm lint --format json --output-file eslint-report.json || true

      - name: Run frontend tests with coverage
        run: |
          cd frontend
          pnpm test:coverage --run

      # Python linting and security analysis
      - name: Run Python linting
        run: |
          # Flake8
          flake8 --format=json --output-file=flake8-report.json . || true

          # Pylint
          pylint api services database utils config --output-format=json > pylint-report.json || true

          # Bandit security analysis
          bandit -r api services database utils config -f json -o bandit-report.json || true

      # SonarQube Scan
      - name: SonarQube Scan
        uses: sonarqube-community/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Quality Gate Check
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarqube-community/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Optional: fail the workflow if Quality Gate fails
      - name: "Quality Gate Status"
        run: |
          echo "Quality Gate Status: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          if [ "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" = "FAILED" ]; then
            echo "Quality gate failed"
            exit 1
          fi

