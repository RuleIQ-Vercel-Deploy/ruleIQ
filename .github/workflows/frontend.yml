name: Frontend Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
      - 'pnpm-workspace.yaml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
      - 'pnpm-workspace.yaml'

permissions:
  contents: read

defaults:
  run:
    working-directory: ./frontend

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          pnpm run lint --max-warnings=0
          echo "::notice title=ESLint::Linting completed successfully"

      - name: Run Prettier check
        run: |
          pnpm run format:check
          echo "::notice title=Prettier::Code formatting check completed"

      - name: TypeScript type checking
        run: |
          pnpm run type-check
          echo "::notice title=TypeScript::Type checking completed successfully"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: |
          pnpm run test:unit --coverage --reporter=json --reporter=html

      - name: Upload test coverage
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: frontend-test-coverage
          path: |
            frontend/coverage/
            frontend/test-results.json

      - name: Coverage summary
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  build-verification:
    name: Production Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL || 'https://api.ruleiq.com' }}
          NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL || 'https://app.ruleiq.com' }}
          NEXT_PUBLIC_ENVIRONMENT: production
        run: |
          pnpm run build
          echo "::notice title=Build::Production build completed successfully"

      - name: Check build output
        run: |
          if [ -d ".next" ]; then
            echo "Build output size: $(du -sh .next | cut -f1)"
            echo "## Build Statistics" >> $GITHUB_STEP_SUMMARY
            echo "- Output size: $(du -sh .next | cut -f1)" >> $GITHUB_STEP_SUMMARY
            echo "- Static pages: $(find .next/static -name "*.html" | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: frontend-build
          path: |
            frontend/.next/
            frontend/public/

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Analyze bundle size
        env:
          ANALYZE: true
        run: |
          pnpm run build:analyze || pnpm run build
          
      - name: Generate bundle report
        run: |
          if [ -f ".next/analyze/client.html" ]; then
            echo "## Bundle Analysis" >> $GITHUB_STEP_SUMMARY
            echo "Bundle analysis report generated. Check artifacts for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: always()
        with:
          name: bundle-analysis
          path: |
            frontend/.next/analyze/
            frontend/.next/bundle-analyzer.json

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write  # Required for PR comments
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: pnpm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          pnpm run start &
          sleep 10
          lhci autorun --config=./lighthouserc.js || true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: always()
        with:
          name: lighthouse-results
          path: frontend/.lighthouseci/

      - name: Comment PR with Lighthouse scores
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const path = './frontend/.lighthouseci/lhr-manifest.json';
            
            if (fs.existsSync(path)) {
              const manifest = JSON.parse(fs.readFileSync(path, 'utf8'));
              const scores = manifest[0]?.summary || {};
              
              const comment = `## Lighthouse Audit Results
              
              | Metric | Score |
              |--------|-------|
              | Performance | ${scores.performance || 'N/A'} |
              | Accessibility | ${scores.accessibility || 'N/A'} |
              | Best Practices | ${scores['best-practices'] || 'N/A'} |
              | SEO | ${scores.seo || 'N/A'} |
              | PWA | ${scores.pwa || 'N/A'} |`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          pnpm audit --audit-level=moderate || true
          pnpm audit --json > audit-report.json || true

      - name: Check for outdated packages
        run: |
          pnpm outdated --format json > outdated.json || true
          echo "::notice title=Dependencies::Dependency audit completed"

      - name: Upload audit reports
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: always()
        with:
          name: dependency-audit
          path: |
            frontend/audit-report.json
            frontend/outdated.json

  frontend-summary:
    name: Frontend Pipeline Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, build-verification, bundle-analysis]
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "## Frontend Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification | ${{ needs.build-verification.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Analysis | ${{ needs.bundle-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quality-checks.result }}" != "success" || \
                "${{ needs.unit-tests.result }}" != "success" || \
                "${{ needs.build-verification.result }}" != "success" ]]; then
            echo ""
            echo "⚠️ Frontend pipeline has failures. Please review the logs above."
            exit 1
          else
            echo ""
            echo "✅ Frontend pipeline completed successfully!"
          fi