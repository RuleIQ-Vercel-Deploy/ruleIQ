name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0' # Weekly scan on Sunday

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript-typescript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@9278e421667d5d90a2839487a482448c4ec7df4d # v3.27.2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@9278e421667d5d90a2839487a482448c4ec7df4d # v3.27.2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@9278e421667d5d90a2839487a482448c4ec7df4d # v3.27.2
        with:
          category: "/language:${{ matrix.language }}"

  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] safety ruff gitleaks

      - name: Run Bandit security scan
        run: |
          bandit -r api/ services/ database/ -f json -o bandit-report.json
          if [ -f bandit-report.json ]; then
            echo "::notice title=Bandit Security Report::$(python -c 'import json; data = json.load(open("bandit-report.json")); print(f"Found {len(data.get(\"results\", []))} security issues")')"
          fi
        continue-on-error: true

      - name: Run Safety dependency check
        run: |
          safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            echo "::notice title=Safety Report::Dependency vulnerabilities checked"
          fi
        continue-on-error: true

      - name: Run Ruff security checks
        run: |
          ruff check --select S --output-format json --output-file ruff-security.json . || true
          echo "::notice title=Ruff Security::Security linting completed"
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: always()
        with:
          name: python-security-reports
          path: |
            bandit-report.json
            safety-report.json
            ruff-security.json

  javascript-security:
    name: JavaScript/TypeScript Security
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          pnpm audit --json > npm-audit.json || true
          echo "::notice title=NPM Audit::Dependency vulnerabilities checked"
        continue-on-error: true

      - name: Upload JavaScript security reports
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: always()
        with:
          name: javascript-security-reports
          path: frontend/npm-audit.json

  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@83373cf2f8c4db6e24b41c1a9b086bb9619e9cd3 # v2.3.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: false

  custom-secret-scan:
    name: Custom Secret Pattern Detection
    runs-on: ubuntu-latest
    # This job uses our custom secret scanner (scripts/ci/scan_secrets.py)
    # It is BLOCKING - the pipeline will fail if secrets are detected
    # This prevents hardcoded secrets from reaching production
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.11'

      - name: Run custom secret scanner
        run: |
          python3 scripts/ci/scan_secrets.py
        # NOTE: This job does NOT use continue-on-error
        # It will BLOCK the pipeline if secrets are detected

      - name: Validate no default passwords in production code
        run: |
          echo "Checking for default password parameters in os.getenv() calls..."

          # Search for os.getenv with default password parameters
          # Exclude test files and allow them to have defaults
          if grep -r "os\.getenv.*NEO4J_PASSWORD.*," \
               --include="*.py" \
               --exclude-dir="tests" \
               --exclude-dir="test" \
               services/ api/ core/ database/ middleware/ utils/ 2>/dev/null; then
            echo "❌ ERROR: Found os.getenv() calls with default password parameters!"
            echo "Remove the default value and require the environment variable."
            echo "See docs/security/SECRET_HANDLING_GUIDE.md for guidance."
            exit 1
          fi

          echo "✅ No default password parameters found in production code."

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@3102a65fd5f36d0000297576acc56a475b0de98d # main
        with:
          project: 'RuleIQ'
          path: '.'
          format: 'JSON'
          args: >
            --enableRetired
            --enableExperimental
            --scan '**/requirements*.txt'
            --scan '**/package*.json'
            --scan '**/pnpm-lock.yaml'
        continue-on-error: true

      - name: Upload OWASP reports
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: always()
        with:
          name: owasp-dependency-check
          path: reports/dependency-check-report.json

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@02ef91109b2d589e757aefcfb2854c2783fd7b19 # v4.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=ruleiq
            -Dsonar.organization=ruleiq-org
            -Dsonar.sources=api,services,database,frontend/src
            -Dsonar.tests=tests,frontend/__tests__
            -Dsonar.python.version=3.11
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.python.coverage.reportPaths=coverage.xml
        continue-on-error: true

  codacy-analysis:
    name: Codacy Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Configure CODACY_PROJECT_TOKEN or CODACY_API_TOKEN in repository secrets
      # Settings > Secrets and variables > Actions
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@97bf5df3c09e75f5bcd72695998f96ebd701846e # v4.4.5
        if: env.CODACY_PROJECT_TOKEN != '' || env.CODACY_API_TOKEN != ''
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          gh-code-scanning-compat: true
          max-allowed-issues: 2147483647
        continue-on-error: true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@9278e421667d5d90a2839487a482448c4ec7df4d # v3.27.2
        if: always() && (env.CODACY_PROJECT_TOKEN != '' || env.CODACY_API_TOKEN != '')
        with:
          sarif_file: results.sarif
          category: codacy-analysis
        continue-on-error: true

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, python-security, javascript-security, secret-scanning, custom-secret-scan, dependency-check, codacy-analysis]
    if: always()
    steps:
      - name: Security scan summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Security | ${{ needs.python-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| JavaScript Security | ${{ needs.javascript-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Custom Secret Scan | ${{ needs.custom-secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Codacy Analysis | ${{ needs.codacy-analysis.result }} |" >> $GITHUB_STEP_SUMMARY