name: Coverage Report

on:
  workflow_run:
    workflows: ["Backend Tests", "Frontend Tests"]
    types:
      - completed
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  aggregate-coverage:
    name: Aggregate & Report Coverage
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.9'

      - name: Install dependencies
        run: |
          pip install coverage requests

      - name: Download backend coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: backend-coverage-*
          path: backend-coverage-artifacts
        continue-on-error: true

      - name: Download frontend coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: frontend-unit-coverage
          path: frontend-coverage-artifacts
        continue-on-error: true

      - name: Parse backend coverage
        id: backend-coverage
        run: |
          if [ -f "backend-coverage-artifacts/backend-coverage-unit/coverage.json" ]; then
            BACKEND_COV=$(python3 << 'PYTHON'
          import json
          with open("backend-coverage-artifacts/backend-coverage-unit/coverage.json") as f:
              data = json.load(f)
              print(f"{data['totals']['percent_covered']:.2f}")
          PYTHON
          )
            echo "coverage=$BACKEND_COV" >> $GITHUB_OUTPUT
            echo "Backend coverage: $BACKEND_COV%"
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "No backend coverage data found"
          fi

      - name: Parse frontend coverage
        id: frontend-coverage
        run: |
          if [ -f "frontend-coverage-artifacts/frontend-unit-coverage/coverage/coverage-summary.json" ]; then
            FRONTEND_COV=$(python3 << 'PYTHON'
          import json
          with open("frontend-coverage-artifacts/frontend-unit-coverage/coverage/coverage-summary.json") as f:
              data = json.load(f)
              print(f"{data['total']['lines']['pct']:.2f}")
          PYTHON
          )
            echo "coverage=$FRONTEND_COV" >> $GITHUB_OUTPUT
            echo "Frontend coverage: $FRONTEND_COV%"
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "No frontend coverage data found"
          fi

      - name: Calculate combined coverage
        id: combined-coverage
        run: |
          BACKEND=${{ steps.backend-coverage.outputs.coverage }}
          FRONTEND=${{ steps.frontend-coverage.outputs.coverage }}

          # Simple average (can be weighted by LOC later)
          COMBINED=$(python3 -c "print(f'{($BACKEND + $FRONTEND) / 2:.2f}')")

          echo "coverage=$COMBINED" >> $GITHUB_OUTPUT
          echo "Combined coverage: $COMBINED%"

      - name: Generate coverage report
        run: |
          cat > coverage-report.md << 'EOF'
          # RuleIQ Coverage Report

          **Generated**: $(date '+%Y-%m-%d %H:%M:%S UTC')

          ## Summary

          | Component | Coverage | Status |
          |-----------|----------|--------|
          | **Combined** | ${{ steps.combined-coverage.outputs.coverage }}% | ${{ steps.combined-coverage.outputs.coverage >= 50 && 'üü¢ Good' || 'üü° Needs Improvement' }} |
          | Backend | ${{ steps.backend-coverage.outputs.coverage }}% | ${{ steps.backend-coverage.outputs.coverage >= 27.73 && '‚úÖ Above baseline' || '‚ö†Ô∏è Below baseline' }} |
          | Frontend | ${{ steps.frontend-coverage.outputs.coverage }}% | ${{ steps.frontend-coverage.outputs.coverage > 0 && '‚úÖ Tracked' || '‚ùå No data' }} |

          ## Quality Gates

          - ‚úÖ Backend baseline: 27.73%
          - üìä Current backend: ${{ steps.backend-coverage.outputs.coverage }}%
          - üéØ Target: 80%

          ## Trends

          Coverage data is tracked over time. See artifacts for historical data.

          ## Actions Required

          EOF

          if (( $(echo "${{ steps.backend-coverage.outputs.coverage }} < 25.73" | bc -l) )); then
            echo "- üî¥ **CRITICAL**: Backend coverage dropped below acceptable threshold" >> coverage-report.md
          fi

          if (( $(echo "${{ steps.combined-coverage.outputs.coverage }} < 50" | bc -l) )); then
            echo "- üü° **Action Required**: Overall coverage needs improvement" >> coverage-report.md
          fi

          cat coverage-report.md

      - name: Check quality gates
        id: quality-gates
        run: |
          BACKEND_COV=${{ steps.backend-coverage.outputs.coverage }}
          BASELINE=27.73
          THRESHOLD=25.73  # 2% tolerance

          if (( $(echo "$BACKEND_COV < $THRESHOLD" | bc -l) )); then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Quality gate failed: Coverage dropped below threshold"
            exit 1
          else
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ Quality gate passed: Coverage maintained"
          fi

      - name: Post coverage summary to PR
        if: github.event.workflow_run.event == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const backendCov = '${{ steps.backend-coverage.outputs.coverage }}';
            const frontendCov = '${{ steps.frontend-coverage.outputs.coverage }}';
            const combinedCov = '${{ steps.combined-coverage.outputs.coverage }}';

            const body = `## üìä Coverage Report\n\n` +
              `| Component | Coverage | Status |\n` +
              `|-----------|----------|--------|\n` +
              `| Combined | ${combinedCov}% | ${combinedCov >= 50 ? 'üü¢' : 'üü°'} |\n` +
              `| Backend | ${backendCov}% | ${backendCov >= 27.73 ? '‚úÖ' : '‚ö†Ô∏è'} |\n` +
              `| Frontend | ${frontendCov}% | ‚úÖ |\n\n` +
              `Baseline: 27.73% (backend)\n` +
              `Target: 80%\n\n` +
              `[View detailed coverage reports](${context.payload.workflow_run.html_url})`;

            // Find the PR number from the workflow run
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`
            });

            if (pulls.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pulls.data[0].number,
                body: body
              });
            }

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_number }}
          path: |
            coverage-report.md
            backend-coverage-artifacts/
            frontend-coverage-artifacts/
          retention-days: 90

      - name: Update README badges
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_run'
        run: |
          # This would update badges in README.md
          # Implementation depends on badge service (shields.io, codecov, etc.)
          echo "Badge update would happen here"

  coverage-trend-analysis:
    name: Coverage Trend Analysis
    needs: aggregate-coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download historical coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-report-*
          path: historical-coverage
        continue-on-error: true

      - name: Analyze trends
        run: |
          echo "Analyzing coverage trends over time..."
          # This would generate trend graphs and reports
          # Implementation depends on data storage approach

      - name: Create weekly summary
        run: |
          cat > weekly-summary.md << 'EOF'
          # Weekly Coverage Summary

          **Week of**: $(date '+%Y-%m-%d')

          ## Trend Analysis

          - Coverage trend over last 7 days
          - Modules with biggest changes
          - Recommendations for improvement

          EOF

          echo "Weekly summary created"

      - name: Post weekly summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('weekly-summary.md', 'utf8');

            // Post as a discussion or issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Coverage Summary - ${new Date().toISOString().split('T')[0]}`,
              body: summary,
              labels: ['coverage', 'metrics']
            });
        continue-on-error: true