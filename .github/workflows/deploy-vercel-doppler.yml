name: Vercel Deployment with Doppler

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOPPLER_PROJECT: ruleiq
  DOPPLER_CONFIG_PREVIEW: staging
  DOPPLER_CONFIG_PRODUCTION: production

jobs:
  # Deploy preview for pull requests (only when Doppler is configured)
  deploy-preview:
    if: github.event_name == 'pull_request' && secrets.DOPPLER_TOKEN != ''
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@1ddcafdd40ad2dcb90261e8c88a6c93ad2f2f6d0  # v3.0.0 commit SHA

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install psycopg
        run: pip install psycopg

      - name: Test Database Connection with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG_PREVIEW }} -- python - <<'PY'
          import os, sys
          import psycopg

          db_url = os.environ['DATABASE_URL']
          if db_url.startswith('postgresql+'):
              db_url = db_url.split('+', 1)[0] + '://' + db_url.split('://', 1)[1]

          try:
              conn = psycopg.connect(db_url, connect_timeout=10)
              conn.close()
              print('‚úÖ Neon DB connection successful')
              sys.exit(0)
          except Exception as e:
              print(f'‚ùå Neon DB connection failed: {e}')
              sys.exit(1)
          PY

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG_PREVIEW }} -- vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG_PREVIEW }} -- vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Preview to Vercel with Doppler
        id: deploy
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG_PREVIEW }} -- vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
          echo "üöÄ Preview deployed to: $(cat deployment-url.txt)"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployed to Vercel: ${url}`
            });

  # Check if Doppler is configured
  check-doppler:
    runs-on: ubuntu-latest
    outputs:
      has-doppler: ${{ steps.check.outputs.has-doppler }}
    steps:
      - id: check
        run: |
          if [ -n "${{ secrets.DOPPLER_TOKEN }}" ]; then
            echo "has-doppler=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Doppler token is configured"
          else
            echo "has-doppler=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Doppler token is not configured"
          fi

  # Deploy with Doppler when available
  deploy-with-doppler:
    needs: check-doppler
    if: needs.check-doppler.outputs.has-doppler == 'true' && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@1ddcafdd40ad2dcb90261e8c88a6c93ad2f2f6d0  # v3.0.0 commit SHA

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install psycopg
        run: pip install psycopg

      - name: Validate Doppler Secrets
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          echo "üîç Validating required secrets in Doppler..."
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}
          doppler secrets get VERCEL_TOKEN --plain --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG || (echo "‚ùå VERCEL_TOKEN not found in Doppler" && exit 1)
          doppler secrets get VERCEL_ORG_ID --plain --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG || (echo "‚ùå VERCEL_ORG_ID not found in Doppler" && exit 1)
          doppler secrets get VERCEL_PROJECT_ID --plain --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG || (echo "‚ùå VERCEL_PROJECT_ID not found in Doppler" && exit 1)
          doppler secrets get DATABASE_URL --plain --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG || (echo "‚ùå DATABASE_URL not found in Doppler" && exit 1)
          echo "‚úÖ All required secrets are configured in Doppler"

      - name: Test Database Connection with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- python - <<'PY'
          import os, sys
          import psycopg

          db_url = os.environ['DATABASE_URL']
          if db_url.startswith('postgresql+'):
              db_url = db_url.split('+', 1)[0] + '://' + db_url.split('://', 1)[1]

          try:
              conn = psycopg.connect(db_url, connect_timeout=10)
              conn.close()
              print('‚úÖ Neon DB connection successful')
              sys.exit(0)
          except Exception as e:
              print(f'‚ùå Neon DB connection failed: {e}')
              sys.exit(1)
          PY

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel pull --yes --environment=${{ github.event.inputs.environment || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel with Doppler
        id: deploy
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}

          if [ "${{ github.event.inputs.environment }}" == "preview" ]; then
            doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          else
            doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          fi

          echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to: $(cat deployment-url.txt)"

      - name: Validate Deployment
        continue-on-error: true
        run: |
          URL=$(cat deployment-url.txt)
          echo "üîç Validating deployment at: $URL"

          # Wait for deployment to be ready
          sleep 10

          # Check endpoints (optional, non-blocking)
          curl -f "$URL/health" && echo "‚úÖ Health check passed" || echo "‚ö†Ô∏è Health endpoint not found"
          curl -f "$URL/ready" && echo "‚úÖ Readiness check passed" || echo "‚ö†Ô∏è Ready endpoint not found"

      - name: Create Deployment Record
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              description: 'Deployed via Doppler',
              production_environment: '${{ github.event.inputs.environment || 'production' }}' === 'production',
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: url,
              description: 'Deployed to Vercel with Doppler'
            });

  # Manual deployment job (requires DOPPLER_TOKEN)
  manual-deploy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Validate Doppler token exists
        run: |
          if [ -z "${{ secrets.DOPPLER_TOKEN }}" ]; then
            echo "‚ùå DOPPLER_TOKEN is not configured for manual deployments"
            exit 1
          fi
          echo "‚úÖ DOPPLER_TOKEN is configured"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@1ddcafdd40ad2dcb90261e8c88a6c93ad2f2f6d0  # v3.0.0 commit SHA

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install psycopg
        run: pip install psycopg

      - name: Test Database Connection with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- python - <<'PY'
          import os, sys
          import psycopg

          db_url = os.environ['DATABASE_URL']
          if db_url.startswith('postgresql+'):
              db_url = db_url.split('+', 1)[0] + '://' + db_url.split('://', 1)[1]

          try:
              conn = psycopg.connect(db_url, connect_timeout=10)
              conn.close()
              print('‚úÖ Neon DB connection successful')
              sys.exit(0)
          except Exception as e:
              print(f'‚ùå Neon DB connection failed: {e}')
              sys.exit(1)
          PY

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel pull --yes --environment=${{ github.event.inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel with Doppler
        id: deploy
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG=${{ github.event.inputs.environment == 'preview' && env.DOPPLER_CONFIG_PREVIEW || env.DOPPLER_CONFIG_PRODUCTION }}

          if [ "${{ github.event.inputs.environment }}" == "preview" ]; then
            doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          else
            doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          fi

          echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to: $(cat deployment-url.txt)"

      - name: Validate Deployment
        continue-on-error: true
        run: |
          URL=$(cat deployment-url.txt)
          echo "üîç Validating deployment at: $URL"

          # Wait for deployment to be ready
          sleep 10

          # Check endpoints (optional, non-blocking)
          curl -f "$URL/health" && echo "‚úÖ Health check passed" || echo "‚ö†Ô∏è Health endpoint not found"
          curl -f "$URL/ready" && echo "‚úÖ Readiness check passed" || echo "‚ö†Ô∏è Ready endpoint not found"