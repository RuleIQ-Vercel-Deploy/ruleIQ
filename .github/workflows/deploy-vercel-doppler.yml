name: Vercel Deployment with Doppler

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOPPLER_PROJECT: ruleiq
  DOPPLER_CONFIG_PREVIEW: staging
  DOPPLER_CONFIG_PRODUCTION: production

jobs:
  # Deploy preview for pull requests (only when Doppler is configured)
  deploy-preview:
    if: github.event_name == 'pull_request' && secrets.DOPPLER_TOKEN != ''
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@1ddcafdd40ad2dcb90261e8c88a6c93ad2f2f6d0  # v3.0.0 commit SHA

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install psycopg
        run: pip install psycopg

      - name: Test Database Connection with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG_PREVIEW }} -- python - <<'PY'
          import os, sys
          import psycopg

          db_url = os.environ['DATABASE_URL']
          if db_url.startswith('postgresql+'):
              db_url = db_url.split('+', 1)[0] + '://' + db_url.split('://', 1)[1]

          try:
              conn = psycopg.connect(db_url, connect_timeout=10)
              conn.close()
              print('‚úÖ Neon DB connection successful')
              sys.exit(0)
          except Exception as e:
              print(f'‚ùå Neon DB connection failed: {e}')
              sys.exit(1)
          PY

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG_PREVIEW }} -- vercel pull --yes --environment=preview

      - name: Build Project with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG_PREVIEW }} -- vercel build

      - name: Deploy Preview to Vercel with Doppler
        id: deploy
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          DEPLOYMENT_URL=$(doppler run --project ${{ env.DOPPLER_PROJECT }} --config ${{ env.DOPPLER_CONFIG_PREVIEW }} -- vercel deploy --prebuilt | tail -n 1)
          echo "$DEPLOYMENT_URL" > deployment-url.txt
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Preview deployed to: $DEPLOYMENT_URL"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployed to Vercel: ${url}`
            });

  # Main deployment job (handles both push to main and manual dispatch)
  deploy-production:
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Validate Doppler token exists
        run: |
          if [ -z "${{ secrets.DOPPLER_TOKEN }}" ]; then
            echo "‚ùå DOPPLER_TOKEN is not configured"
            exit 1
          fi
          echo "‚úÖ DOPPLER_TOKEN is configured"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@1ddcafdd40ad2dcb90261e8c88a6c93ad2f2f6d0  # v3.0.0 commit SHA

      - name: Set Environment Config
        id: env-config
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'production' }}"
          if [ "$ENV_NAME" = "preview" ]; then
            echo "config=${{ env.DOPPLER_CONFIG_PREVIEW }}" >> $GITHUB_OUTPUT
            echo "is_prod=false" >> $GITHUB_OUTPUT
            echo "prod_flag=" >> $GITHUB_OUTPUT
            echo "vercel_env=preview" >> $GITHUB_OUTPUT
          else
            echo "config=${{ env.DOPPLER_CONFIG_PRODUCTION }}" >> $GITHUB_OUTPUT
            echo "is_prod=true" >> $GITHUB_OUTPUT
            echo "prod_flag=--prod" >> $GITHUB_OUTPUT
            echo "vercel_env=production" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install psycopg
        run: pip install psycopg

      - name: Validate Doppler Secrets
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          echo "üîç Validating required secrets in Doppler..."
          CONFIG="${{ steps.env-config.outputs.config }}"
          doppler secrets get VERCEL_TOKEN --plain --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG || (echo "‚ùå VERCEL_TOKEN not found in Doppler" && exit 1)
          doppler secrets get VERCEL_ORG_ID --plain --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG || (echo "‚ùå VERCEL_ORG_ID not found in Doppler" && exit 1)
          doppler secrets get VERCEL_PROJECT_ID --plain --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG || (echo "‚ùå VERCEL_PROJECT_ID not found in Doppler" && exit 1)
          doppler secrets get DATABASE_URL --plain --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG || (echo "‚ùå DATABASE_URL not found in Doppler" && exit 1)
          echo "‚úÖ All required secrets are configured in Doppler"

      - name: Test Database Connection with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG="${{ steps.env-config.outputs.config }}"
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- python - <<'PY'
          import os, sys
          import psycopg

          db_url = os.environ['DATABASE_URL']
          if db_url.startswith('postgresql+'):
              db_url = db_url.split('+', 1)[0] + '://' + db_url.split('://', 1)[1]

          try:
              conn = psycopg.connect(db_url, connect_timeout=10)
              conn.close()
              print('‚úÖ Neon DB connection successful')
              sys.exit(0)
          except Exception as e:
              print(f'‚ùå Neon DB connection failed: {e}')
              sys.exit(1)
          PY

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG="${{ steps.env-config.outputs.config }}"
          VERCEL_ENV="${{ steps.env-config.outputs.vercel_env }}"
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel pull --yes --environment=$VERCEL_ENV

      - name: Build Project with Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG="${{ steps.env-config.outputs.config }}"
          PROD_FLAG="${{ steps.env-config.outputs.prod_flag }}"
          doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel build $PROD_FLAG

      - name: Deploy to Vercel with Doppler
        id: deploy
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          CONFIG="${{ steps.env-config.outputs.config }}"
          PROD_FLAG="${{ steps.env-config.outputs.prod_flag }}"
          DEPLOYMENT_URL=$(doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel deploy --prebuilt $PROD_FLAG | tail -n 1)
          echo "$DEPLOYMENT_URL" > deployment-url.txt
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to: $DEPLOYMENT_URL"

      - name: Validate Deployment
        id: validate
        continue-on-error: false
        run: |
          URL=$(cat deployment-url.txt)
          echo "üîç Validating deployment at: $URL"

          # Wait for deployment to be ready
          sleep 15

          # Track validation results
          VALIDATION_FAILED=0

          # Check endpoints
          echo "Checking /health endpoint..."
          if curl -f -s -o /dev/null -w "%{http_code}" "$URL/health" | grep -q "^2"; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            VALIDATION_FAILED=1
          fi

          echo "Checking /ready endpoint..."
          if curl -f -s -o /dev/null -w "%{http_code}" "$URL/ready" | grep -q "^2"; then
            echo "‚úÖ Readiness check passed"
          else
            echo "‚ö†Ô∏è Ready endpoint not found (non-blocking)"
          fi

          echo "Checking /api/v1/health/detailed endpoint..."
          if curl -f -s -o /dev/null -w "%{http_code}" "$URL/api/v1/health/detailed" | grep -q "^2"; then
            echo "‚úÖ Detailed health check passed"
          else
            echo "‚ö†Ô∏è Detailed health endpoint not found (non-blocking)"
          fi

          echo "Checking /docs endpoint..."
          if curl -f -s -o /dev/null -w "%{http_code}" "$URL/docs" | grep -q "^2\|^3"; then
            echo "‚úÖ Documentation endpoint accessible"
          else
            echo "‚ö†Ô∏è Documentation endpoint not found (non-blocking)"
          fi

          # Exit with error if critical validations failed
          if [ $VALIDATION_FAILED -eq 1 ]; then
            echo "‚ùå Critical validation checks failed"
            echo "validation_failed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ All critical validation checks passed"
            echo "validation_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Get Previous Production Deployment
        if: failure() && steps.validate.outputs.validation_failed == 'true' && steps.env-config.outputs.is_prod == 'true'
        id: get-previous
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          echo "üîç Getting previous production deployment for rollback..."
          CONFIG="${{ steps.env-config.outputs.config }}"
          
          # Get list of production deployments
          DEPLOYMENTS=$(doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel ls --prod --confirm 2>/dev/null || echo "")
          
          if [ -z "$DEPLOYMENTS" ]; then
            echo "‚ùå Unable to retrieve deployment history"
            echo "deployment_url=" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Parse to get the second deployment (first is current, second is previous)
          # Vercel ls format: <url> <state> <time>
          PREV_DEPLOYMENT=$(echo "$DEPLOYMENTS" | awk 'NR==3 {print $1}')
          
          if [ -z "$PREV_DEPLOYMENT" ]; then
            echo "‚ùå No previous deployment found for rollback"
            echo "deployment_url=" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Found previous deployment: $PREV_DEPLOYMENT"
          echo "deployment_url=$PREV_DEPLOYMENT" >> $GITHUB_OUTPUT

      - name: Rollback Production Deployment
        if: failure() && steps.validate.outputs.validation_failed == 'true' && steps.env-config.outputs.is_prod == 'true' && steps.get-previous.outputs.deployment_url != ''
        id: rollback
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          echo "üîÑ Initiating production rollback to previous deployment..."
          CONFIG="${{ steps.env-config.outputs.config }}"
          PREV_URL="${{ steps.get-previous.outputs.deployment_url }}"
          
          # Extract deployment ID from URL (format: https://<project>-<id>.vercel.app)
          DEPLOYMENT_ID=$(echo "$PREV_URL" | sed -E 's/https:\/\/[^-]+-([^.]+)\.vercel\.app/\1/')
          
          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "‚ùå Unable to parse deployment ID from: $PREV_URL"
            exit 1
          fi
          
          echo "üöÄ Redeploying previous build to production..."
          ROLLBACK_URL=$(doppler run --project ${{ env.DOPPLER_PROJECT }} --config $CONFIG -- vercel deploy "$PREV_URL" --prod --prebuilt --confirm 2>/dev/null | tail -n 1 || echo "")
          
          if [ -z "$ROLLBACK_URL" ]; then
            echo "‚ùå Rollback failed - unable to redeploy previous version"
            echo "rollback_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Successfully rolled back to: $ROLLBACK_URL"
          echo "rollback_url=$ROLLBACK_URL" >> $GITHUB_OUTPUT
          echo "rollback_success=true" >> $GITHUB_OUTPUT
          
          # Verify the rollback deployment
          sleep 10
          if curl -f -s -o /dev/null -w "%{http_code}" "$ROLLBACK_URL/health" | grep -q "^2"; then
            echo "‚úÖ Rollback deployment health check passed"
          else
            echo "‚ö†Ô∏è Rollback deployment health check failed - manual intervention required"
          fi

      - name: Rollback Preview Deployment
        if: failure() && steps.validate.outputs.validation_failed == 'true' && steps.env-config.outputs.is_prod == 'false'
        run: |
          echo "‚ö†Ô∏è Preview deployment failed validation"
          echo "‚ÑπÔ∏è Preview deployments are ephemeral - no rollback needed"
          echo "‚ùå Marking job as failed due to validation errors"
          exit 1

      - name: Create Deployment Record
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployUrl = '${{ steps.deploy.outputs.url }}';
            const validationFailed = '${{ steps.validate.outputs.validation_failed }}' === 'true';
            const rollbackSuccess = '${{ steps.rollback.outputs.rollback_success }}' === 'true';
            const rollbackUrl = '${{ steps.rollback.outputs.rollback_url }}';
            const previousUrl = '${{ steps.get-previous.outputs.deployment_url }}';
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            const isProduction = '${{ steps.env-config.outputs.is_prod }}' === 'true';

            let description;
            let state;
            let environmentUrl;

            if (validationFailed) {
              if (isProduction && rollbackSuccess) {
                description = `Deployment failed validation - rolled back to ${previousUrl}`;
                state = 'failure';
                environmentUrl = rollbackUrl;
              } else if (isProduction && previousUrl) {
                description = 'Deployment failed validation - rollback failed, manual intervention required';
                state = 'error';
                environmentUrl = undefined;
              } else if (!isProduction) {
                description = 'Preview deployment failed validation';
                state = 'failure';
                environmentUrl = undefined;
              } else {
                description = 'Deployment failed validation - no previous deployment to rollback';
                state = 'error';
                environmentUrl = undefined;
              }
            } else {
              description = 'Successfully deployed via Doppler';
              state = 'success';
              environmentUrl = deployUrl;
            }

            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              description: description,
              production_environment: isProduction,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: state,
              environment_url: environmentUrl,
              description: description
            });