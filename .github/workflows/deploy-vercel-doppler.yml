name: Vercel Deployment with Doppler

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

permissions:
  contents: read
  deployments: write
  pull-requests: write

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2

      - name: Validate org context and Neon DB connection
        run: |
          # Assert required environment variables
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "‚ùå VERCEL_ORG_ID is not configured"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "‚ùå VERCEL_PROJECT_ID is not configured"
            exit 1
          fi
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "‚ùå DATABASE_URL is not configured"
            exit 1
          fi
          echo "‚úÖ Organization context validated"

          # Install psycopg for DB connection test
          pip install "psycopg[binary]~=3.1"

          # Test Neon DB connection
          python -c "
import sys
import psycopg
import os

try:
    conn = psycopg.connect(os.environ['DATABASE_URL'], connect_timeout=10)
    conn.close()
    print('‚úÖ Neon DB connection successful')
    sys.exit(0)
except Exception as e:
    print('‚ùå Neon DB connection failed')
    sys.exit(1)
          "
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: |
          doppler run -- vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: |
          doppler run -- vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          url=$(doppler run -- vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Preview URL: $url"
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment PR with deployment URL
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            const comment = `## üöÄ Preview Deployment Ready!

            Your changes have been deployed to Vercel:

            üîó **Preview URL:** ${url}

            | Check | Status |
            |-------|--------|
            | Build | ‚úÖ Success |
            | Deploy | ‚úÖ Complete |
            | Environment | Preview |
            | Secrets | üîê Managed by Doppler |

            This preview will be updated automatically as you push new commits.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && secrets.DOPPLER_TOKEN != ''
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2

      - name: Validate org context and Neon DB connection
        run: |
          # Assert required environment variables
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "‚ùå VERCEL_ORG_ID is not configured"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "‚ùå VERCEL_PROJECT_ID is not configured"
            exit 1
          fi
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "‚ùå DATABASE_URL is not configured"
            exit 1
          fi
          echo "‚úÖ Organization context validated"

          # Install psycopg for DB connection test
          pip install "psycopg[binary]~=3.1"

          # Test Neon DB connection
          python -c "
import sys
import psycopg
import os

try:
    conn = psycopg.connect(os.environ['DATABASE_URL'], connect_timeout=10)
    conn.close()
    print('‚úÖ Neon DB connection successful')
    sys.exit(0)
except Exception as e:
    print('‚ùå Neon DB connection failed')
    sys.exit(1)
          "
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: |
          doppler run -- vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: |
          doppler run -- vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          url=$(doppler run -- vercel deploy --prod --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Production URL: $url"
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Validate Deployment
        run: |
          echo "üîç Validating production deployment..."
          # Health check
          curl -f "${{ steps.deploy.outputs.url }}/health" || exit 1
          echo "‚úÖ Health check passed"

          # Ready check
          curl -f "${{ steps.deploy.outputs.url }}/ready" || exit 1
          echo "‚úÖ Readiness check passed"

      - name: Create deployment record
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              production_environment: true
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment to Vercel production completed (Secrets by Doppler)'
            });

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Initiating rollback..."
          doppler run -- vercel rollback --token=${{ secrets.VERCEL_TOKEN }} || true
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  manual-deploy:
    name: Manual Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2

      - name: Validate org context and Neon DB connection
        run: |
          # Assert required environment variables
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "‚ùå VERCEL_ORG_ID is not configured"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "‚ùå VERCEL_PROJECT_ID is not configured"
            exit 1
          fi
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "‚ùå DATABASE_URL is not configured"
            exit 1
          fi
          echo "‚úÖ Organization context validated"

          # Install psycopg for DB connection test
          pip install "psycopg[binary]~=3.1"

          # Test Neon DB connection
          python -c "
import sys
import psycopg
import os

try:
    conn = psycopg.connect(os.environ['DATABASE_URL'], connect_timeout=10)
    conn.close()
    print('‚úÖ Neon DB connection successful')
    sys.exit(0)
except Exception as e:
    print('‚ùå Neon DB connection failed')
    sys.exit(1)
          "
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: |
          doppler run -- vercel pull --yes --environment=${{ github.event.inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            doppler run -- vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            doppler run -- vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            url=$(doppler run -- vercel deploy --prod --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          else
            url=$(doppler run -- vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployment URL: $url"
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deployment Summary
        run: |
          echo "## Manual Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ github.event.inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | ${{ steps.deploy.outputs.url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Triggered By | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Provider | üîê Doppler |" >> $GITHUB_STEP_SUMMARY