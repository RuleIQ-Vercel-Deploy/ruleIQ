name: Deploy to Staging

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: true
        default: 'Manual staging deployment'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  # Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      
      - name: Setup Doppler CLI
        uses: dopplerhq/cli-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@60c2040ba3b7618d270eca4b2f0a43cd55b39c96
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-
            type=raw,value=staging-latest
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=staging-${{ github.sha }}

  # Run Tests Before Deployment
  test-before-deploy:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ruleiq_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ruleiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-timeout
      
      - name: Run smoke tests
        env:
          DATABASE_URL: postgresql://ruleiq_test:test_password@localhost:5432/ruleiq_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          ENVIRONMENT: staging
        run: |
          # Run critical path tests only
          pytest tests/ -m "smoke or critical" --timeout=30 -v

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, test-before-deploy]
    environment:
      name: staging
      url: https://staging.ruleiq.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      
      - name: Setup Doppler CLI
        uses: dopplerhq/cli-action@v3
      
      - name: Configure kubectl
        run: |
          # This would be replaced with your actual Kubernetes/deployment setup
          echo "Configuring deployment credentials..."
          # Example: Configure kubectl, AWS CLI, or other deployment tools
      
      - name: Fetch secrets from Doppler
        run: |
          # Export staging environment variables from Doppler
          doppler secrets download \
            --no-file \
            --format=env \
            --config=stg \
            --token=${{ secrets.DOPPLER_TOKEN_STAGING }} > .env.staging
      
      - name: Deploy to staging
        run: |
          echo "Deploying image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
          
          # Deployment command depends on your infrastructure
          # Examples:
          
          # For Kubernetes:
          # kubectl set image deployment/ruleiq-staging \
          #   ruleiq=${{ needs.build-and-push.outputs.image-tag }} \
          #   --namespace=staging
          
          # For Docker Compose on a server:
          # docker-compose -f docker-compose.staging.yml pull
          # docker-compose -f docker-compose.staging.yml up -d
          
          # For AWS ECS:
          # aws ecs update-service \
          #   --cluster staging \
          #   --service ruleiq \
          #   --force-new-deployment
          
          echo "Deployment initiated successfully"
      
      - name: Run database migrations
        run: |
          echo "Running database migrations..."
          # docker run --env-file=.env.staging \
          #   ${{ needs.build-and-push.outputs.image-tag }} \
          #   alembic upgrade head
      
      - name: Health check
        run: |
          echo "Waiting for deployment to be healthy..."
          sleep 30
          
          # Check health endpoint
          # curl -f https://staging.ruleiq.com/health || exit 1
          
          echo "Deployment is healthy!"
      
      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Run API tests against staging environment
          # pytest tests/e2e/ -m "staging" --base-url=https://staging.ruleiq.com

  # Rollback if needed
  rollback-preparation:
    name: Prepare Rollback Information
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always()
    
    steps:
      - name: Save deployment information
        run: |
          echo "Deployment SHA: ${{ github.sha }}" > deployment-info.txt
          echo "Deployment Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-info.txt
          echo "Deployed By: ${{ github.actor }}" >> deployment-info.txt
          echo "Deployment Status: ${{ needs.deploy-staging.result }}" >> deployment-info.txt
      
      - name: Upload deployment info
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: staging-deployment-${{ github.sha }}
          path: deployment-info.txt
          retention-days: 30

  # Notify on deployment
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "✅ Staging deployment successful!"
          echo "Deployed version: ${{ github.sha }}"
          echo "Deployment URL: https://staging.ruleiq.com"
          # Add Slack/Discord/Email notification here
      
      - name: Notify failure
        if: needs.deploy-staging.result == 'failure'
        run: |
          echo "❌ Staging deployment failed!"
          echo "Failed version: ${{ github.sha }}"
          # Add Slack/Discord/Email notification here