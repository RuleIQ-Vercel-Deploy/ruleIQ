version: '3.8'

services:
  infra-monitoring:
    image: python:3.11-slim
    container_name: bmad-infra-monitoring
    working_dir: /workspace
    volumes:
      - /home/omar/Documents/ruleIQ:/workspace:rw
    environment:
      - TASK_ID=INFRA-001
      - AGENT_TYPE=infrastructure
      - TASK_TITLE=Setup Prometheus and Grafana monitoring
    command: |
      bash -c "
        echo '════════════════════════════════════════════════════════'
        echo '           BMAD CONTAINERIZED AGENT - INFRASTRUCTURE    '
        echo '════════════════════════════════════════════════════════'
        echo 'Task: Setup Prometheus/Grafana Monitoring'
        echo 'Container: bmad-infra-monitoring'
        echo 'Started: \$(date)'
        echo '════════════════════════════════════════════════════════'
        
        echo '[INFRA] Installing monitoring components...'
        sleep 5
        echo '[INFRA] Configuring Prometheus scrape targets...'
        sleep 5
        echo '[INFRA] Setting up Grafana dashboards...'
        sleep 5
        echo '[INFRA] Creating alert rules...'
        sleep 5
        
        mkdir -p /workspace/.bmad-core/handoffs
        echo '{
          \"task\": \"INFRA-001\",
          \"status\": \"completed\",
          \"artifacts\": {
            \"prometheus_config\": \"prometheus.yml\",
            \"grafana_dashboards\": [\"api_metrics.json\", \"system_health.json\"],
            \"alerts\": \"alert_rules.yml\"
          }
        }' > /workspace/.bmad-core/handoffs/INFRA-001_docker_complete.json
        
        echo '[SUCCESS] Monitoring infrastructure configured!'
        echo '════════════════════════════════════════════════════════'
      "
    networks:
      - bmad-network

  redis-caching:
    image: python:3.11-slim
    container_name: bmad-redis-caching
    working_dir: /workspace
    volumes:
      - /home/omar/Documents/ruleIQ:/workspace:rw
    environment:
      - TASK_ID=PERF-004
      - AGENT_TYPE=backend
      - TASK_TITLE=Implement Redis caching layer
    command: |
      bash -c "
        echo '════════════════════════════════════════════════════════'
        echo '            BMAD CONTAINERIZED AGENT - BACKEND          '
        echo '════════════════════════════════════════════════════════'
        echo 'Task: Add Redis Caching Layer'
        echo 'Container: bmad-redis-caching'
        echo 'Started: \$(date)'
        echo '════════════════════════════════════════════════════════'
        
        echo '[BACKEND] Configuring Redis connection...'
        sleep 5
        echo '[BACKEND] Implementing cache strategies...'
        sleep 5
        echo '[BACKEND] Setting up TTL policies...'
        sleep 5
        echo '[BACKEND] Creating cache invalidation logic...'
        sleep 5
        
        mkdir -p /workspace/.bmad-core/handoffs
        echo '{
          \"task\": \"PERF-004\",
          \"status\": \"completed\",
          \"config\": {
            \"redis_host\": \"localhost\",
            \"redis_port\": 6379,
            \"ttl\": {
              \"sessions\": 3600,
              \"api_responses\": 300
            }
          }
        }' > /workspace/.bmad-core/handoffs/PERF-004_docker_complete.json
        
        echo '[SUCCESS] Redis caching layer implemented!'
        echo '════════════════════════════════════════════════════════'
      "
    networks:
      - bmad-network

  cicd-pipeline:
    image: python:3.11-slim
    container_name: bmad-cicd-pipeline
    working_dir: /workspace
    volumes:
      - /home/omar/Documents/ruleIQ:/workspace:rw
    environment:
      - TASK_ID=CICD-001
      - AGENT_TYPE=devops
      - TASK_TITLE=Configure CI/CD pipeline
    command: |
      bash -c "
        echo '════════════════════════════════════════════════════════'
        echo '             BMAD CONTAINERIZED AGENT - DEVOPS          '
        echo '════════════════════════════════════════════════════════'
        echo 'Task: Setup CI/CD Pipeline'
        echo 'Container: bmad-cicd-pipeline'
        echo 'Started: \$(date)'
        echo '════════════════════════════════════════════════════════'
        
        echo '[DEVOPS] Creating GitHub Actions workflow...'
        sleep 5
        echo '[DEVOPS] Setting up test automation...'
        sleep 5
        echo '[DEVOPS] Configuring deployment strategies...'
        sleep 5
        echo '[DEVOPS] Implementing rollback mechanisms...'
        sleep 5
        
        mkdir -p /workspace/.bmad-core/handoffs
        echo '{
          \"task\": \"CICD-001\",
          \"status\": \"completed\",
          \"pipeline\": {
            \"stages\": [\"test\", \"build\", \"deploy\"],
            \"environments\": [\"dev\", \"staging\", \"production\"],
            \"rollback\": true
          }
        }' > /workspace/.bmad-core/handoffs/CICD-001_docker_complete.json
        
        echo '[SUCCESS] CI/CD pipeline configured!'
        echo '════════════════════════════════════════════════════════'
      "
    networks:
      - bmad-network

networks:
  bmad-network:
    driver: bridge