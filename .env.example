# RuleIQ Environment Configuration Example
# Copy this file to .env.local for development or .env for production
# DO NOT commit .env or .env.local files to version control
# 
# Required fields are marked with [REQUIRED]
# Production-critical fields are marked with [PRODUCTION]
# ===================================================================

# ===================================================================
# APPLICATION SETTINGS
# ===================================================================
ENVIRONMENT=development
DEBUG=true  # [PRODUCTION] Must be false in production
APP_NAME=RuleIQ
APP_VERSION=1.0.0
APP_URL=http://localhost:3000
API_VERSION=v1

# ===================================================================
# DATABASE CONFIGURATION [REQUIRED]
# ===================================================================
# PostgreSQL connection URL (supports Neon, Supabase, local PostgreSQL)
# Format: postgresql+asyncpg://username:password@host:port/database
DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/ruleiq

# Test database (for running tests)
TEST_DATABASE_URL=postgresql://postgres:password@localhost:5432/ruleiq_test

# Database connection pool settings [PRODUCTION]
DB_POOL_SIZE=25
DB_MAX_OVERFLOW=50
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=1800

# ===================================================================
# REDIS CONFIGURATION [REQUIRED]
# ===================================================================
# Redis connection URL
REDIS_URL=redis://localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0

# Separate Redis databases for different purposes
CACHE_REDIS_URL=redis://localhost:6379/1
SESSION_REDIS_URL=redis://localhost:6379/2

# ===================================================================
# NEO4J CONFIGURATION (Optional - for GraphRAG features)
# ===================================================================
NEO4J_URI=bolt://localhost:7687
NEO4J_USERNAME=neo4j
NEO4J_PASSWORD=your-neo4j-password
NEO4J_DATABASE=neo4j

# Neo4j connection settings
NEO4J_MAX_CONNECTION_LIFETIME=3600
NEO4J_MAX_CONNECTION_POOL_SIZE=50
NEO4J_CONNECTION_ACQUISITION_TIMEOUT=60

# ===================================================================
# AUTHENTICATION & SECURITY [REQUIRED] [PRODUCTION]
# ===================================================================
# Generate secure keys with: openssl rand -hex 32
JWT_SECRET=your-jwt-secret-key-min-32-chars
JWT_SECRET_KEY=your-jwt-secret-key-min-32-chars
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=60
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# Application secret key [REQUIRED]
SECRET_KEY=your-secret-key-min-32-chars
ENCRYPTION_KEY=your-32-character-encryption-key
FERNET_KEY=your-fernet-key-base64-encoded

# OAuth 2.0 Providers (optional)
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
MICROSOFT_CLIENT_ID=your-microsoft-client-id
MICROSOFT_CLIENT_SECRET=your-microsoft-client-secret
OKTA_CLIENT_ID=your-okta-client-id
OKTA_CLIENT_SECRET=your-okta-client-secret

# ===================================================================
# API CONFIGURATION [REQUIRED]
# ===================================================================
NEXT_PUBLIC_API_URL=http://localhost:8000
API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=4  # [PRODUCTION] Recommended: 2-4 x CPU cores

# CORS settings [PRODUCTION]
# Use specific origins in production, never use "*"
CORS_ORIGINS=["http://localhost:3000","http://localhost:3001","http://127.0.0.1:3000"]
CORS_ALLOWED_ORIGINS=["http://localhost:3000","http://127.0.0.1:3000"]
ALLOWED_HOSTS=["localhost","127.0.0.1","0.0.0.0"]

# ===================================================================
# AI SERVICES CONFIGURATION
# ===================================================================
# At least one AI service is required for AI features

# OpenAI API
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4-turbo
OPENAI_TEMPERATURE=0.7
OPENAI_MAX_TOKENS=2000

# Google AI (Gemini)
GOOGLE_AI_API_KEY=your-google-ai-api-key-here
GOOGLE_API_KEY=your-google-api-key-here

# Anthropic (Claude)
ANTHROPIC_API_KEY=your-anthropic-api-key-here
CLAUDE_MODEL=claude-3-opus-20240229

# LangSmith Tracing (Optional - for debugging LangGraph)
LANGCHAIN_TRACING_V2=false  # Set to true to enable tracing
LANGCHAIN_API_KEY=your-langsmith-api-key
LANGCHAIN_PROJECT=ruleiq-assessment
LANGCHAIN_ENDPOINT=https://api.smith.langchain.com

# ===================================================================
# EMAIL CONFIGURATION [REQUIRED for email features]
# ===================================================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-specific-password
SMTP_USE_TLS=true
SMTP_FROM_EMAIL=noreply@yourdomain.com
SMTP_FROM_NAME=RuleIQ

# ===================================================================
# PAYMENT GATEWAY (Optional)
# ===================================================================
# Stripe - Use test keys for development
STRIPE_PUBLISHABLE_KEY=pk_test_your-stripe-publishable-key
STRIPE_SECRET_KEY=sk_test_your-stripe-secret-key
STRIPE_WEBHOOK_SECRET=whsec_your-stripe-webhook-secret

# ===================================================================
# FILE STORAGE CONFIGURATION
# ===================================================================
UPLOAD_DIR=./uploads
TEMP_DIR=./temp
MAX_FILE_SIZE=10485760  # 10MB in bytes
ALLOWED_FILE_TYPES=pdf,doc,docx,xls,xlsx,ppt,pptx,txt,csv,jpg,jpeg,png,gif

# AWS S3 Configuration (Optional)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_REGION=us-east-1
AWS_S3_BUCKET=your-s3-bucket-name
AWS_S3_REGION=us-east-1

# ===================================================================
# LOGGING & MONITORING
# ===================================================================
LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s
LOG_FILE=/var/log/ruleiq/app.log  # Optional

# Production logging
LOG_MAX_BYTES=10485760  # 10MB
LOG_BACKUP_COUNT=5

# Monitoring services (Optional)
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
SENTRY_ENVIRONMENT=development

# Application metrics
ENABLE_METRICS=true
METRICS_PORT=9090

# ===================================================================
# RATE LIMITING [PRODUCTION]
# ===================================================================
RATE_LIMIT_ENABLED=true
RATE_LIMIT_PER_MINUTE=100
RATE_LIMIT_BURST=20

# ===================================================================
# FEATURE FLAGS
# ===================================================================
ENABLE_AI_FEATURES=true
ENABLE_OAUTH=true
ENABLE_EMAIL_NOTIFICATIONS=false
ENABLE_FILE_UPLOAD=true
ENABLE_REAL_TIME_NOTIFICATIONS=true
ENABLE_ADVANCED_ANALYTICS=false
ENABLE_CACHING=true
ENABLE_MONITORING=false

# Development features (set to false in production)
ENABLE_DEBUG_TOOLBAR=false
ENABLE_PROFILING=false
ENABLE_SQL_ECHO=false
HOT_RELOAD=true
DEBUG_TOOLBAR=false
SQL_DEBUG=false
PROFILER_ENABLED=false

# ===================================================================
# PERFORMANCE SETTINGS
# ===================================================================
CACHE_TTL=3600  # Cache time-to-live in seconds
ASSESSMENT_TIMEOUT=3600  # Assessment timeout in seconds
CHAT_HISTORY_LIMIT=20
DEFAULT_PAGE_SIZE=10
MAX_PAGE_SIZE=50

# ===================================================================
# HEALTH CHECK ENDPOINTS
# ===================================================================
HEALTH_CHECK_PATH=/health
READINESS_CHECK_PATH=/ready
HEALTH_CHECK_INTERVAL=10
HEALTH_CHECK_TIMEOUT=2

# ===================================================================
# SESSION CONFIGURATION [PRODUCTION]
# ===================================================================
SECURE_SSL_REDIRECT=false  # [PRODUCTION] Set to true to force HTTPS
SESSION_COOKIE_SECURE=false  # [PRODUCTION] Set to true for HTTPS only
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=Strict

# ===================================================================
# CELERY CONFIGURATION (Optional - for background tasks)
# ===================================================================
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# ===================================================================
# NOTES
# ===================================================================
# 1. All API keys should be obtained from respective service providers
# 2. Use strong, unique passwords for all services
# 3. In production, use environment-specific configuration
# 4. Never commit actual credentials to version control
# 5. Use secrets management service in production (AWS Secrets Manager, HashiCorp Vault, etc.)
# 6. For local development, Redis can be installed with: sudo apt-get install redis-server
# 7. For production, consider using managed services (AWS RDS, ElastiCache, etc.)