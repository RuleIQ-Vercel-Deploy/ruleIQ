"""
Simplified pytest configuration for ruleIQ tests using sync database only.
This avoids asyncpg dependency issues.
"""

import os
import sys
import warnings
import logging
from typing import Generator, Dict, Any
from uuid import uuid4, UUID
from datetime import datetime, timedelta
from pathlib import Path

import pytest
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.pool import StaticPool
from fastapi.testclient import TestClient

# =============================================================================
# ENVIRONMENT SETUP
# =============================================================================

# Suppress warnings
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)
logging.getLogger("passlib").setLevel(logging.ERROR)

# Set test environment variables
os.environ["ENV"] = "testing"
os.environ["DATABASE_URL"] = (
    "postgresql://neondb_owner:npg_s0JhnfGNy3Ze@ep-wild-grass-a8o37wq8-pooler.eastus2.azure.neon.tech/neondb?sslmode=require"
)
os.environ["SECRET_KEY"] = "test_secret_key_for_pytest_sessions"
os.environ["GOOGLE_API_KEY"] = "test_key_for_mocking"
os.environ["SENTRY_DSN"] = ""
os.environ["USE_MOCK_AI"] = "true"

# Generate Fernet key
from cryptography.fernet import Fernet
os.environ["FERNET_KEY"] = Fernet.generate_key().decode()

# =============================================================================
# AI MOCKING
# =============================================================================

import unittest.mock

# Mock google.generativeai
mock_google = unittest.mock.MagicMock()
mock_genai = unittest.mock.MagicMock()
mock_types = unittest.mock.MagicMock()

# Mock the HarmCategory and HarmBlockThreshold enums
mock_types.HarmCategory = unittest.mock.MagicMock()
mock_types.HarmCategory.HARM_CATEGORY_HATE_SPEECH = "HARM_CATEGORY_HATE_SPEECH"
mock_types.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT = "HARM_CATEGORY_DANGEROUS_CONTENT"
mock_types.HarmCategory.HARM_CATEGORY_HARASSMENT = "HARM_CATEGORY_HARASSMENT"
mock_types.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT = "HARM_CATEGORY_SEXUALLY_EXPLICIT"

mock_types.HarmBlockThreshold = unittest.mock.MagicMock()
mock_types.HarmBlockThreshold.BLOCK_NONE = "BLOCK_NONE"

# Mock the response
mock_response = unittest.mock.MagicMock()
mock_response.text = "Mock AI response for testing"
mock_response.parts = [unittest.mock.MagicMock()]
mock_response.parts[0].text = "Mock AI response for testing"

# Mock the model
mock_model = unittest.mock.MagicMock()
mock_model.generate_content.return_value = mock_response
mock_model.model_name = "gemini-2.5-flash"

# Set up the module structure
mock_genai.GenerativeModel.return_value = mock_model
mock_genai.types = mock_types
mock_google.generativeai = mock_genai

# Install the mocks
sys.modules["google"] = mock_google
sys.modules["google.generativeai"] = mock_genai
sys.modules["google.generativeai.types"] = mock_types

# =============================================================================
# PROJECT IMPORTS
# =============================================================================

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Import database models
from database.db_setup import Base
from database.user import User
from database.business_profile import BusinessProfile
from database.compliance_framework import ComplianceFramework
from database.evidence_item import EvidenceItem
from database.generated_policy import GeneratedPolicy
from database.assessment_question import AssessmentQuestion
from database.assessment_session import AssessmentSession
from database.chat_conversation import ChatConversation
from database.chat_message import ChatMessage
from database.implementation_plan import ImplementationPlan
from database.integration_configuration import IntegrationConfiguration
from database.readiness_assessment import ReadinessAssessment
from database.report_schedule import ReportSchedule
from database.models.integrations import (
    Integration,
    EvidenceCollection,
    IntegrationEvidenceItem,
    IntegrationHealthLog,
    EvidenceAuditLog,
)

# =============================================================================
# DATABASE SETUP
# =============================================================================

# Get database URL and convert to sync
db_url = os.environ["DATABASE_URL"]
if "+asyncpg" in db_url:
    db_url = db_url.replace("+asyncpg", "+psycopg2")
elif "postgresql://" in db_url and "+psycopg2" not in db_url:
    db_url = db_url.replace("postgresql://", "postgresql+psycopg2://", 1)

# Create engine with proper settings for tests
engine = create_engine(
    db_url,
    poolclass=StaticPool,
    echo=False,
    connect_args={"connect_timeout": 10},
)

# Create session factory
TestSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# =============================================================================
# DATABASE FIXTURES
# =============================================================================

@pytest.fixture(scope="session", autouse=True)
def setup_database():
    """Set up database for entire test session."""
    # Create all tables
    Base.metadata.create_all(bind=engine)
    
    # Initialize default frameworks
    session = TestSessionLocal()
    try:
        frameworks = [
            {
                "name": "GDPR",
                "display_name": "General Data Protection Regulation",
                "description": "EU data protection and privacy regulation",
                "category": "Data Protection",
            },
            {
                "name": "ISO27001",
                "display_name": "ISO/IEC 27001:2022",
                "description": "Information security management systems",
                "category": "Information Security",
            },
            {
                "name": "SOC2",
                "display_name": "SOC 2 Type II",
                "description": "Service Organization Control 2",
                "category": "Security & Compliance",
            },
        ]
        
        for fw_data in frameworks:
            existing = session.query(ComplianceFramework).filter_by(name=fw_data["name"]).first()
            if not existing:
                framework = ComplianceFramework(**fw_data)
                session.add(framework)
        
        session.commit()
    finally:
        session.close()
    
    yield
    
    # Clean up
    Base.metadata.drop_all(bind=engine)

@pytest.fixture
def db_session():
    """Provide a database session for tests."""
    session = TestSessionLocal()
    try:
        yield session
        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()

# Async session fixture that returns sync session for compatibility
@pytest.fixture
def async_db_session(db_session):
    """Provide sync session for async fixtures (compatibility)."""
    return db_session

# =============================================================================
# USER AND AUTH FIXTURES
# =============================================================================

TEST_USER_ID = UUID("12345678-1234-5678-9012-123456789012")
TEST_BUSINESS_PROFILE_ID = UUID("87654321-4321-8765-4321-876543218765")

@pytest.fixture
def sample_user(db_session):
    """Create a test user."""
    existing = db_session.query(User).filter_by(email="test@example.com").first()
    if existing:
        return existing
    
    user = User(
        id=TEST_USER_ID,
        email="test@example.com",
        hashed_password="fake_password_hash",
        is_active=True,
    )
    db_session.add(user)
    db_session.commit()
    db_session.refresh(user)
    return user

@pytest.fixture
def async_sample_user(sample_user):
    """Async user fixture for compatibility."""
    return sample_user

@pytest.fixture
def sample_business_profile(db_session, sample_user):
    """Create a test business profile."""
    existing = db_session.query(BusinessProfile).filter_by(user_id=sample_user.id).first()
    if existing:
        return existing
    
    profile = BusinessProfile(
        id=TEST_BUSINESS_PROFILE_ID,
        user_id=sample_user.id,
        company_name="Test Company",
        industry="Technology",
        employee_count=50,
        country="USA",
        handles_personal_data=True,
        processes_payments=False,
        stores_health_data=False,
        provides_financial_services=False,
        operates_critical_infrastructure=False,
        has_international_operations=True,
        existing_frameworks=["ISO27001", "SOC2"],
        planned_frameworks=[],
        cloud_providers=["AWS", "Azure"],
        saas_tools=["Office365", "Salesforce"],
        development_tools=["GitHub"],
        compliance_budget="50000-100000",
        compliance_timeline="6-12 months",
    )
    db_session.add(profile)
    db_session.commit()
    db_session.refresh(profile)
    return profile

@pytest.fixture
def async_sample_business_profile(sample_business_profile):
    """Async business profile fixture for compatibility."""
    return sample_business_profile

@pytest.fixture
def auth_token(sample_user):
    """Generate auth token."""
    from api.dependencies.auth import create_access_token
    token_data = {"sub": str(sample_user.id)}
    return create_access_token(data=token_data, expires_delta=timedelta(minutes=30))

@pytest.fixture
def authenticated_headers(auth_token):
    """Auth headers for API requests."""
    return {"Authorization": f"Bearer {auth_token}"}

# =============================================================================
# TEST CLIENT FIXTURES
# =============================================================================

@pytest.fixture
def client(db_session, sample_user):
    """Authenticated test client."""
    from main import app
    from api.dependencies.auth import get_current_active_user, get_current_user
    from database.db_setup import get_async_db, get_db
    
    # Override dependencies
    def override_get_db():
        try:
            yield db_session
        finally:
            pass
    
    async def override_get_async_db():
        yield db_session
    
    def override_get_current_user():
        return sample_user
    
    def override_get_current_active_user():
        return sample_user
    
    app.dependency_overrides[get_db] = override_get_db
    app.dependency_overrides[get_async_db] = override_get_async_db
    app.dependency_overrides[get_current_user] = override_get_current_user
    app.dependency_overrides[get_current_active_user] = override_get_current_active_user
    
    with TestClient(app) as test_client:
        yield test_client
    
    # Clean up
    app.dependency_overrides.clear()

@pytest.fixture
def unauthenticated_client(db_session):
    """Unauthenticated test client."""
    from main import app
    from database.db_setup import get_async_db, get_db
    
    # Override only database dependencies
    def override_get_db():
        try:
            yield db_session
        finally:
            pass
    
    async def override_get_async_db():
        yield db_session
    
    app.dependency_overrides[get_db] = override_get_db
    app.dependency_overrides[get_async_db] = override_get_async_db
    
    with TestClient(app) as test_client:
        yield test_client
    
    # Clean up
    app.dependency_overrides.clear()

# =============================================================================
# DOMAIN FIXTURES
# =============================================================================

@pytest.fixture
def sample_compliance_framework(db_session):
    """Create a test compliance framework."""
    existing = db_session.query(ComplianceFramework).filter_by(name="ISO27001").first()
    if existing:
        return existing
    
    framework = ComplianceFramework(
        id=uuid4(),
        name="ISO27001",
        display_name="ISO/IEC 27001:2022",
        description="Information security management systems",
        category="Information Security",
    )
    db_session.add(framework)
    db_session.commit()
    db_session.refresh(framework)
    return framework

@pytest.fixture
def sample_evidence_item(db_session, sample_business_profile, sample_compliance_framework):
    """Create a test evidence item."""
    evidence = EvidenceItem(
        id=uuid4(),
        user_id=sample_business_profile.user_id,
        business_profile_id=sample_business_profile.id,
        framework_id=sample_compliance_framework.id,
        evidence_name="Sample Security Policy",
        evidence_type="policy_document",
        control_reference="A.5.1",
        description="A sample security policy document for testing.",
        status="active",
        file_path="/path/to/sample/policy.pdf",
        automation_source="manual",
        created_at=datetime.utcnow(),
        updated_at=datetime.utcnow(),
    )
    db_session.add(evidence)
    db_session.commit()
    db_session.refresh(evidence)
    return evidence

@pytest.fixture
def sample_policy_document(db_session, sample_business_profile):
    """Create a test policy document."""
    policy = GeneratedPolicy(
        id=uuid4(),
        user_id=sample_business_profile.user_id,
        business_profile_id=sample_business_profile.id,
        policy_name="Sample Acceptable Use Policy",
        policy_type="acceptable_use",
        content="This is a sample acceptable use policy content...",
        version="1.0",
        status="draft",
        created_at=datetime.utcnow(),
        updated_at=datetime.utcnow(),
    )
    db_session.add(policy)
    db_session.commit()
    db_session.refresh(policy)
    return policy

# =============================================================================
# UTILITY FIXTURES
# =============================================================================

@pytest.fixture(autouse=True)
def ensure_ai_mocking():
    """Ensure AI is mocked."""
    yield mock_model

@pytest.fixture(autouse=True)
def reset_app_state():
    """Reset FastAPI app state between tests."""
    yield
    try:
        from main import app
        app.dependency_overrides.clear()
        if hasattr(app, "_openapi"):
            delattr(app, "_openapi")
    except Exception:
        pass

@pytest.fixture
def mock_ai_client():
    """Mock AI client for testing."""
    from unittest.mock import Mock, patch, AsyncMock
    
    mock_client = Mock()
    mock_response = Mock()
    mock_response.text = "Mock AI response for testing compliance guidance."
    mock_client.generate_content.return_value = mock_response
    mock_client.generate_content_async = AsyncMock(return_value=mock_response)
    
    with patch("config.ai_config.get_ai_model", return_value=mock_client):
        yield mock_client

# =============================================================================
# BACKWARD COMPATIBILITY
# =============================================================================

@pytest.fixture
def sync_db_session(db_session):
    """Alias for compatibility."""
    return db_session

@pytest.fixture
def authenticated_test_client(client):
    """Alias for compatibility."""
    return client

@pytest.fixture
def unauthenticated_test_client(unauthenticated_client):
    """Alias for compatibility."""
    return unauthenticated_client

@pytest.fixture
def test_client(client):
    """Alias for compatibility."""
    return client

# =============================================================================
# TEST UTILITIES
# =============================================================================

def assert_api_response_security(response):
    """Assert API response has proper security headers."""
    # Check for security headers
    assert "X-Content-Type-Options" in response.headers
    assert response.headers["X-Content-Type-Options"] == "nosniff"
    # Additional security checks can be added here
    pass

# =============================================================================
# ADDITIONAL TEST FIXTURES
# =============================================================================

@pytest.fixture
def sample_evidence_data():
    """Sample evidence data."""
    return {
        "evidence_name": "Information Security Policy",
        "description": "Comprehensive security policy",
        "evidence_type": "policy_document",
        "raw_data": '{"file_type": "pdf", "content": "Policy content..."}',
    }

@pytest.fixture
def sample_business_context():
    """Sample business context."""
    return {
        "company_name": "Test Corp",
        "industry": "Technology",
        "employee_count": 150,
        "existing_frameworks": ["ISO27001"],
    }

@pytest.fixture
def optimized_cache_config():
    """Cache configuration."""
    from services.ai.cached_content import CacheLifecycleConfig
    return CacheLifecycleConfig(
        default_ttl_hours=2,
        max_ttl_hours=8,
        min_ttl_minutes=15,
        performance_based_ttl=True,
        cache_warming_enabled=True,
        intelligent_invalidation=True,
        fast_response_threshold_ms=200,
        slow_response_threshold_ms=2000,
        ttl_adjustment_factor=0.2,
    )

@pytest.fixture
def compliance_assistant(db_session):
    """Compliance assistant for testing."""
    from services.ai.assistant import ComplianceAssistant
    return ComplianceAssistant(db_session)