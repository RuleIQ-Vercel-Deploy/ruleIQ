{
  "info": {
    "name": "ruleIQ API with Doppler Integration",
    "description": "Complete API collection for ruleIQ with Doppler secret management integration.\n\n## üîê Doppler Integration\nThis collection is designed to work with Doppler for secure secret management:\n\n1. **Setup Doppler Environment Variables:**\n   - Set `DOPPLER_TOKEN` in your Postman environment\n   - Or use `doppler run -- newman run collection.json`\n\n2. **Pre-request Script Auto-loads Secrets:**\n   - JWT tokens, API keys, and database URLs from Doppler\n   - Automatic token refresh when expired\n   - Secure credential management\n\n## Authentication\n- Most endpoints require JWT Bearer token authentication\n- Tokens are automatically managed via Doppler integration\n- Rate limiting: General (100/min), AI (3-20/min), Auth (5/min)\n\n## Base URLs\n- Development: http://localhost:8000\n- Production: https://api.ruleiq.com",
    "version": "2.0.0-doppler",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// üîê Doppler Integration - Auto-load secrets from environment",
          "// This script runs before each request to ensure we have fresh credentials",
          "",
          "// Method 1: Use Doppler environment variables (when using doppler run)",
          "if (typeof process !== 'undefined' && process.env) {",
          "    console.log('üîê Loading secrets from Doppler environment...');",
          "    ",
          "    // Set API credentials from Doppler (using correct Doppler variable names)",
          "    if (process.env.JWT_SECRET_KEY) {",
          "        pm.environment.set('jwt_secret', process.env.JWT_SECRET_KEY);",
          "    }",
          "    // Note: Doppler uses GOOGLE_AI_API_KEY, not GOOGLE_API_KEY",
          "    if (process.env.GOOGLE_AI_API_KEY) {",
          "        pm.environment.set('google_api_key', process.env.GOOGLE_AI_API_KEY);",
          "        console.log('‚úÖ Google AI API key loaded from Doppler');",
          "    } else if (process.env.GOOGLE_API_KEY) {",
          "        pm.environment.set('google_api_key', process.env.GOOGLE_API_KEY);",
          "    }",
          "    if (process.env.DATABASE_URL) {",
          "        pm.environment.set('database_url', process.env.DATABASE_URL);",
          "    }",
          "    if (process.env.REDIS_URL) {",
          "        pm.environment.set('redis_url', process.env.REDIS_URL);",
          "    }",
          "}",
          "",
          "// Method 2: Fetch from Doppler API (requires DOPPLER_TOKEN)",
          "const dopplerToken = pm.environment.get('DOPPLER_TOKEN');",
          "if (dopplerToken && !pm.environment.get('secrets_loaded')) {",
          "    console.log('üîê Fetching secrets from Doppler API...');",
          "    ",
          "    pm.sendRequest({",
          "        url: 'https://api.doppler.com/v3/configs/config/secrets',",
          "        method: 'GET',",
          "        header: {",
          "            'Authorization': 'Bearer ' + dopplerToken,",
          "            'Accept': 'application/json'",
          "        }",
          "    }, function (err, res) {",
          "        if (!err && res.code === 200) {",
          "            const secrets = res.json().secrets;",
          "            console.log('‚úÖ Loaded ' + Object.keys(secrets).length + ' secrets from Doppler');",
          "            ",
          "            // Set environment variables from Doppler secrets",
          "            Object.keys(secrets).forEach(key => {",
          "                pm.environment.set(key.toLowerCase(), secrets[key].computed);",
          "            });",
          "            ",
          "            pm.environment.set('secrets_loaded', 'true');",
          "        } else {",
          "            console.warn('‚ö†Ô∏è Failed to load secrets from Doppler:', err || res.code);",
          "        }",
          "    });",
          "}",
          "",
          "// Token validation and refresh logic",
          "const currentToken = pm.environment.get('jwt_token');",
          "if (currentToken) {",
          "    try {",
          "        const tokenPayload = JSON.parse(atob(currentToken.split('.')[1]));",
          "        const now = Math.floor(Date.now() / 1000);",
          "        ",
          "        // Check if token expires in next 5 minutes",
          "        if (tokenPayload.exp && tokenPayload.exp - now < 300) {",
          "            console.log('üîÑ JWT token expires soon, should refresh...');",
          "            pm.environment.set('token_needs_refresh', 'true');",
          "        }",
          "    } catch (e) {",
          "        console.warn('‚ö†Ô∏è Invalid JWT token format');",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string",
      "description": "API base URL - automatically loaded from Doppler"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string",
      "description": "JWT Bearer token - obtained via login endpoint"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "Current user ID"
    },
    {
      "key": "business_profile_id",
      "value": "",
      "type": "string",
      "description": "Current business profile ID"
    },
    {
      "key": "DOPPLER_TOKEN",
      "value": "",
      "type": "string",
      "description": "Doppler service token for fetching secrets"
    },
    {
      "key": "secrets_loaded",
      "value": "false",
      "type": "string",
      "description": "Flag to prevent multiple Doppler API calls"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Login with Doppler Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Auto-save JWT token and user details",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    if (responseJson.access_token) {",
                  "        pm.environment.set('jwt_token', responseJson.access_token);",
                  "        console.log('‚úÖ JWT token saved to environment');",
                  "    }",
                  "    ",
                  "    if (responseJson.user_id) {",
                  "        pm.environment.set('user_id', responseJson.user_id);",
                  "    }",
                  "    ",
                  "    if (responseJson.business_profile_id) {",
                  "        pm.environment.set('business_profile_id', responseJson.business_profile_id);",
                  "    }",
                  "    ",
                  "    pm.test('Login successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(responseJson).to.have.property('access_token');",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', function () {",
                  "        pm.response.to.not.have.status(200);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{test_user_email}}",
                  "type": "text",
                  "description": "Loaded from Doppler TEST_USER_EMAIL"
                },
                {
                  "key": "password",
                  "value": "{{test_user_password}}",
                  "type": "text",
                  "description": "Loaded from Doppler TEST_USER_PASSWORD"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/token",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "token"]
            },
            "description": "üîê **Doppler-Integrated Login**\n\nAuthenticate using credentials stored in Doppler:\n- Username: Loaded from `TEST_USER_EMAIL`\n- Password: Loaded from `TEST_USER_PASSWORD`\n\nAutomatically saves JWT token and user details to environment variables for use in other requests."
          }
        }
      ]
    },
    {
      "name": "üß† AI Assessment with Secrets",
      "item": [
        {
          "name": "Stream AI Analysis (with API Key)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Verify we have Google API key from Doppler",
                  "const apiKey = pm.environment.get('google_api_key');",
                  "if (!apiKey) {",
                  "    console.error('‚ùå Google API key not found in environment');",
                  "    console.log('üí° Ensure GOOGLE_AI_API_KEY is set in Doppler');",
                  "} else {",
                  "    console.log('‚úÖ Google API key loaded successfully');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "text/event-stream"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"assessment_results\": [\n    {\n      \"question_id\": \"gdpr_data_collection\",\n      \"answer\": \"yes\",\n      \"evidence\": \"We collect email addresses and company details for service delivery\"\n    }\n  ],\n  \"framework_id\": \"gdpr\",\n  \"session_id\": \"{{$guid}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/ai-assessments/analysis/stream",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "ai-assessments", "analysis", "stream"]
            },
            "description": "üîê **AI Analysis with Doppler Integration**\n\nStreams AI-powered compliance analysis using:\n- Google API key from Doppler secrets\n- Automatic fallback handling\n- Circuit breaker protection\n\nThis endpoint uses the Google Gemini API key stored securely in Doppler."
          }
        }
      ]
    }
  ]
}