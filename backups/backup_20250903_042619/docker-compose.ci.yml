version: '3.8'

services:
  # PostgreSQL for testing
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ruleiq_test
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: ruleiq_test
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ruleiq_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for testing
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application for testing
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://ruleiq_test:test_password@postgres:5432/ruleiq_test
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: test-secret-key-for-ci
      ENVIRONMENT: test
      CI: "true"
    volumes:
      - .:/app
      - /app/.venv
      - /app/node_modules
      - /app/frontend/node_modules
    command: |
      sh -c "
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Running tests...' &&
        pytest tests/ --cov=. --cov-report=xml --cov-report=html --junit-xml=test-results/pytest.xml
      "

  # Frontend testing
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: test
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      CI: "true"
      NODE_ENV: test
    command: |
      sh -c "
        echo 'Running frontend tests...' &&
        npm run test:ci &&
        npm run lint &&
        npm run type-check
      "

volumes:
  postgres_test_data:

networks:
  default:
    name: ruleiq-ci-network