name: Production Rollback

on:
  workflow_dispatch:
    inputs:
      deploymentId:
        description: "Vercel Deployment ID to roll back to (leave empty for previous deployment)"
        required: false
        type: string
      reason:
        description: "Reason for rollback"
        required: true
        type: choice
        options:
          - Critical bug in production
          - Performance degradation
          - Security vulnerability
          - User experience issues
          - Other
      notify_team:
        description: "Send rollback notification to team"
        required: false
        type: boolean
        default: true

jobs:
  rollback:
    name: Production Rollback
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Get deployment information
        id: deployment
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          if [ -z "${{ github.event.inputs.deploymentId }}" ]; then
            echo "No deployment ID provided, getting previous deployment..."
            PREVIOUS_DEPLOYMENT=$(vercel ls --token $VERCEL_TOKEN --limit 2 | grep -E '^[a-zA-Z0-9]{24}' | tail -1 | awk '{print $1}')
            echo "deployment_id=$PREVIOUS_DEPLOYMENT" >> $GITHUB_OUTPUT
            echo "Using previous deployment: $PREVIOUS_DEPLOYMENT"
          else
            echo "deployment_id=${{ github.event.inputs.deploymentId }}" >> $GITHUB_OUTPUT
            echo "Using specified deployment: ${{ github.event.inputs.deploymentId }}"
          fi

      - name: Validate deployment
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DEPLOYMENT_ID: ${{ steps.deployment.outputs.deployment_id }}
        run: |
          echo "🔍 Validating deployment $DEPLOYMENT_ID..."
          vercel inspect $DEPLOYMENT_ID --token $VERCEL_TOKEN

      - name: Run pre-rollback health check
        id: healthcheck
        run: |
          echo "🏥 Running health check on current production..."
          CURRENT_URL="https://ruleiq.com"
          if curl -f -s -o /dev/null -w "%{http_code}" "$CURRENT_URL/api/health" | grep -q "200"; then
            echo "✅ Current production is healthy"
            echo "healthy=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Current production appears unhealthy"
            echo "healthy=false" >> $GITHUB_OUTPUT
          fi

      - name: Perform rollback
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DEPLOYMENT_ID: ${{ steps.deployment.outputs.deployment_id }}
          PRODUCTION_DOMAIN: "ruleiq.com"
        run: |
          echo "🔄 Rolling back to deployment: $DEPLOYMENT_ID"
          vercel alias set $DEPLOYMENT_ID $PRODUCTION_DOMAIN --token $VERCEL_TOKEN
          echo "✅ Rollback initiated"

      - name: Verify rollback
        id: verify
        run: |
          echo "🔍 Verifying rollback..."
          sleep 10
          ROLLED_BACK_DEPLOYMENT=$(curl -s "https://ruleiq.com/api/health" | jq -r '.deploymentId' 2>/dev/null || echo "unknown")
          echo "rolled_back_deployment=$ROLLED_BACK_DEPLOYMENT" >> $GITHUB_OUTPUT

          if [ "$ROLLED_BACK_DEPLOYMENT" = "$DEPLOYMENT_ID" ]; then
            echo "✅ Rollback verified successfully"
            echo "rollback_success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Rollback verification failed"
            echo "rollback_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Run post-rollback smoke tests
        if: steps.verify.outputs.rollback_success == 'true'
        run: |
          echo "🧪 Running smoke tests..."
          # Basic smoke tests
          curl -f https://ruleiq.com || exit 1
          curl -f https://ruleiq.com/api/health || exit 1
          echo "✅ Smoke tests passed"

      - name: Create rollback record
        if: always()
        run: |
          cat > rollback-record.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployment_id": "${{ steps.deployment.outputs.deployment_id }}",
            "reason": "${{ github.event.inputs.reason }}",
            "initiated_by": "${{ github.actor }}",
            "rollback_success": "${{ steps.verify.outputs.rollback_success }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          echo "📋 Rollback record created"
          cat rollback-record.json

      - name: Notify team
        if: github.event.inputs.notify_team == 'true'
        run: |
          echo "📢 Sending rollback notification..."
          # Add your notification logic here (Slack, Discord, email, etc.)
          echo "🔄 Rollback completed by ${{ github.actor }}"
          echo "📋 Reason: ${{ github.event.inputs.reason }}"
          echo "🔗 Deployment: ${{ steps.deployment.outputs.deployment_id }}"
