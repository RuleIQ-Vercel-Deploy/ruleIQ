# SonarCloud Configuration for RuleIQ
# https://sonarcloud.io/project/configuration?id=OmarA1-Bakri_ruleIQ

# ===========================
# Project Identification
# ===========================
sonar.projectKey=OmarA1-Bakri_ruleIQ
sonar.organization=omara1-bakri
sonar.projectName=RuleIQ
sonar.projectVersion=1.0

# ===========================
# Source Configuration
# ===========================

# Backend Python sources
sonar.sources=api,services,core,utils,models,database,middleware,langgraph_agent,config

# Frontend TypeScript/React sources (relative to project root)
sonar.sources=frontend/app,frontend/components,frontend/lib

# Encoding
sonar.sourceEncoding=UTF-8

# ===========================
# Test Configuration
# ===========================

# Test directories
sonar.tests=tests,frontend/tests

# Test file patterns
sonar.test.inclusions=**/test_*.py,**/*_test.py,**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx

# ===========================
# Coverage Configuration
# ===========================

# Backend Python coverage (pytest-cov generates coverage.xml)
sonar.python.coverage.reportPaths=coverage.xml

# Frontend JavaScript/TypeScript coverage (vitest generates lcov.info)
sonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
sonar.typescript.lcov.reportPaths=frontend/coverage/lcov.info

# ===========================
# Exclusions
# ===========================

# General exclusions
sonar.exclusions=\
  **/node_modules/**,\
  **/.venv/**,\
  **/venv/**,\
  **/__pycache__/**,\
  **/*.pyc,\
  **/.next/**,\
  **/dist/**,\
  **/build/**,\
  **/coverage/**,\
  **/htmlcov/**,\
  **/.pytest_cache/**,\
  **/test-results/**,\
  **/playwright-report/**

# Documentation (except README)
sonar.exclusions=\
  **/docs/**/*.md,\
  !**/README.md

# Database migrations
sonar.exclusions=\
  **/alembic/**,\
  **/migrations/**,\
  **/database/migrations/**

# Generated files
sonar.exclusions=\
  **/*_pb2.py,\
  **/*.pb.py,\
  **/generated/**

# Test fixtures and mocks
sonar.test.exclusions=\
  **/conftest.py,\
  **/fixtures/**,\
  **/mocks/**,\
  **/__mocks__/**

# Coverage exclusions (files that don't need coverage)
sonar.coverage.exclusions=\
  **/tests/**,\
  **/test_*.py,\
  **/*_test.py,\
  **/*.test.ts,\
  **/*.test.tsx,\
  **/*.spec.ts,\
  **/*.spec.tsx,\
  **/conftest.py,\
  **/setup_test_environment.py,\
  **/alembic/**,\
  **/migrations/**

# ===========================
# Language-Specific Settings
# ===========================

# Python
sonar.python.version=3.11

# JavaScript/TypeScript
sonar.javascript.node.maxspace=4096
sonar.typescript.node.maxspace=4096

# ===========================
# Quality Gate Settings
# ===========================

# Duplication detection
sonar.cpd.exclusions=\
  **/tests/**,\
  **/migrations/**,\
  **/alembic/**

# Code smell detection
sonar.issue.ignore.multicriteria=e1,e2,e3

# Ignore specific rules for test files
sonar.issue.ignore.multicriteria.e1.ruleKey=python:S2699
sonar.issue.ignore.multicriteria.e1.resourceKey=**/test_*.py

# Ignore long lines in generated files
sonar.issue.ignore.multicriteria.e2.ruleKey=python:S501
sonar.issue.ignore.multicriteria.e2.resourceKey=**/*_pb2.py

# Ignore complexity in integration test files
sonar.issue.ignore.multicriteria.e3.ruleKey=python:S3776
sonar.issue.ignore.multicriteria.e3.resourceKey=**/tests/integration/**

# ===========================
# Analysis Properties
# ===========================

# Enable branch analysis
sonar.branch.name=${env.GITHUB_REF_NAME}

# Pull request analysis
sonar.pullrequest.key=${env.GITHUB_PR_NUMBER}
sonar.pullrequest.branch=${env.GITHUB_HEAD_REF}
sonar.pullrequest.base=${env.GITHUB_BASE_REF}

# SCM provider
sonar.scm.provider=git

# ===========================
# Path Mapping Fixes
# ===========================

# Ensure source paths in coverage reports match SonarCloud expectations
# This fixes the "0% coverage despite generating reports" issue

# Python source root
sonar.python.file.suffixes=.py

# TypeScript/JavaScript source root
sonar.javascript.file.suffixes=.js,.jsx,.ts,.tsx

# Working directory (important for path resolution)
sonar.working.directory=.scannerwork

# ===========================
# Additional Analysis Settings
# ===========================

# Enable external issues (GitHub annotations)
sonar.externalIssuesReportPaths=

# Test execution data
sonar.testExecutionReportPaths=

# Links
sonar.links.homepage=https://github.com/OmarA1-Bakri/ruleIQ
sonar.links.ci=https://github.com/OmarA1-Bakri/ruleIQ/actions
sonar.links.issue=https://github.com/OmarA1-Bakri/ruleIQ/issues
sonar.links.scm=https://github.com/OmarA1-Bakri/ruleIQ

# ===========================
# Performance Settings
# ===========================

# Increase memory for large projects
sonar.scanner.metadataFilePath=.scannerwork/report-task.txt

# Parallel processing
sonar.scanner.parallelize=true

# ===========================
# Notes for Maintainers
# ===========================

# This configuration fixes the path mapping issue where coverage
# showed 0% despite generating reports. Key fixes:
#
# 1. Explicit source paths that match coverage report structure
# 2. Proper coverage.reportPaths configuration
# 3. Exclusions that don't accidentally filter out source files
# 4. Working directory specification for correct path resolution
#
# When running locally:
#   sonar-scanner -Dsonar.login=$SONAR_TOKEN
#
# When running in CI:
#   - Environment variables are automatically set by GitHub Actions
#   - SONAR_TOKEN must be configured as a repository secret
#   - Coverage files must be generated before running SonarCloud scan
#
# Troubleshooting:
#   - If coverage is 0%, check that source paths match those in coverage.xml
#   - Verify coverage files exist at specified reportPaths
#   - Check SonarCloud logs for path resolution warnings
#   - Ensure no source files are accidentally excluded