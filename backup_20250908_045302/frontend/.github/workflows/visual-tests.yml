name: Visual Regression Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: pnpm build

      - name: Run visual tests - ${{ matrix.browser }}
        run: |
          pnpm playwright test tests/visual \
            --project=${{ matrix.browser }}-desktop \
            --reporter=json,html
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: Upload visual diff artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-diff-${{ matrix.browser }}
          path: |
            tests/visual/**/*-diff.png
            tests/visual/**/*-actual.png
          retention-days: 30

  chromatic-deploy:
    name: Chromatic Visual Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Storybook
        run: pnpm build-storybook

      - name: Run Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: build-storybook
          onlyChanged: true
          autoAcceptChanges: main
          exitOnceUploaded: true
          exitZeroOnChanges: true

  storybook-tests:
    name: Storybook Component Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm playwright install --with-deps chromium

      - name: Build Storybook
        run: pnpm build-storybook

      - name: Serve Storybook and run tests
        run: |
          pnpm dlx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "pnpm dlx http-server storybook-static --port 6006 --silent" \
            "pnpm dlx wait-on tcp:6006 && pnpm test:storybook"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: storybook-test-results
          path: |
            coverage/storybook/
            test-results/
          retention-days: 30

  visual-report:
    name: Generate Visual Test Report
    runs-on: ubuntu-latest
    needs: [visual-tests, chromatic-deploy, storybook-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate combined report
        run: |
          echo "# Visual Test Report" > visual-test-report.md
          echo "## Test Summary" >> visual-test-report.md
          echo "- Visual Tests: ${{ needs.visual-tests.result }}" >> visual-test-report.md
          echo "- Chromatic: ${{ needs.chromatic-deploy.result }}" >> visual-test-report.md
          echo "- Storybook Tests: ${{ needs.storybook-tests.result }}" >> visual-test-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('visual-test-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });