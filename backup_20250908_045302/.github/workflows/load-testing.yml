name: Load Testing & Performance Validation

on:
  push:
    branches: [main, develop]
    paths: ["frontend/**", "api/**"]
  pull_request:
    branches: [main, develop]
    paths: ["frontend/**", "api/**"]
  schedule:
    - cron: "0 4 * * *" # Daily at 4 AM UTC

jobs:
  # Install k6 and dependencies
  setup:
    name: Setup Load Testing Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Cache k6 dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/k6
          key: k6-${{ runner.os }}-${{ hashFiles('tests/load/**') }}

  # Smoke test (quick validation)
  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build application
        run: |
          cd frontend
          pnpm build

      - name: Start application
        run: |
          cd frontend
          pnpm start &
          sleep 30

      - name: Run smoke test
        run: |
          k6 run --env BASE_URL=http://localhost:3000 tests/load/k6-config.js \
            --vus 5 --duration 30s \
            --out json=smoke-test-results.json

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: smoke-test-results.json

  # Load test (50 concurrent users)
  load-test:
    name: Load Test (50 Users)
    runs-on: ubuntu-latest
    needs: smoke-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build application
        run: |
          cd frontend
          pnpm build

      - name: Start application
        run: |
          cd frontend
          pnpm start &
          sleep 30

      - name: Run load test
        run: |
          k6 run --env BASE_URL=http://localhost:3000 tests/load/k6-config.js \
            --vus 50 --duration 5m \
            --out json=load-test-results.json

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: load-test-results.json

      - name: Analyze load test results
        run: |
          echo "📊 Load Test Analysis"
          echo "===================="

          # Basic analysis using jq
          if command -v jq &> /dev/null; then
            echo "✅ jq available for analysis"
            cat load-test-results.json | jq -r '
              .metrics.http_req_duration.p95 as $p95 |
              .metrics.http_req_failed.rate as $error_rate |
              "95th percentile response time: \($p95)ms" |
              "Error rate: \($error_rate * 100)%"
            ' || echo "⚠️ Could not analyze results"
          else
            echo "⚠️ jq not available, skipping detailed analysis"
          fi

  # Stress test (150 concurrent users)
  stress-test:
    name: Stress Test (150 Users)
    runs-on: ubuntu-latest
    needs: load-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build application
        run: |
          cd frontend
          pnpm build

      - name: Start application
        run: |
          cd frontend
          pnpm start &
          sleep 30

      - name: Run stress test
        run: |
          k6 run --env BASE_URL=http://localhost:3000 tests/load/k6-config.js \
            --vus 150 --duration 10m \
            --out json=stress-test-results.json

      - name: Upload stress test results
        uses: actions/upload-artifact@v4
        with:
          name: stress-test-results
          path: stress-test-results.json

  # API-only load test
  api-load-test:
    name: API Load Test
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run API load test
        run: |
          k6 run tests/load/k6-config.js \
            --vus 100 --duration 3m \
            --out json=api-load-test-results.json

      - name: Upload API load test results
        uses: actions/upload-artifact@v4
        with:
          name: api-load-test-results
          path: api-load-test-results.json

  # Performance regression check
  regression-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    needs: [smoke-test, load-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download previous results
        uses: actions/download-artifact@v5
        with:
          name: load-test-results
          path: previous-results/

      - name: Check for performance regression
        run: |
          echo "🔍 Checking for performance regression..."

          # Create performance baseline check
          cat > performance-check.js << 'EOF'
          const fs = require('fs');

          // Simple regression check logic
          const currentResults = JSON.parse(fs.readFileSync('load-test-results.json', 'utf8'));

          // Define acceptable thresholds
          const thresholds = {
            p95: 2000, // 95th percentile response time (ms)
            errorRate: 0.05, // 5% error rate
          };

          const p95 = currentResults.metrics.http_req_duration.p95;
          const errorRate = currentResults.metrics.http_req_failed.rate;

          console.log(`📊 Current Performance:`);
          console.log(`95th percentile: ${p95}ms`);
          console.log(`Error rate: ${(errorRate * 100).toFixed(2)}%`);

          let regression = false;

          if (p95 > thresholds.p95) {
            console.log(`❌ Performance regression: 95th percentile (${p95}ms) exceeds threshold (${thresholds.p95}ms)`);
            regression = true;
          }

          if (errorRate > thresholds.errorRate) {
            console.log(`❌ Error rate regression: ${(errorRate * 100).toFixed(2)}% exceeds threshold (${thresholds.errorRate * 100}%)`);
            regression = true;
          }

          if (!regression) {
            console.log('✅ Performance within acceptable thresholds');
          }

          process.exit(regression ? 1 : 0);
          EOF

          node performance-check.js || exit 1

  # Generate load testing report
  generate-report:
    name: Load Testing Report
    runs-on: ubuntu-latest
    needs: [smoke-test, load-test, stress-test, api-load-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all test results
        uses: actions/download-artifact@v5
        with:
          path: test-results/

      - name: Generate comprehensive report
        run: |
          cat > load-testing-report.md << 'EOF'
          # Load Testing Report

          ## Summary
          - **Date**: $(date)
          - **Branch**: ${{ github.ref }}
          - **Commit**: ${{ github.sha }}

          ## Test Results

          ### Smoke Test
          - **Duration**: 30 seconds
          - **Users**: 5 concurrent
          - **Purpose**: Quick validation

          ### Load Test
          - **Duration**: 5 minutes
          - **Users**: 50 concurrent
          - **Purpose**: Standard load simulation

          ### Stress Test
          - **Duration**: 10 minutes
          - **Users**: 150 concurrent
          - **Purpose**: Peak load simulation

          ### API Load Test
          - **Duration**: 3 minutes
          - **Users**: 100 concurrent
          - **Purpose**: Backend performance

          ## Performance Thresholds
          - 95th percentile response time: < 2000ms
          - Error rate: < 5%
          - Throughput: > 100 requests/second

          ## Next Steps
          Review detailed results in artifacts and address any performance bottlenecks.

          EOF

      - name: Upload load testing report
        uses: actions/upload-artifact@v4
        with:
          name: load-testing-report
          path: load-testing-report.md
