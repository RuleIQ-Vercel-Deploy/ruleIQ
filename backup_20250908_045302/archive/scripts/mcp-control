#!/usr/bin/env python3
"""
MCP Control CLI - Command line interface for managing MCP servers
"""

import sys
import subprocess
import json
import time
import psutil
from pathlib import Path
from typing import Dict, Tuple, List
import argparse

# Configuration
CONFIG_PATH = Path.home() / '.mcp-manager' / 'servers.json'

def load_servers() -> Dict:
    """Load server configuration from JSON file"""
    if CONFIG_PATH.exists():
        with open(CONFIG_PATH, 'r') as f:
            return json.load(f)
    else:
        print(f"Error: Server configuration not found at {CONFIG_PATH}")
        print("Please run the MCP dashboard first to initialize configuration")
        sys.exit(1)

def get_server_status(server_key: str, servers: Dict) -> Dict:
    """Get the status of a specific server"""
    if server_key not in servers:
        return {'status': 'unknown', 'error': f'Server {server_key} not found'}
    
    server = servers[server_key]
    try:
        result = subprocess.run(
            f"pgrep -f '{server['process_name']}'",
            shell=True,
            capture_output=True,
            text=True
        )
        
        if result.stdout.strip():
            pids = result.stdout.strip().split('\n')
            pid = int(pids[0])
            
            try:
                process = psutil.Process(pid)
                memory = process.memory_info().rss / 1024 / 1024  # MB
                cpu = process.cpu_percent(interval=0.1)
                
                return {
                    'status': 'running',
                    'pid': pid,
                    'memory': round(memory, 2),
                    'cpu': round(cpu, 2)
                }
            except:
                return {'status': 'running', 'pid': pid}
        else:
            return {'status': 'stopped'}
    except Exception as e:
        return {'status': 'error', 'error': str(e)}

def start_server(server_key: str, servers: Dict) -> Tuple[bool, str]:
    """Start a server"""
    if server_key not in servers:
        return False, f"Server {server_key} not found"
    
    server = servers[server_key]
    if 'start_cmd' not in server:
        return False, f"No start command configured for {server['name']}"
    
    status = get_server_status(server_key, servers)
    if status['status'] == 'running':
        return False, f"{server['name']} is already running"
    
    try:
        subprocess.Popen(
            server['start_cmd'],
            shell=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            start_new_session=True
        )
        time.sleep(2)
        
        # Verify it started
        status = get_server_status(server_key, servers)
        if status['status'] == 'running':
            return True, f"{server['name']} started successfully (PID: {status.get('pid', 'unknown')})"
        else:
            return False, f"{server['name']} failed to start"
    except Exception as e:
        return False, str(e)

def stop_server(server_key: str, servers: Dict) -> Tuple[bool, str]:
    """Stop a server"""
    if server_key not in servers:
        return False, f"Server {server_key} not found"
    
    server = servers[server_key]
    status = get_server_status(server_key, servers)
    
    if status['status'] != 'running':
        return False, f"{server['name']} is not running"
    
    try:
        subprocess.run(f"pkill -f '{server['process_name']}'", shell=True)
        time.sleep(1)
        
        # Verify it stopped
        status = get_server_status(server_key, servers)
        if status['status'] == 'stopped':
            return True, f"{server['name']} stopped successfully"
        else:
            return False, f"{server['name']} failed to stop"
    except Exception as e:
        return False, str(e)

def restart_server(server_key: str, servers: Dict) -> Tuple[bool, str]:
    """Restart a server"""
    stop_success, stop_msg = stop_server(server_key, servers)
    if stop_success or "not running" in stop_msg:
        time.sleep(1)
        return start_server(server_key, servers)
    return False, stop_msg

def list_servers(servers: Dict, verbose: bool = False):
    """List all servers and their status"""
    print("\n" + "="*60)
    print("MCP SERVER STATUS")
    print("="*60)
    
    for key, server in servers.items():
        status = get_server_status(key, servers)
        
        # Status indicator
        if status['status'] == 'running':
            indicator = "✓"
            color = "\033[92m"  # Green
        elif status['status'] == 'stopped':
            indicator = "✗"
            color = "\033[91m"  # Red
        else:
            indicator = "?"
            color = "\033[93m"  # Yellow
        
        print(f"\n{color}{indicator}\033[0m {server['name']} ({key})")
        
        if 'description' in server:
            print(f"  {server['description']}")
        
        if status['status'] == 'running':
            print(f"  Status: Running (PID: {status.get('pid', 'unknown')})")
            if 'memory' in status:
                print(f"  Memory: {status['memory']} MB")
            if 'cpu' in status:
                print(f"  CPU: {status['cpu']}%")
        elif status['status'] == 'stopped':
            print(f"  Status: Stopped")
        else:
            print(f"  Status: Unknown")
            if 'error' in status:
                print(f"  Error: {status['error']}")
        
        if verbose and 'start_cmd' in server:
            print(f"  Command: {server['start_cmd'][:80]}...")
    
    print("\n" + "="*60)

def main():
    parser = argparse.ArgumentParser(description='MCP Control - Manage MCP servers')
    parser.add_argument('command', nargs='?', help='Command to execute')
    parser.add_argument('target', nargs='?', help='Server name or "all"')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    
    args = parser.parse_args()
    
    # Load server configuration
    servers = load_servers()
    
    if not args.command or args.command == 'status':
        list_servers(servers, args.verbose)
        return
    
    if args.command == 'list':
        print("\nAvailable servers:")
        for key, server in servers.items():
            print(f"  {key:20} - {server['name']}")
        return
    
    if args.command in ['start', 'stop', 'restart']:
        if not args.target:
            print(f"Error: Please specify a server name or 'all'")
            print(f"Usage: mcp-control {args.command} <server|all>")
            return
        
        if args.target == 'all':
            for server_key in servers:
                print(f"{args.command.capitalize()}ing {servers[server_key]['name']}...")
                
                if args.command == 'start':
                    success, msg = start_server(server_key, servers)
                elif args.command == 'stop':
                    success, msg = stop_server(server_key, servers)
                else:  # restart
                    success, msg = restart_server(server_key, servers)
                
                if success:
                    print(f"  ✓ {msg}")
                else:
                    print(f"  ✗ {msg}")
        else:
            if args.target not in servers:
                print(f"Error: Server '{args.target}' not found")
                print("Available servers:", ', '.join(servers.keys()))
                return
            
            if args.command == 'start':
                success, msg = start_server(args.target, servers)
            elif args.command == 'stop':
                success, msg = stop_server(args.target, servers)
            else:  # restart
                success, msg = restart_server(args.target, servers)
            
            if success:
                print(f"✓ {msg}")
            else:
                print(f"✗ {msg}")
    
    elif args.command == 'health':
        print("\n" + "="*60)
        print("SYSTEM HEALTH CHECK")
        print("="*60)
        
        # Memory usage
        memory = psutil.virtual_memory()
        print(f"\nMemory Usage: {memory.percent}%")
        print(f"  Available: {memory.available / 1024 / 1024 / 1024:.2f} GB")
        
        # CPU usage
        cpu = psutil.cpu_percent(interval=1)
        print(f"\nCPU Usage: {cpu}%")
        
        # Check for zombie processes
        zombies = []
        for proc in psutil.process_iter(['pid', 'name', 'status']):
            try:
                if proc.info['status'] == 'zombie':
                    zombies.append(proc.info)
            except:
                pass
        
        if zombies:
            print(f"\nWarning: {len(zombies)} zombie process(es) found")
            for zombie in zombies[:5]:
                print(f"  - PID {zombie['pid']}: {zombie['name']}")
        else:
            print("\n✓ No zombie processes")
        
        # Check MCP servers
        running = sum(1 for key in servers if get_server_status(key, servers)['status'] == 'running')
        total = len(servers)
        print(f"\nMCP Servers: {running}/{total} running")
        
        print("\n" + "="*60)
    
    elif args.command == 'help':
        print("""
MCP Control - Command Line Interface

Usage: mcp-control [command] [target] [options]

Commands:
  status               Show status of all MCP servers (default)
  list                 List available servers
  start <server|all>   Start specific server or all servers
  stop <server|all>    Stop specific server or all servers
  restart <server>     Restart specific server
  health              Run system health check
  help                Show this help message

Options:
  -v, --verbose       Show verbose output

Examples:
  mcp-control                    # Show status
  mcp-control start archon       # Start Archon server
  mcp-control stop all          # Stop all servers
  mcp-control restart serena    # Restart Serena
  mcp-control health           # System health check

Servers:
  serena              Serena MCP Server
  archon              Archon Server (ruleIQ task management)
  playwright          Playwright MCP
  filesystem          Filesystem MCP
  docker              Docker MCP Gateway
  testsprite          TestSprite MCP
  context7            Context7 MCP
  sequential-thinking Sequential Thinking MCP
  desktop-commander   Desktop Commander MCP
""")
    else:
        print(f"Unknown command: {args.command}")
        print("Run 'mcp-control help' for usage information")

if __name__ == "__main__":
    main()