#!/bin/bash

# /dev - ruleIQ Development Environment Launcher
# Comprehensive development startup script with full service orchestration
# Usage: /dev [command] [options]

set -e

# Configuration
PROJECT_ROOT="/home/omar/Documents/ruleIQ"
SERENA_PATH="/home/omar/serena"
FRONTEND_PATH="$PROJECT_ROOT/frontend"
SCRIPTS_PATH="$PROJECT_ROOT/scripts"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${GREEN}[DEV]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[DEV WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[DEV ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[DEV INFO]${NC} $1"
}

highlight() {
    echo -e "${CYAN}[DEV]${NC} $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if process is running
is_running() {
    pgrep -f "$1" > /dev/null 2>&1
}

# Check if port is in use
port_in_use() {
    lsof -i :$1 > /dev/null 2>&1
}

# Display banner
show_banner() {
    echo -e "${MAGENTA}"
    echo "██████╗ ██╗   ██╗██╗     ███████╗██╗ ██████╗ "
    echo "██╔══██╗██║   ██║██║     ██╔════╝██║██╔═══██╗"
    echo "██████╔╝██║   ██║██║     █████╗  ██║██║   ██║"
    echo "██╔══██╗██║   ██║██║     ██╔══╝  ██║██║▄▄ ██║"
    echo "██║  ██║╚██████╔╝███████╗███████╗██║╚██████╔╝"
    echo "╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚═╝ ╚══▀▀═╝ "
    echo -e "${NC}"
    echo -e "${BLUE}Development Environment Controller${NC}"
    echo -e "${BLUE}=====================================${NC}"
    echo ""
}

# Initialize development environment
init_environment() {
    log "Initializing ruleIQ development environment..."
    
    # Change to project root
    cd "$PROJECT_ROOT"
    
    # Run the comprehensive initialization script
    if [ -f "$SCRIPTS_PATH/init_dev_environment.sh" ]; then
        bash "$SCRIPTS_PATH/init_dev_environment.sh"
    else
        error "Initialization script not found: $SCRIPTS_PATH/init_dev_environment.sh"
        exit 1
    fi
}

# Start backend services
start_backend() {
    log "Starting backend services..."
    
    cd "$PROJECT_ROOT"
    
    # Check if virtual environment exists
    if [ ! -d "venv" ]; then
        warn "Virtual environment not found. Running initialization..."
        init_environment
    fi
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Check if services are already running
    if port_in_use 8000; then
        warn "Backend already running on port 8000"
    else
        log "Starting FastAPI backend..."
        # Start in background if requested
        if [ "$1" = "bg" ]; then
            nohup python main.py > backend.log 2>&1 &
            echo $! > .backend.pid
            log "Backend started in background (PID: $(cat .backend.pid))"
        else
            info "Starting backend in foreground..."
            python main.py
        fi
    fi
}

# Start frontend services
start_frontend() {
    log "Starting frontend services..."
    
    cd "$FRONTEND_PATH"
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        warn "Frontend dependencies not found. Installing..."
        pnpm install
    fi
    
    # Check if frontend is already running
    if port_in_use 3000; then
        warn "Frontend already running on port 3000"
    else
        log "Starting Next.js frontend..."
        # Start in background if requested
        if [ "$1" = "bg" ]; then
            nohup pnpm dev > ../frontend.log 2>&1 &
            echo $! > ../.frontend.pid
            log "Frontend started in background (PID: $(cat ../.frontend.pid))"
        else
            info "Starting frontend in foreground..."
            pnpm dev
        fi
    fi
}

# Load context files for Claude
load_context_files() {
    log "Loading project context for Claude..."
    
    local context_dir="$PROJECT_ROOT/docs/context"
    
    if [ -d "$context_dir" ]; then
        # Read key context files in order of importance
        local context_files=(
            "README.md"
            "PROJECT_STATUS.md"
            "CLAUDE.md"
            "ARCHITECTURE_CONTEXT.md"
            "AI_SERVICES_CONTEXT.md"
            "FRONTEND_CONTEXT.md"
            "DATABASE_CONTEXT.md"
            "API_CONTEXT.md"
            "TESTING_CONTEXT.md"
        )
        
        for file in "${context_files[@]}"; do
            if [ -f "$context_dir/$file" ]; then
                info "Reading context: $file"
                echo "=== Context: $file ==="
                cat "$context_dir/$file"
                echo ""
                echo "==============================================="
                echo ""
            fi
        done
        
        # Read CLAUDE.md from project root if it exists
        if [ -f "$PROJECT_ROOT/CLAUDE.md" ]; then
            info "Reading project-specific CLAUDE.md"
            echo "=== Project CLAUDE.md ==="
            cat "$PROJECT_ROOT/CLAUDE.md"
            echo ""
            echo "==============================================="
            echo ""
        fi
        
        log "Context files loaded successfully"
    else
        warn "Context directory not found: $context_dir"
    fi
}

# Start all services
start_all() {
    log "Starting all development services..."
    
    # Change to project root
    cd "$PROJECT_ROOT"
    
    # Load context files first so Claude has full project understanding
    load_context_files
    
    # Initialize environment if needed
    init_environment
    
    # Start backend in background
    start_backend bg
    
    # Wait a moment for backend to start
    sleep 3
    
    # Start frontend in background
    start_frontend bg
    
    # Show status
    show_status
    
    log "All services started successfully!"
    info "Backend: http://localhost:8000"
    info "Frontend: http://localhost:3000"
    info "API Docs: http://localhost:8000/docs"
}

# Stop all services
stop_all() {
    log "Stopping all development services..."
    
    cd "$PROJECT_ROOT"
    
    # Stop backend
    if [ -f ".backend.pid" ]; then
        local backend_pid=$(cat .backend.pid)
        if kill -0 $backend_pid 2>/dev/null; then
            kill $backend_pid
            log "Backend stopped (PID: $backend_pid)"
        fi
        rm -f .backend.pid
    fi
    
    # Stop frontend
    if [ -f ".frontend.pid" ]; then
        local frontend_pid=$(cat .frontend.pid)
        if kill -0 $frontend_pid 2>/dev/null; then
            kill $frontend_pid
            log "Frontend stopped (PID: $frontend_pid)"
        fi
        rm -f .frontend.pid
    fi
    
    # Stop development environment services
    if [ -f "$SCRIPTS_PATH/stop_dev_environment.sh" ]; then
        bash "$SCRIPTS_PATH/stop_dev_environment.sh"
    fi
    
    log "All services stopped"
}

# Show service status
show_status() {
    log "Development Environment Status"
    echo ""
    
    cd "$PROJECT_ROOT"
    
    # Backend status
    if [ -f ".backend.pid" ]; then
        local backend_pid=$(cat .backend.pid)
        if kill -0 $backend_pid 2>/dev/null; then
            echo -e "  🟢 Backend: ${GREEN}Running${NC} (PID: $backend_pid, Port: 8000)"
        else
            echo -e "  🔴 Backend: ${RED}Stopped${NC} (PID file exists but process not running)"
            rm -f .backend.pid
        fi
    elif port_in_use 8000; then
        echo -e "  🟡 Backend: ${YELLOW}Running${NC} (Port: 8000, external process)"
    else
        echo -e "  🔴 Backend: ${RED}Stopped${NC}"
    fi
    
    # Frontend status
    if [ -f ".frontend.pid" ]; then
        local frontend_pid=$(cat .frontend.pid)
        if kill -0 $frontend_pid 2>/dev/null; then
            echo -e "  🟢 Frontend: ${GREEN}Running${NC} (PID: $frontend_pid, Port: 3000)"
        else
            echo -e "  🔴 Frontend: ${RED}Stopped${NC} (PID file exists but process not running)"
            rm -f .frontend.pid
        fi
    elif port_in_use 3000; then
        echo -e "  🟡 Frontend: ${YELLOW}Running${NC} (Port: 3000, external process)"
    else
        echo -e "  🔴 Frontend: ${RED}Stopped${NC}"
    fi
    
    # Docker services status
    echo ""
    info "Docker Services:"
    if command_exists docker-compose; then
        local postgres_status=$(docker-compose ps -q postgres 2>/dev/null)
        local redis_status=$(docker-compose ps -q redis 2>/dev/null)
        
        if [ -n "$postgres_status" ] && docker inspect "$postgres_status" | grep -q '"Running": true'; then
            echo -e "  🟢 PostgreSQL: ${GREEN}Running${NC}"
        else
            echo -e "  🔴 PostgreSQL: ${RED}Stopped${NC}"
        fi
        
        if [ -n "$redis_status" ] && docker inspect "$redis_status" | grep -q '"Running": true'; then
            echo -e "  🟢 Redis: ${GREEN}Running${NC}"
        else
            echo -e "  🔴 Redis: ${RED}Stopped${NC}"
        fi
    else
        echo -e "  🔴 Docker Compose: ${RED}Not available${NC}"
    fi
    
    # Serena MCP status
    echo ""
    info "Development Tools:"
    if [ -f "$SCRIPTS_PATH/start_serena_mcp.sh" ]; then
        bash "$SCRIPTS_PATH/start_serena_mcp.sh" status
    else
        echo -e "  🔴 Serena MCP: ${RED}Not configured${NC}"
    fi
    
    echo ""
    info "URLs:"
    echo -e "  🌐 Frontend: ${CYAN}http://localhost:3000${NC}"
    echo -e "  🔧 Backend API: ${CYAN}http://localhost:8000${NC}"
    echo -e "  📚 API Docs: ${CYAN}http://localhost:8000/docs${NC}"
    echo -e "  📊 API Redoc: ${CYAN}http://localhost:8000/redoc${NC}"
}

# Run tests
run_tests() {
    log "Running comprehensive test suite..."
    
    cd "$PROJECT_ROOT"
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Backend tests
    log "Running backend tests..."
    pytest tests/ -v --tb=short
    
    # Frontend tests
    log "Running frontend tests..."
    cd "$FRONTEND_PATH"
    pnpm test
    
    log "All tests completed!"
}

# Run linting
run_lint() {
    log "Running code linting..."
    
    cd "$PROJECT_ROOT"
    
    # Backend linting
    log "Linting backend code..."
    source venv/bin/activate
    black --check .
    flake8 .
    
    # Frontend linting
    log "Linting frontend code..."
    cd "$FRONTEND_PATH"
    pnpm lint
    
    log "Linting completed!"
}

# Build for production
build_production() {
    log "Building for production..."
    
    cd "$PROJECT_ROOT"
    
    # Backend - no build needed for Python
    log "Backend: No build step required"
    
    # Frontend build
    log "Building frontend for production..."
    cd "$FRONTEND_PATH"
    pnpm build
    
    log "Production build completed!"
}

# Show logs
show_logs() {
    local service="${1:-all}"
    
    cd "$PROJECT_ROOT"
    
    case "$service" in
        "backend")
            if [ -f "backend.log" ]; then
                tail -f backend.log
            else
                warn "Backend log file not found"
            fi
            ;;
        "frontend")
            if [ -f "frontend.log" ]; then
                tail -f frontend.log
            else
                warn "Frontend log file not found"
            fi
            ;;
        "serena")
            if [ -f "serena-mcp.log" ]; then
                tail -f serena-mcp.log
            else
                warn "Serena MCP log file not found"
            fi
            ;;
        "all"|*)
            log "Showing all available logs..."
            if [ -f "backend.log" ]; then
                echo -e "\n${BLUE}=== Backend Logs ===${NC}"
                tail -20 backend.log
            fi
            if [ -f "frontend.log" ]; then
                echo -e "\n${BLUE}=== Frontend Logs ===${NC}"
                tail -20 frontend.log
            fi
            if [ -f "serena-mcp.log" ]; then
                echo -e "\n${BLUE}=== Serena MCP Logs ===${NC}"
                tail -20 serena-mcp.log
            fi
            ;;
    esac
}

# Show help
show_help() {
    echo "ruleIQ Development Environment Controller"
    echo ""
    echo "Usage: /dev [command] [options]"
    echo ""
    echo "Commands:"
    echo "  init         Initialize development environment"
    echo "  start        Start all services (backend + frontend + infrastructure)"
    echo "  stop         Stop all services"
    echo "  restart      Restart all services"
    echo "  status       Show service status"
    echo ""
    echo "Individual Services:"
    echo "  backend      Start backend only"
    echo "  frontend     Start frontend only"
    echo ""
    echo "Development Tools:"
    echo "  test         Run test suite"
    echo "  lint         Run code linting"
    echo "  build        Build for production"
    echo "  logs [service]  Show logs (backend|frontend|serena|all)"
    echo "  context      Load context files for Claude (run automatically with start)"
    echo ""
    echo "Examples:"
    echo "  /dev init          # Initialize environment"
    echo "  /dev start         # Start all services"
    echo "  /dev backend       # Start backend only"
    echo "  /dev logs backend  # Show backend logs"
    echo "  /dev status        # Show service status"
    echo ""
    echo "Services:"
    echo "  - Backend API (FastAPI): http://localhost:8000"
    echo "  - Frontend (Next.js): http://localhost:3000"
    echo "  - PostgreSQL: localhost:5432"
    echo "  - Redis: localhost:6379"
    echo "  - Serena MCP: Enhanced development assistance"
    echo ""
    echo "Project Location: $PROJECT_ROOT"
}

# Main command dispatcher
main() {
    # Handle commands
    case "${1:-help}" in
        "init")
            show_banner
            init_environment
            ;;
        "start")
            show_banner
            start_all
            ;;
        "stop")
            stop_all
            ;;
        "restart")
            stop_all
            sleep 2
            start_all
            ;;
        "status")
            show_status
            ;;
        "backend")
            start_backend "${2:-fg}"
            ;;
        "frontend")
            start_frontend "${2:-fg}"
            ;;
        "test")
            run_tests
            ;;
        "lint")
            run_lint
            ;;
        "build")
            build_production
            ;;
        "logs")
            show_logs "${2:-all}"
            ;;
        "context")
            load_context_files
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Handle script interruption
cleanup() {
    warn "Development script interrupted"
    stop_all
    exit 1
}

trap cleanup SIGINT SIGTERM

# Run main function with all arguments
main "$@"