{
  "openapi": "3.1.0",
  "info": {
    "title": "ruleIQ Compliance Automation API",
    "description": "\n    **ruleIQ API** provides comprehensive compliance automation for UK Small and Medium Businesses (SMBs).\n\n    ## Features\n    - \ud83e\udd16 **AI-Powered Assessments** with 6 specialized AI tools\n    - \ud83d\udccb **Policy Generation** with 25+ compliance frameworks\n    - \ud83d\udcc1 **Evidence Management** with automated validation\n    - \ud83d\udd10 **RBAC Security** with JWT authentication\n    - \ud83d\udcca **Real-time Analytics** and compliance scoring\n\n    ## Authentication\n    All endpoints require JWT bearer token authentication except `/api/auth/*` endpoints.\n\n    Get your access token via `/api/auth/token` endpoint.\n\n    ## Rate Limiting\n    - **General endpoints**: 100 requests/minute\n    - **AI endpoints**: 3-20 requests/minute (tiered)\n    - **Authentication**: 5 requests/minute\n\n    ## Support\n    - **Documentation**: See `/docs/api/` for detailed guides\n    - **Interactive Testing**: Use this Swagger UI to test endpoints\n    - **Status**: Production-ready (98% complete, 671+ tests)\n    ",
    "contact": {
      "name": "ruleIQ API Support",
      "url": "https://docs.ruleiq.com/",
      "email": "api-support@ruleiq.com"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://ruleiq.com/license"
    },
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://api.ruleiq.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register",
        "operationId": "register_api_v1_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login For Access Token",
        "operationId": "login_for_access_token_api_v1_auth_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_for_access_token_api_v1_auth_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "Login With Roles",
        "description": "Authenticate user and return JWT tokens with role claims.\n\nThe access token includes user roles and permissions for client-side\nauthorization checks and server-side RBAC enforcement.",
        "operationId": "login_with_roles_api_v1_auth_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_with_roles_api_v1_auth_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "Refresh Access Token",
        "description": "Refresh access token using refresh token.\n\nRe-evaluates user roles and permissions to ensure token is up-to-date.",
        "operationId": "refresh_access_token_api_v1_auth_refresh_post",
        "parameters": [
          {
            "name": "refresh_token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Refresh Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "Get Current User Info",
        "description": "Get current user information including roles and permissions.",
        "operationId": "get_current_user_info_api_v1_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Logout endpoint that blacklists the current token and invalidates sessions.",
        "operationId": "logout_api_v1_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/assign-default-role": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Assign Default Role",
        "description": "Assign the business_user role to the current authenticated user.\n\nThis endpoint allows test users to self-assign the business_user role\nwithout requiring admin permissions, making testing seamless.",
        "operationId": "assign_default_role_api_v1_auth_assign_default_role_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/google/login": {
      "get": {
        "tags": [
          "Google OAuth",
          "Google OAuth"
        ],
        "summary": "Google Login",
        "description": "Initiate Google OAuth2 login flow\nRedirects user to Google's authorization page",
        "operationId": "google_login_api_v1_auth_google_login_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": [
          "Google OAuth",
          "Google OAuth"
        ],
        "summary": "Google Callback",
        "description": "Handle Google OAuth2 callback\nExchanges authorization code for access token and user info",
        "operationId": "google_callback_api_v1_auth_google_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          },
          {
            "name": "error",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/google/mobile-login": {
      "post": {
        "tags": [
          "Google OAuth",
          "Google OAuth"
        ],
        "summary": "Google Mobile Login",
        "description": "Handle Google OAuth for mobile apps\nAccepts Google ID token directly from mobile client",
        "operationId": "google_mobile_login_api_v1_auth_google_mobile_login_post",
        "parameters": [
          {
            "name": "google_token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Google Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleAuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login-form": {
      "post": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "Login With Json",
        "description": "Alternative login endpoint that accepts JSON payload.",
        "operationId": "login_with_json_api_v1_auth_login_form_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/admin/assign-role": {
      "post": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "Assign Role To User",
        "description": "Assign a role to a user. Requires admin_roles permission.",
        "operationId": "assign_role_to_user_api_v1_auth_admin_assign_role_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api__routers__rbac_auth__RoleAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/admin/revoke-role": {
      "delete": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "Revoke Role From User",
        "description": "Revoke a role from a user. Requires admin_roles permission.",
        "operationId": "revoke_role_from_user_api_v1_auth_admin_revoke_role_delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Role Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/admin/user-roles/{user_id}": {
      "get": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "Get User Roles",
        "description": "Get roles for a specific user. Requires admin_roles or user_list permission.",
        "operationId": "get_user_roles_api_v1_auth_admin_user_roles__user_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/admin/cleanup-expired-roles": {
      "post": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "Cleanup Expired Roles",
        "description": "Clean up expired role assignments. Requires admin_roles permission.",
        "operationId": "cleanup_expired_roles_api_v1_auth_admin_cleanup_expired_roles_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/permissions": {
      "get": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "List User Permissions",
        "description": "List current user's permissions for client-side authorization.",
        "operationId": "list_user_permissions_api_v1_auth_permissions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/framework-access": {
      "get": {
        "tags": [
          "RBAC Authentication",
          "RBAC Authentication"
        ],
        "summary": "List Accessible Frameworks",
        "description": "List frameworks accessible to current user.",
        "operationId": "list_accessible_frameworks_api_v1_auth_framework_access_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Current User",
        "operationId": "get_current_user_api_v1_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api__schemas__models__UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Profile",
        "description": "Get user profile - alias for /me endpoint for compatibility",
        "operationId": "get_user_profile_api_v1_users_profile_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api__schemas__models__UserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/users/dashboard": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Dashboard",
        "description": "Get user dashboard data",
        "operationId": "get_user_dashboard_api_v1_users_dashboard_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get User Dashboard Api V1 Users Dashboard Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/users/me/deactivate": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Deactivate Account",
        "operationId": "deactivate_account_api_v1_users_me_deactivate_put",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/business-profiles/": {
      "get": {
        "tags": [
          "Business Profiles"
        ],
        "summary": "Get Business Profile",
        "operationId": "get_business_profile_api_v1_business_profiles__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Business Profiles"
        ],
        "summary": "Update Business Profile",
        "operationId": "update_business_profile_api_v1_business_profiles__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Business Profiles"
        ],
        "summary": "Create Business Profile",
        "operationId": "create_business_profile_api_v1_business_profiles__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/business-profiles/{profile_id}": {
      "get": {
        "tags": [
          "Business Profiles"
        ],
        "summary": "Get Business Profile By Id",
        "description": "Get a specific business profile by ID - access controlled by RBAC data visibility.",
        "operationId": "get_business_profile_by_id_api_v1_business_profiles__profile_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Profile Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Business Profiles"
        ],
        "summary": "Update Business Profile By Id",
        "description": "Update a specific business profile by ID - access controlled by RBAC data visibility.",
        "operationId": "update_business_profile_by_id_api_v1_business_profiles__profile_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Profile Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Business Profiles"
        ],
        "summary": "Delete Business Profile By Id",
        "description": "Delete a specific business profile by ID - access controlled by RBAC data visibility.",
        "operationId": "delete_business_profile_by_id_api_v1_business_profiles__profile_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Profile Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Business Profiles"
        ],
        "summary": "Patch Business Profile",
        "description": "Update a specific business profile by ID with partial data - access controlled by RBAC.",
        "operationId": "patch_business_profile_api_v1_business_profiles__profile_id__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Profile Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessProfileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/quick": {
      "post": {
        "tags": [
          "Assessments"
        ],
        "summary": "Quick Assessment",
        "description": "Generate quick compliance recommendations based on business profile.",
        "operationId": "quick_assessment_api_v1_assessments_quick_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuickAssessmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAssessmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/assessments/": {
      "get": {
        "tags": [
          "Assessments"
        ],
        "summary": "List Assessments",
        "description": "List all assessment sessions for the current user",
        "operationId": "list_assessments_api_v1_assessments__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AssessmentSessionResponse"
                  },
                  "type": "array",
                  "title": "Response List Assessments Api V1 Assessments  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Assessments"
        ],
        "summary": "Create Assessment",
        "description": "Create a new assessment session - alias for /start endpoint for compatibility",
        "operationId": "create_assessment_api_v1_assessments__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentSessionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/assessments/start": {
      "post": {
        "tags": [
          "Assessments"
        ],
        "summary": "Start Assessment",
        "operationId": "start_assessment_api_v1_assessments_start_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentSessionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/assessments/current": {
      "get": {
        "tags": [
          "Assessments"
        ],
        "summary": "Get Current Session",
        "operationId": "get_current_session_api_v1_assessments_current_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentSessionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/assessments/questions/{stage}": {
      "get": {
        "tags": [
          "Assessments"
        ],
        "summary": "Get Questions",
        "operationId": "get_questions_api_v1_assessments_questions__stage__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "stage",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Stage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssessmentQuestion"
                  },
                  "title": "Response Get Questions Api V1 Assessments Questions  Stage  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/{session_id}/response": {
      "put": {
        "tags": [
          "Assessments"
        ],
        "summary": "Update Response",
        "operationId": "update_response_api_v1_assessments__session_id__response_put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssessmentResponseUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/{session_id}/responses": {
      "post": {
        "tags": [
          "Assessments"
        ],
        "summary": "Update Responses",
        "description": "Update assessment responses - alias for compatibility",
        "operationId": "update_responses_api_v1_assessments__session_id__responses_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Response Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/{session_id}": {
      "get": {
        "tags": [
          "Assessments"
        ],
        "summary": "Get Assessment Session",
        "description": "Get a specific assessment session by ID.",
        "operationId": "get_assessment_session_api_v1_assessments__session_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/{session_id}/recommendations": {
      "get": {
        "tags": [
          "Assessments"
        ],
        "summary": "Get Assessment Recommendations",
        "description": "Get recommendations for an assessment session.",
        "operationId": "get_assessment_recommendations_api_v1_assessments__session_id__recommendations_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/{session_id}/complete": {
      "post": {
        "tags": [
          "Assessments"
        ],
        "summary": "Complete Assessment",
        "operationId": "complete_assessment_api_v1_assessments__session_id__complete_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentSessionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/freemium/leads": {
      "post": {
        "tags": [
          "Freemium Assessment",
          "Freemium Assessment"
        ],
        "summary": "Capture lead and track UTM parameters",
        "description": "Email capture endpoint with UTM tracking for freemium funnel conversion analytics",
        "operationId": "capture_lead_api_v1_freemium_leads_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadCaptureRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/freemium/sessions": {
      "post": {
        "tags": [
          "Freemium Assessment",
          "Freemium Assessment"
        ],
        "summary": "Start AI assessment session",
        "description": "Initialize personalized AI assessment session with dynamic question generation",
        "operationId": "start_assessment_session_api_v1_freemium_sessions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionStartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/freemium/sessions/{session_token}": {
      "get": {
        "tags": [
          "Freemium Assessment",
          "Freemium Assessment"
        ],
        "summary": "Get assessment session progress",
        "description": "Retrieve current session state, progress, and next question",
        "operationId": "get_session_progress_api_v1_freemium_sessions__session_token__get",
        "parameters": [
          {
            "name": "session_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/freemium/sessions/{session_token}/answers": {
      "post": {
        "tags": [
          "Freemium Assessment",
          "Freemium Assessment"
        ],
        "summary": "Submit assessment answers",
        "description": "Submit answers and get next AI-generated question with scoring",
        "operationId": "submit_assessment_answer_api_v1_freemium_sessions__session_token__answers_post",
        "parameters": [
          {
            "name": "session_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerSubmissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Submit Assessment Answer Api V1 Freemium Sessions  Session Token  Answers Post"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/freemium/sessions/{session_token}/results": {
      "get": {
        "tags": [
          "Freemium Assessment",
          "Freemium Assessment"
        ],
        "summary": "Get AI assessment results",
        "description": "Generate comprehensive assessment results with AI insights and conversion opportunities",
        "operationId": "get_assessment_results_api_v1_freemium_sessions__session_token__results_get",
        "parameters": [
          {
            "name": "session_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentResultsResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/freemium/health": {
      "get": {
        "tags": [
          "Freemium Assessment",
          "Freemium Assessment"
        ],
        "summary": "Freemium API health check",
        "description": "Check freemium API health and database connectivity",
        "operationId": "health_check_api_v1_freemium_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health Check Api V1 Freemium Health Get"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/ai-assessments/{framework_id}/help": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Get Question Help",
        "description": "Get AI-powered help for a specific assessment question.\n\nProvides contextual guidance, related topics, and follow-up suggestions\nbased on the question, framework, and user's business context.",
        "operationId": "get_question_help_api_v1_ai_assessments__framework_id__help_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIHelpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIHelpResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-assessments/{framework_id}/help/stream": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Get Question Help Stream",
        "description": "Stream AI-powered help for a specific assessment question.\n\nProvides real-time streaming contextual guidance, related topics, and follow-up suggestions\nbased on the question, framework, and user's business context.\nReturns Server-Sent Events (SSE) for real-time updates.",
        "operationId": "get_question_help_stream_api_v1_ai_assessments__framework_id__help_stream_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIHelpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-assessments/followup": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Generate Followup Questions",
        "description": "Generate AI-powered follow-up questions based on current assessment responses.\n\nAnalyzes user's answers to suggest additional questions that could provide\ndeeper insights into their compliance posture.",
        "operationId": "generate_followup_questions_api_v1_ai_assessments_followup_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIFollowUpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIFollowUpResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/analysis": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Analyze Assessment Results",
        "description": "Perform comprehensive AI analysis of assessment results.\n\nAnalyzes completed assessment to identify gaps, risks, and provide\ndetailed compliance insights with evidence requirements.",
        "operationId": "analyze_assessment_results_api_v1_ai_assessments_analysis_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/analysis/stream": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Analyze Assessment Results Stream",
        "description": "Stream comprehensive AI analysis of assessment results.\n\nProvides real-time streaming analysis of completed assessment to identify\ngaps, risks, and provide detailed compliance insights with evidence requirements.\nReturns Server-Sent Events (SSE) for real-time updates.",
        "operationId": "analyze_assessment_results_stream_api_v1_ai_assessments_analysis_stream_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/recommendations": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Generate Personalized Recommendations",
        "description": "Generate personalized compliance recommendations with implementation plans.\n\nCreates detailed, actionable recommendations based on identified gaps,\nbusiness context, and timeline preferences.",
        "operationId": "generate_personalized_recommendations_api_v1_ai_assessments_recommendations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIRecommendationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIRecommendationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/recommendations/stream": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Generate Personalized Recommendations Stream",
        "description": "Stream personalized AI recommendations based on assessment gaps.\n\nProvides real-time streaming recommendations based on identified compliance gaps.\nReturns Server-Sent Events (SSE) for real-time updates including implementation\nsteps and prioritized action items.",
        "operationId": "generate_personalized_recommendations_stream_api_v1_ai_assessments_recommendations_stream_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIRecommendationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/feedback": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Submit Ai Feedback",
        "description": "Submit feedback on AI assistance quality.\n\nCollects user feedback to improve AI performance and track satisfaction metrics.",
        "operationId": "submit_ai_feedback_api_v1_ai_assessments_feedback_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIFeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/metrics": {
      "get": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Get Ai Metrics",
        "description": "Get AI performance metrics for admin users.\n\nReturns response times, accuracy scores, user satisfaction, and quota usage.",
        "operationId": "get_ai_metrics_api_v1_ai_assessments_metrics_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Number of days to include in metrics",
              "default": 30,
              "title": "Days"
            },
            "description": "Number of days to include in metrics"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-assessments/rate-limit-stats": {
      "get": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Get Rate Limit Statistics",
        "description": "Get AI rate limiting statistics.\n\nReturns current rate limiting statistics including total requests,\nrate limited requests, and per-operation breakdowns.",
        "operationId": "get_rate_limit_statistics_api_v1_ai_assessments_rate_limit_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/health": {
      "get": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Get Ai Service Health",
        "description": "Get comprehensive AI service health status including circuit breaker states.",
        "operationId": "get_ai_service_health_api_v1_ai_assessments_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Ai Service Health Api V1 Ai Assessments Health Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/circuit-breaker/status": {
      "get": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Get Circuit Breaker Status",
        "description": "Get detailed circuit breaker status for all AI models.",
        "operationId": "get_circuit_breaker_status_api_v1_ai_assessments_circuit_breaker_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Circuit Breaker Status Api V1 Ai Assessments Circuit Breaker Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai-assessments/circuit-breaker/reset": {
      "post": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Reset Circuit Breaker",
        "description": "Manually reset circuit breaker for a specific model.",
        "operationId": "reset_circuit_breaker_api_v1_ai_assessments_circuit_breaker_reset_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Model name to reset circuit breaker for",
              "title": "Model Name"
            },
            "description": "Model name to reset circuit breaker for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Reset Circuit Breaker Api V1 Ai Assessments Circuit Breaker Reset Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-assessments/models/{model_name}/health": {
      "get": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Get Model Health",
        "description": "Get health status for a specific AI model.",
        "operationId": "get_model_health_api_v1_ai_assessments_models__model_name__health_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Model Health Api V1 Ai Assessments Models  Model Name  Health Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai-assessments/cache/metrics": {
      "get": {
        "tags": [
          "AI Assessment Assistant",
          "AI Assessment Assistant"
        ],
        "summary": "Get Ai Cache Metrics",
        "description": "Get AI caching performance metrics and status.\n\nReturns:\n    Cache performance metrics including hit rates, cost savings, and status",
        "operationId": "get_ai_cache_metrics_api_v1_ai_assessments_cache_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Ai Cache Metrics Api V1 Ai Assessments Cache Metrics Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/{framework_id}/help": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Get Question Help",
        "description": "Get AI-powered help for a specific assessment question.\n\nProvides contextual guidance, related topics, and follow-up suggestions\nbased on the question, framework, and user's business context.",
        "operationId": "get_question_help_api_ai_assessments__framework_id__help_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIHelpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIHelpResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/assessments/{framework_id}/help/stream": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Get Question Help Stream",
        "description": "Stream AI-powered help for a specific assessment question.\n\nProvides real-time streaming contextual guidance, related topics, and follow-up suggestions\nbased on the question, framework, and user's business context.\nReturns Server-Sent Events (SSE) for real-time updates.",
        "operationId": "get_question_help_stream_api_ai_assessments__framework_id__help_stream_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIHelpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/assessments/followup": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Generate Followup Questions",
        "description": "Generate AI-powered follow-up questions based on current assessment responses.\n\nAnalyzes user's answers to suggest additional questions that could provide\ndeeper insights into their compliance posture.",
        "operationId": "generate_followup_questions_api_ai_assessments_followup_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIFollowUpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIFollowUpResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/analysis": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Analyze Assessment Results",
        "description": "Perform comprehensive AI analysis of assessment results.\n\nAnalyzes completed assessment to identify gaps, risks, and provide\ndetailed compliance insights with evidence requirements.",
        "operationId": "analyze_assessment_results_api_ai_assessments_analysis_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/analysis/stream": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Analyze Assessment Results Stream",
        "description": "Stream comprehensive AI analysis of assessment results.\n\nProvides real-time streaming analysis of completed assessment to identify\ngaps, risks, and provide detailed compliance insights with evidence requirements.\nReturns Server-Sent Events (SSE) for real-time updates.",
        "operationId": "analyze_assessment_results_stream_api_ai_assessments_analysis_stream_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/recommendations": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Generate Personalized Recommendations",
        "description": "Generate personalized compliance recommendations with implementation plans.\n\nCreates detailed, actionable recommendations based on identified gaps,\nbusiness context, and timeline preferences.",
        "operationId": "generate_personalized_recommendations_api_ai_assessments_recommendations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIRecommendationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIRecommendationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/recommendations/stream": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Generate Personalized Recommendations Stream",
        "description": "Stream personalized AI recommendations based on assessment gaps.\n\nProvides real-time streaming recommendations based on identified compliance gaps.\nReturns Server-Sent Events (SSE) for real-time updates including implementation\nsteps and prioritized action items.",
        "operationId": "generate_personalized_recommendations_stream_api_ai_assessments_recommendations_stream_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIRecommendationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/feedback": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Submit Ai Feedback",
        "description": "Submit feedback on AI assistance quality.\n\nCollects user feedback to improve AI performance and track satisfaction metrics.",
        "operationId": "submit_ai_feedback_api_ai_assessments_feedback_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIFeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/metrics": {
      "get": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Get Ai Metrics",
        "description": "Get AI performance metrics for admin users.\n\nReturns response times, accuracy scores, user satisfaction, and quota usage.",
        "operationId": "get_ai_metrics_api_ai_assessments_metrics_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Number of days to include in metrics",
              "default": 30,
              "title": "Days"
            },
            "description": "Number of days to include in metrics"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/assessments/rate-limit-stats": {
      "get": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Get Rate Limit Statistics",
        "description": "Get AI rate limiting statistics.\n\nReturns current rate limiting statistics including total requests,\nrate limited requests, and per-operation breakdowns.",
        "operationId": "get_rate_limit_statistics_api_ai_assessments_rate_limit_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/health": {
      "get": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Get Ai Service Health",
        "description": "Get comprehensive AI service health status including circuit breaker states.",
        "operationId": "get_ai_service_health_api_ai_assessments_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Ai Service Health Api Ai Assessments Health Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/circuit-breaker/status": {
      "get": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Get Circuit Breaker Status",
        "description": "Get detailed circuit breaker status for all AI models.",
        "operationId": "get_circuit_breaker_status_api_ai_assessments_circuit_breaker_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Circuit Breaker Status Api Ai Assessments Circuit Breaker Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/ai/assessments/circuit-breaker/reset": {
      "post": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Reset Circuit Breaker",
        "description": "Manually reset circuit breaker for a specific model.",
        "operationId": "reset_circuit_breaker_api_ai_assessments_circuit_breaker_reset_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Model name to reset circuit breaker for",
              "title": "Model Name"
            },
            "description": "Model name to reset circuit breaker for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Reset Circuit Breaker Api Ai Assessments Circuit Breaker Reset Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/assessments/models/{model_name}/health": {
      "get": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Get Model Health",
        "description": "Get health status for a specific AI model.",
        "operationId": "get_model_health_api_ai_assessments_models__model_name__health_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Model Health Api Ai Assessments Models  Model Name  Health Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/assessments/cache/metrics": {
      "get": {
        "tags": [
          "AI Assessment Assistant (Legacy)",
          "AI Assessment Assistant"
        ],
        "summary": "Get Ai Cache Metrics",
        "description": "Get AI caching performance metrics and status.\n\nReturns:\n    Cache performance metrics including hit rates, cost savings, and status",
        "operationId": "get_ai_cache_metrics_api_ai_assessments_cache_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Ai Cache Metrics Api Ai Assessments Cache Metrics Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/optimization/model-selection": {
      "post": {
        "tags": [
          "AI Optimization"
        ],
        "summary": "Model Selection",
        "description": "Select the optimal AI model based on task requirements.",
        "operationId": "model_selection_api_v1_ai_optimization_model_selection_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelSelectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/optimization/model-health": {
      "get": {
        "tags": [
          "AI Optimization"
        ],
        "summary": "Model Health Check",
        "description": "Check health status of all AI models.",
        "operationId": "model_health_check_api_v1_ai_optimization_model_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/optimization/performance-metrics": {
      "get": {
        "tags": [
          "AI Optimization"
        ],
        "summary": "Performance Metrics",
        "description": "Get AI performance metrics.",
        "operationId": "performance_metrics_api_v1_ai_optimization_performance_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/optimization/model-fallback-chain": {
      "post": {
        "tags": [
          "AI Optimization"
        ],
        "summary": "Model Fallback Chain",
        "description": "Test model fallback chain functionality.",
        "operationId": "model_fallback_chain_api_v1_ai_optimization_model_fallback_chain_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelSelectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/optimization/circuit-breaker/status": {
      "get": {
        "tags": [
          "AI Optimization"
        ],
        "summary": "Get Circuit Breaker Status",
        "description": "Get circuit breaker status for all AI models.\n\nReturns the current state of circuit breakers, failure counts, and health metrics\nfor all AI models in the system.",
        "operationId": "get_circuit_breaker_status_api_v1_ai_optimization_circuit_breaker_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Circuit Breaker Status Api V1 Ai Optimization Circuit Breaker Status Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/optimization/circuit-breaker/reset": {
      "post": {
        "tags": [
          "AI Optimization"
        ],
        "summary": "Reset Circuit Breaker",
        "description": "Reset circuit breaker for a specific AI model.\n\nManually resets the circuit breaker state for the specified model,\nallowing it to accept requests again.",
        "operationId": "reset_circuit_breaker_api_v1_ai_optimization_circuit_breaker_reset_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Model name to reset circuit breaker for",
              "title": "Model Name"
            },
            "description": "Model name to reset circuit breaker for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Reset Circuit Breaker Api V1 Ai Optimization Circuit Breaker Reset Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/frameworks/": {
      "get": {
        "tags": [
          "Compliance Frameworks"
        ],
        "summary": "List Frameworks",
        "description": "List all available frameworks - simplified for compliance wizard.",
        "operationId": "list_frameworks_api_v1_frameworks__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ComplianceFrameworkResponse"
                  },
                  "type": "array",
                  "title": "Response List Frameworks Api V1 Frameworks  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/frameworks/recommendations": {
      "get": {
        "tags": [
          "Compliance Frameworks"
        ],
        "summary": "Get Framework Recommendations",
        "description": "Get framework recommendations filtered by user's access permissions.",
        "operationId": "get_framework_recommendations_api_v1_frameworks_recommendations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FrameworkRecommendation"
                  },
                  "type": "array",
                  "title": "Response Get Framework Recommendations Api V1 Frameworks Recommendations Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/frameworks/recommendations/{business_profile_id}": {
      "get": {
        "tags": [
          "Compliance Frameworks"
        ],
        "summary": "Get Framework Recommendations For Profile",
        "description": "Get framework recommendations for a specific business profile.",
        "operationId": "get_framework_recommendations_for_profile_api_v1_frameworks_recommendations__business_profile_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "business_profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Business Profile Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FrameworkRecommendation"
                  },
                  "title": "Response Get Framework Recommendations For Profile Api V1 Frameworks Recommendations  Business Profile Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/frameworks/all-public": {
      "get": {
        "tags": [
          "Compliance Frameworks"
        ],
        "summary": "List All Public Frameworks",
        "description": "List all available frameworks without RBAC restrictions - for compliance wizard.",
        "operationId": "list_all_public_frameworks_api_v1_frameworks_all_public_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ComplianceFrameworkResponse"
                  },
                  "type": "array",
                  "title": "Response List All Public Frameworks Api V1 Frameworks All Public Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/frameworks/{framework_id}": {
      "get": {
        "tags": [
          "Compliance Frameworks"
        ],
        "summary": "Get Framework",
        "description": "Get a specific framework if user has access to it.",
        "operationId": "get_framework_api_v1_frameworks__framework_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Framework Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceFrameworkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/policies/generate": {
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Generate Policy",
        "operationId": "generate_policy_api_v1_policies_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyGenerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/policies/": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "List Policies",
        "operationId": "list_policies_api_v1_policies__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/policies/{policy_id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get Policy",
        "operationId": "get_policy_api_v1_policies__policy_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/policies/{policy_id}/status": {
      "patch": {
        "tags": [
          "Policies"
        ],
        "summary": "Update Policy Status",
        "description": "Update policy status",
        "operationId": "update_policy_status_api_v1_policies__policy_id__status_patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Policy Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Status Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/policies/{policy_id}/approve": {
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Approve Policy",
        "operationId": "approve_policy_api_v1_policies__policy_id__approve_put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/implementation/plans": {
      "get": {
        "tags": [
          "Implementation Plans"
        ],
        "summary": "List Plans",
        "operationId": "list_plans_api_v1_implementation_plans_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImplementationPlanListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Implementation Plans"
        ],
        "summary": "Create Plan",
        "operationId": "create_plan_api_v1_implementation_plans_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImplementationPlanCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImplementationPlanResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/implementation/plans/{plan_id}": {
      "get": {
        "tags": [
          "Implementation Plans"
        ],
        "summary": "Get Plan",
        "operationId": "get_plan_api_v1_implementation_plans__plan_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Plan Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImplementationPlanResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/implementation/plans/{plan_id}/tasks/{task_id}": {
      "patch": {
        "tags": [
          "Implementation Plans"
        ],
        "summary": "Update Task",
        "operationId": "update_task_api_v1_implementation_plans__plan_id__tasks__task_id__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Plan Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImplementationTaskUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Create New Evidence",
        "description": "Create a new evidence item.",
        "operationId": "create_new_evidence_api_v1_evidence__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "List Evidence",
        "description": "List all evidence items for a user with optional filtering and pagination.",
        "operationId": "list_evidence_api_v1_evidence__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Framework Id"
            }
          },
          {
            "name": "evidence_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evidence Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "asc",
              "title": "Sort Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/stats": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Evidence Statistics",
        "description": "Get evidence statistics for the current user.",
        "operationId": "get_evidence_statistics_api_v1_evidence_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceStatisticsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/evidence/search": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Search Evidence Items",
        "description": "Search evidence items with various filters.",
        "operationId": "search_evidence_items_api_v1_evidence_search_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Q"
            }
          },
          {
            "name": "evidence_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evidence Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "framework",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Framework"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/validate": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Validate Evidence Quality",
        "description": "Validate evidence quality.",
        "operationId": "validate_evidence_quality_api_v1_evidence_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Evidence Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceValidationResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/evidence/requirements": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Evidence Requirements",
        "description": "Get evidence requirements for a framework.",
        "operationId": "get_evidence_requirements_api_v1_evidence_requirements_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Framework Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceRequirementsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Identify Evidence Requirements",
        "description": "Identify evidence requirements for controls.",
        "operationId": "identify_evidence_requirements_api_v1_evidence_requirements_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Request Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceRequirementsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/{evidence_id}": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Evidence Details",
        "description": "Retrieve the details of a specific evidence item.",
        "operationId": "get_evidence_details_api_v1_evidence__evidence_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Evidence"
        ],
        "summary": "Update Evidence Item",
        "description": "Update an evidence item with full or partial data.",
        "operationId": "update_evidence_item_api_v1_evidence__evidence_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evidence"
        ],
        "summary": "Update Evidence Status",
        "description": "Update an evidence item status and other fields.",
        "operationId": "update_evidence_status_api_v1_evidence__evidence_id__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evidence"
        ],
        "summary": "Delete Evidence Item",
        "description": "Delete an evidence item.",
        "operationId": "delete_evidence_item_api_v1_evidence__evidence_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/bulk-update": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Bulk Update Evidence Status",
        "description": "Bulk update evidence status for multiple items.",
        "operationId": "bulk_update_evidence_status_api_v1_evidence_bulk_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceBulkUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceBulkUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/evidence/{evidence_id}/automation": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Configure Evidence Automation",
        "description": "Configure automation for evidence collection.",
        "operationId": "configure_evidence_automation_api_v1_evidence__evidence_id__automation_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Automation Config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceAutomationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/{evidence_id}/upload": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Upload Evidence File Route",
        "description": "Upload a file and link it to an evidence item with enhanced security validation.",
        "operationId": "upload_evidence_file_route_api_v1_evidence__evidence_id__upload_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_evidence_file_route_api_v1_evidence__evidence_id__upload_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/dashboard/{framework_id}": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Evidence Dashboard",
        "description": "Get dashboard data for evidence collection status.",
        "operationId": "get_evidence_dashboard_api_v1_evidence_dashboard__framework_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Framework Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceDashboardResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/{evidence_id}/classify": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Classify Evidence With Ai",
        "description": "Classify evidence using AI and suggest control mappings.",
        "operationId": "classify_evidence_with_ai_api_v1_evidence__evidence_id__classify_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceClassificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceClassificationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/classify/bulk": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Bulk Classify Evidence",
        "description": "Bulk classify multiple evidence items using AI.",
        "operationId": "bulk_classify_evidence_api_v1_evidence_classify_bulk_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkClassificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkClassificationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/evidence/{evidence_id}/control-mapping": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Control Mapping Suggestions",
        "description": "Get AI-powered control mapping suggestions for evidence.",
        "operationId": "get_control_mapping_suggestions_api_v1_evidence__evidence_id__control_mapping_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlMappingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlMappingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/classification/stats": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Classification Statistics",
        "description": "Get classification statistics for the current user.",
        "operationId": "get_classification_statistics_api_v1_evidence_classification_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationStatsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/evidence/{evidence_id}/quality-analysis": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Evidence Quality Analysis",
        "description": "Get detailed AI-powered quality analysis for evidence item.",
        "operationId": "get_evidence_quality_analysis_api_v1_evidence__evidence_id__quality_analysis_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualityAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/{evidence_id}/duplicate-detection": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Detect Evidence Duplicates",
        "description": "Detect semantic duplicates for a specific evidence item.",
        "operationId": "detect_evidence_duplicates_api_v1_evidence__evidence_id__duplicate_detection_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "evidence_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Evidence Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DuplicateDetectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateDetectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/duplicate-detection/batch": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Batch Duplicate Detection",
        "description": "Perform batch duplicate detection across multiple evidence items.",
        "operationId": "batch_duplicate_detection_api_v1_evidence_duplicate_detection_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchDuplicateDetectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchDuplicateDetectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/evidence/quality/benchmark": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Quality Benchmark",
        "description": "Get quality benchmarking data comparing user's evidence to platform averages.",
        "operationId": "get_quality_benchmark_api_v1_evidence_quality_benchmark_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Framework"
            }
          },
          {
            "name": "evidence_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evidence Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualityBenchmarkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence/quality/trends": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get Quality Trends",
        "description": "Get quality trend analysis over time.",
        "operationId": "get_quality_trends_api_v1_evidence_quality_trends_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 7,
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "evidence_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evidence Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualityTrendResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence-collection/evidence-collection/plans": {
      "post": {
        "tags": [
          "Evidence Collection",
          "evidence-collection"
        ],
        "summary": "Create Collection Plan",
        "description": "Create an AI-driven evidence collection plan.\n\nThis endpoint analyzes your business profile and compliance framework requirements\nto generate a prioritized, optimized collection plan with automation recommendations.",
        "operationId": "create_collection_plan_api_v1_evidence_collection_evidence_collection_plans_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionPlanCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionPlanResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Evidence Collection",
          "evidence-collection"
        ],
        "summary": "List Collection Plans",
        "description": "List all collection plans for the current user.",
        "operationId": "list_collection_plans_api_v1_evidence_collection_evidence_collection_plans_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by framework",
              "title": "Framework"
            },
            "description": "Filter by framework"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectionPlanSummary"
                  },
                  "title": "Response List Collection Plans Api V1 Evidence Collection Evidence Collection Plans Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence-collection/evidence-collection/plans/{plan_id}": {
      "get": {
        "tags": [
          "Evidence Collection",
          "evidence-collection"
        ],
        "summary": "Get Collection Plan",
        "description": "Get a specific collection plan by ID.",
        "operationId": "get_collection_plan_api_v1_evidence_collection_evidence_collection_plans__plan_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Plan Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionPlanResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence-collection/evidence-collection/plans/{plan_id}/priority-tasks": {
      "get": {
        "tags": [
          "Evidence Collection",
          "evidence-collection"
        ],
        "summary": "Get Priority Tasks",
        "description": "Get the next priority tasks for a collection plan.",
        "operationId": "get_priority_tasks_api_v1_evidence_collection_evidence_collection_plans__plan_id__priority_tasks_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Plan Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 20,
              "minimum": 1,
              "description": "Number of tasks to return",
              "default": 5,
              "title": "Limit"
            },
            "description": "Number of tasks to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvidenceTaskResponse"
                  },
                  "title": "Response Get Priority Tasks Api V1 Evidence Collection Evidence Collection Plans  Plan Id  Priority Tasks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence-collection/evidence-collection/plans/{plan_id}/tasks/{task_id}": {
      "patch": {
        "tags": [
          "Evidence Collection",
          "evidence-collection"
        ],
        "summary": "Update Task Status",
        "description": "Update the status of a specific task.",
        "operationId": "update_task_status_api_v1_evidence_collection_evidence_collection_plans__plan_id__tasks__task_id__patch",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Plan Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceTaskResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/evidence-collection/evidence-collection/automation-recommendations/{framework}": {
      "get": {
        "tags": [
          "Evidence Collection",
          "evidence-collection"
        ],
        "summary": "Get Automation Recommendations",
        "description": "Get automation recommendations for a specific framework.",
        "operationId": "get_automation_recommendations_api_v1_evidence_collection_evidence_collection_automation_recommendations__framework__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/compliance/status": {
      "get": {
        "tags": [
          "Compliance Status"
        ],
        "summary": "Get Compliance Status",
        "description": "Get overall compliance status for the current user.\n\nReturns compliance metrics including:\n- Overall compliance score\n- Framework-specific scores\n- Evidence collection status\n- Recent activity summary",
        "operationId": "get_compliance_status_api_v1_compliance_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/compliance/query": {
      "post": {
        "tags": [
          "Compliance Status"
        ],
        "summary": "Query Compliance",
        "description": "Query compliance information using AI assistant.\n\nThis endpoint provides AI-powered compliance guidance and answers\nto compliance-related questions.",
        "operationId": "query_compliance_api_v1_compliance_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/readiness/assessment": {
      "get": {
        "tags": [
          "Readiness Assessment"
        ],
        "summary": "Get Readiness Assessment",
        "operationId": "get_readiness_assessment_api_v1_readiness_assessment_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Framework Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/readiness/history": {
      "get": {
        "tags": [
          "Readiness Assessment"
        ],
        "summary": "Get Assessment History",
        "operationId": "get_assessment_history_api_v1_readiness_history_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Framework Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/readiness/report": {
      "post": {
        "tags": [
          "Readiness Assessment"
        ],
        "summary": "Generate Report",
        "operationId": "generate_report_api_v1_readiness_report_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplianceReport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/readiness/reports": {
      "post": {
        "tags": [
          "Readiness Assessment"
        ],
        "summary": "Generate Compliance Report Endpoint",
        "description": "Generate compliance reports.",
        "operationId": "generate_compliance_report_endpoint_api_v1_readiness_reports_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplianceReport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/readiness/reports/{report_id}/download": {
      "get": {
        "tags": [
          "Readiness Assessment"
        ],
        "summary": "Download Compliance Report",
        "description": "Download a generated compliance report.",
        "operationId": "download_compliance_report_api_v1_readiness_reports__report_id__download_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Report Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/templates": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List Report Templates",
        "description": "List available report templates",
        "operationId": "list_report_templates_api_v1_reports_templates_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reports/generate": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate Report",
        "description": "Generate a compliance report",
        "operationId": "generate_report_api_v1_reports_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reports/generate/pdf": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Generate Pdf Report",
        "description": "Generate a PDF report and return it directly",
        "operationId": "generate_pdf_report_api_v1_reports_generate_pdf_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reports/preview/{report_type}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Preview Report Structure",
        "description": "Preview the structure of a report type",
        "operationId": "preview_report_structure_api_v1_reports_preview__report_type__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "report_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Report Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/customize-template/{template_name}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Customize Report Template",
        "description": "Customize a report template",
        "operationId": "customize_report_template_api_v1_reports_customize_template__template_name__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Template Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Customizations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/schedules": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List Schedules",
        "description": "List all report schedules for the current user",
        "operationId": "list_schedules_api_v1_reports_schedules_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create Schedule",
        "description": "Create a new scheduled report",
        "operationId": "create_schedule_api_v1_reports_schedules_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/reports/schedules/{schedule_id}": {
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Schedule",
        "description": "Delete a report schedule",
        "operationId": "delete_schedule_api_v1_reports_schedules__schedule_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Schedule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/schedules/{schedule_id}/execute": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Execute Schedule",
        "description": "Manually execute a scheduled report",
        "operationId": "execute_schedule_api_v1_reports_schedules__schedule_id__execute_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Schedule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/connect": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Connect or Update Integration",
        "operationId": "connect_integration_api_v1_integrations_connect_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/integrations/{provider}": {
      "delete": {
        "tags": [
          "Integrations"
        ],
        "summary": "Disconnect integration",
        "operationId": "disconnect_integration_api_v1_integrations__provider__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/{provider}/status": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Get integration status",
        "operationId": "get_integration_status_api_v1_integrations__provider__status_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/foundation-evidence/foundation/evidence/aws/configure": {
      "post": {
        "tags": [
          "Foundation Evidence Collection",
          "Foundation Evidence Collection"
        ],
        "summary": "Configure Aws Integration",
        "description": "Configure AWS integration for evidence collection",
        "operationId": "configure_aws_integration_api_v1_foundation_evidence_foundation_evidence_aws_configure_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWSConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/foundation-evidence/foundation/evidence/okta/configure": {
      "post": {
        "tags": [
          "Foundation Evidence Collection",
          "Foundation Evidence Collection"
        ],
        "summary": "Configure Okta Integration",
        "description": "Configure Okta integration for evidence collection",
        "operationId": "configure_okta_integration_api_v1_foundation_evidence_foundation_evidence_okta_configure_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OktaConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/foundation-evidence/foundation/evidence/google/configure": {
      "post": {
        "tags": [
          "Foundation Evidence Collection",
          "Foundation Evidence Collection"
        ],
        "summary": "Configure Google Workspace Integration",
        "description": "Configure Google Workspace integration for evidence collection",
        "operationId": "configure_google_workspace_integration_api_v1_foundation_evidence_foundation_evidence_google_configure_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleWorkspaceConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/foundation-evidence/foundation/evidence/microsoft/configure": {
      "post": {
        "tags": [
          "Foundation Evidence Collection",
          "Foundation Evidence Collection"
        ],
        "summary": "Configure Microsoft Integration",
        "description": "Configure Microsoft 365/Azure AD integration for evidence collection",
        "operationId": "configure_microsoft_integration_api_v1_foundation_evidence_foundation_evidence_microsoft_configure_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MicrosoftConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/foundation-evidence/foundation/evidence/collect": {
      "post": {
        "tags": [
          "Foundation Evidence Collection",
          "Foundation Evidence Collection"
        ],
        "summary": "Start Foundation Evidence Collection",
        "description": "Start foundation evidence collection from AWS and Okta",
        "operationId": "start_foundation_evidence_collection_api_v1_foundation_evidence_foundation_evidence_collect_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FoundationEvidenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceCollectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/foundation-evidence/foundation/evidence/collect/{collection_id}/status": {
      "get": {
        "tags": [
          "Foundation Evidence Collection",
          "Foundation Evidence Collection"
        ],
        "summary": "Get Collection Status",
        "description": "Get status of evidence collection",
        "operationId": "get_collection_status_api_v1_foundation_evidence_foundation_evidence_collect__collection_id__status_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Collection Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvidenceCollectionStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/foundation-evidence/foundation/evidence/collect/{collection_id}/results": {
      "get": {
        "tags": [
          "Foundation Evidence Collection",
          "Foundation Evidence Collection"
        ],
        "summary": "Get Collection Results",
        "description": "Get collected evidence results",
        "operationId": "get_collection_results_api_v1_foundation_evidence_foundation_evidence_collect__collection_id__results_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Collection Id"
            }
          },
          {
            "name": "evidence_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by evidence type",
              "title": "Evidence Type"
            },
            "description": "Filter by evidence type"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Page Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/foundation-evidence/foundation/evidence/health": {
      "get": {
        "tags": [
          "Foundation Evidence Collection",
          "Foundation Evidence Collection"
        ],
        "summary": "Check Foundation Integrations Health",
        "description": "Check health of foundation integrations (AWS + Okta)",
        "operationId": "check_foundation_integrations_health_api_v1_foundation_evidence_foundation_evidence_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/security/role-based-access-control": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Role Based Access Control",
        "description": "Test role-based access control functionality.\nReturns access permissions for the current user.",
        "operationId": "role_based_access_control_api_v1_security_role_based_access_control_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "title": "Resource"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "read",
              "title": "Action"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security/business-logic-vulnerabilities": {
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Business Logic Vulnerabilities",
        "description": "Test for business logic vulnerabilities.\nReturns security assessment results.",
        "operationId": "business_logic_vulnerabilities_api_v1_security_business_logic_vulnerabilities_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityTestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/security/security-status": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Security Status",
        "description": "Get overall security status and health metrics.",
        "operationId": "security_status_api_v1_security_security_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/security/rate-limit-test": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Rate Limit Test",
        "description": "Test endpoint for rate limiting functionality.\nLimited to 5 requests per minute for testing.",
        "operationId": "rate_limit_test_api_v1_security_rate_limit_test_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/secrets-vault/status": {
      "get": {
        "tags": [
          "\ud83d\udd10 Secrets Vault",
          "\ud83d\udd10 Secrets Vault"
        ],
        "summary": "\ud83d\udd10 SecretsVault Status",
        "description": "\ud83d\udd10 Get comprehensive SecretsVault status\n\nReturns detailed status information including:\n- Vault availability and configuration\n- Health check results\n- Integration status\n- Configuration settings\n\nRequires authentication.",
        "operationId": "get_vault_status_api_v1_secrets_vault_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "SecretsVault not found"
          },
          "500": {
            "description": "Vault operation failed"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/chat/conversations": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Create Conversation",
        "description": "Create a new chat conversation with optimized database queries.",
        "operationId": "create_conversation_api_v1_chat_conversations_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Create Conversation Api V1 Chat Conversations Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "List Conversations",
        "description": "List user's chat conversations.",
        "operationId": "list_conversations_api_v1_chat_conversations_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Per Page"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/conversations/{conversation_id}": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Conversation",
        "description": "Get a specific conversation with all messages.",
        "operationId": "get_conversation_api_v1_chat_conversations__conversation_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Conversation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Delete Conversation",
        "description": "Delete (archive) a conversation.",
        "operationId": "delete_conversation_api_v1_chat_conversations__conversation_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Conversation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/conversations/{conversation_id}/messages": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Send Message",
        "description": "Send a message in a conversation.",
        "operationId": "send_message_api_v1_chat_conversations__conversation_id__messages_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Conversation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/evidence-recommendations": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Evidence Recommendations",
        "description": "Get AI-powered evidence collection recommendations.",
        "operationId": "get_evidence_recommendations_api_v1_chat_evidence_recommendations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceRecommendationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EvidenceRecommendationResponse"
                  },
                  "type": "array",
                  "title": "Response Get Evidence Recommendations Api V1 Chat Evidence Recommendations Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/chat/compliance-analysis": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Analyze Compliance Gap",
        "description": "Analyze compliance gaps for a specific framework.",
        "operationId": "analyze_compliance_gap_api_v1_chat_compliance_analysis_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplianceAnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/chat/context-aware-recommendations": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Context Aware Recommendations",
        "description": "Get enhanced context-aware evidence recommendations that consider:\n- Business profile and industry specifics\n- Existing evidence and gaps\n- User behavior patterns\n- Compliance maturity level\n- Risk assessment",
        "operationId": "get_context_aware_recommendations_api_v1_chat_context_aware_recommendations_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Framework to get recommendations for",
              "title": "Framework"
            },
            "description": "Framework to get recommendations for"
          },
          {
            "name": "context_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Type of context analysis",
              "default": "comprehensive",
              "title": "Context Type"
            },
            "description": "Type of context analysis"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/evidence-collection-workflow": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Generate Evidence Collection Workflow",
        "description": "Generate intelligent, step-by-step evidence collection workflows\ntailored to specific frameworks, controls, and business contexts.",
        "operationId": "generate_evidence_collection_workflow_api_v1_chat_evidence_collection_workflow_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Framework for workflow generation",
              "title": "Framework"
            },
            "description": "Framework for workflow generation"
          },
          {
            "name": "control_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Specific control ID (optional)",
              "title": "Control Id"
            },
            "description": "Specific control ID (optional)"
          },
          {
            "name": "workflow_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Type of workflow",
              "default": "comprehensive",
              "title": "Workflow Type"
            },
            "description": "Type of workflow"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/generate-policy": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Generate Customized Policy",
        "description": "Generate AI-powered, customized compliance policies based on:\n- Business profile and industry specifics\n- Framework requirements\n- Organizational size and maturity\n- Industry best practices\n- Regulatory requirements",
        "operationId": "generate_customized_policy_api_v1_chat_generate_policy_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Framework for policy generation",
              "title": "Framework"
            },
            "description": "Framework for policy generation"
          },
          {
            "name": "policy_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of policy to generate",
              "title": "Policy Type"
            },
            "description": "Type of policy to generate"
          },
          {
            "name": "tone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Policy tone",
              "default": "Professional",
              "title": "Tone"
            },
            "description": "Policy tone"
          },
          {
            "name": "detail_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Level of detail",
              "default": "Standard",
              "title": "Detail Level"
            },
            "description": "Level of detail"
          },
          {
            "name": "include_templates",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include implementation templates",
              "default": true,
              "title": "Include Templates"
            },
            "description": "Include implementation templates"
          },
          {
            "name": "geographic_scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Geographic scope",
              "default": "Single location",
              "title": "Geographic Scope"
            },
            "description": "Geographic scope"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/smart-guidance/{framework}": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Smart Compliance Guidance",
        "description": "Get intelligent, context-aware compliance guidance based on:\n- Current compliance status\n- Business maturity level\n- Industry requirements\n- Best practices",
        "operationId": "get_smart_compliance_guidance_api_v1_chat_smart_guidance__framework__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework"
            }
          },
          {
            "name": "guidance_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Type of guidance needed",
              "default": "getting_started",
              "title": "Guidance Type"
            },
            "description": "Type of guidance needed"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/cache/metrics": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Ai Cache Metrics",
        "description": "Get AI response cache performance metrics including:\n- Cache hit rate and performance statistics\n- Cost savings estimates\n- Cache size and efficiency metrics",
        "operationId": "get_ai_cache_metrics_api_v1_chat_cache_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/chat/cache/clear": {
      "delete": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Clear Ai Cache",
        "description": "Clear AI response cache entries matching a pattern.\nRequires appropriate permissions for cache management.",
        "operationId": "clear_ai_cache_api_v1_chat_cache_clear_delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "pattern",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Cache pattern to clear",
              "default": "*",
              "title": "Pattern"
            },
            "description": "Cache pattern to clear"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/performance/metrics": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Ai Performance Metrics",
        "description": "Get comprehensive AI performance metrics including:\n- Response time statistics\n- Optimization effectiveness\n- Cost analysis and savings\n- System health indicators",
        "operationId": "get_ai_performance_metrics_api_v1_chat_performance_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/chat/performance/optimize": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Optimize Ai Performance",
        "description": "Configure AI performance optimization settings.\nAllows fine-tuning of performance parameters for optimal system operation.",
        "operationId": "optimize_ai_performance_api_v1_chat_performance_optimize_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "enable_batching",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Enable request batching",
              "default": true,
              "title": "Enable Batching"
            },
            "description": "Enable request batching"
          },
          {
            "name": "enable_compression",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Enable prompt compression",
              "default": true,
              "title": "Enable Compression"
            },
            "description": "Enable prompt compression"
          },
          {
            "name": "max_concurrent",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum concurrent requests",
              "default": 10,
              "title": "Max Concurrent"
            },
            "description": "Maximum concurrent requests"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/analytics/dashboard": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Analytics Dashboard",
        "description": "Get comprehensive analytics dashboard data including:\n- Real-time performance metrics\n- Usage analytics and trends\n- Cost analysis and optimization insights\n- Quality metrics and feedback\n- System alerts and health status",
        "operationId": "get_analytics_dashboard_api_v1_chat_analytics_dashboard_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/chat/analytics/usage": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Usage Analytics",
        "description": "Get detailed usage analytics including:\n- Framework usage patterns\n- Content type distribution\n- User activity trends\n- Daily usage patterns",
        "operationId": "get_usage_analytics_api_v1_chat_analytics_usage_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of days to analyze",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days to analyze"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/analytics/cost": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Cost Analytics",
        "description": "Get comprehensive cost analytics including:\n- Total cost breakdown\n- Cost trends and patterns\n- Optimization opportunities\n- ROI analysis",
        "operationId": "get_cost_analytics_api_v1_chat_analytics_cost_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of days to analyze",
              "default": 30,
              "title": "Days"
            },
            "description": "Number of days to analyze"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/analytics/alerts": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get System Alerts",
        "description": "Get system alerts and notifications.\nOptionally filter by resolution status.",
        "operationId": "get_system_alerts_api_v1_chat_analytics_alerts_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "resolved",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by resolution status",
              "title": "Resolved"
            },
            "description": "Filter by resolution status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/analytics/alerts/{alert_id}/resolve": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Resolve System Alert",
        "description": "Mark a system alert as resolved.",
        "operationId": "resolve_system_alert_api_v1_chat_analytics_alerts__alert_id__resolve_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alert Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/smart-evidence/create-plan": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Create Smart Evidence Plan",
        "description": "Create an intelligent evidence collection plan with AI-driven prioritization.\n\nFeatures:\n- AI-powered task prioritization\n- Automation opportunity identification\n- Intelligent scheduling and resource allocation\n- Business context-aware planning",
        "operationId": "create_smart_evidence_plan_api_v1_chat_smart_evidence_create_plan_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Compliance framework",
              "title": "Framework"
            },
            "description": "Compliance framework"
          },
          {
            "name": "target_weeks",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Target completion weeks",
              "default": 12,
              "title": "Target Weeks"
            },
            "description": "Target completion weeks"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/smart-evidence/plan/{plan_id}": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Smart Evidence Plan",
        "description": "Get details of a smart evidence collection plan.",
        "operationId": "get_smart_evidence_plan_api_v1_chat_smart_evidence_plan__plan_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Plan Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/smart-evidence/next-tasks/{plan_id}": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Next Priority Tasks",
        "description": "Get the next priority tasks for execution from a collection plan.",
        "operationId": "get_next_priority_tasks_api_v1_chat_smart_evidence_next_tasks__plan_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Plan Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of tasks to return",
              "default": 5,
              "title": "Limit"
            },
            "description": "Number of tasks to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/smart-evidence/update-task/{plan_id}/{task_id}": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Update Evidence Task Status",
        "description": "Update the status of an evidence collection task.",
        "operationId": "update_evidence_task_status_api_v1_chat_smart_evidence_update_task__plan_id___task_id__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Plan Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "New task status",
              "title": "Status"
            },
            "description": "New task status"
          },
          {
            "name": "completion_notes",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Completion notes",
              "title": "Completion Notes"
            },
            "description": "Completion notes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/quality/trends": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Quality Trends",
        "description": "Get AI response quality trends and analytics.\n\nProvides insights into:\n- Overall quality score trends\n- Quality distribution across responses\n- Improvement areas and recommendations\n- Performance benchmarks",
        "operationId": "get_quality_trends_api_v1_chat_quality_trends_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of days to analyze",
              "default": 30,
              "title": "Days"
            },
            "description": "Number of days to analyze"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/quality/feedback": {
      "post": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Submit Quality Feedback",
        "description": "Submit user feedback for AI response quality improvement.\n\nFeedback types:\n- thumbs_up: Positive feedback\n- thumbs_down: Negative feedback\n- detailed_rating: Numerical rating with optional text\n- text_feedback: Detailed text feedback\n- improvement_suggestion: Specific improvement suggestions",
        "operationId": "submit_quality_feedback_api_v1_chat_quality_feedback_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "response_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Response ID to provide feedback for",
              "title": "Response Id"
            },
            "description": "Response ID to provide feedback for"
          },
          {
            "name": "feedback_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of feedback",
              "title": "Feedback Type"
            },
            "description": "Type of feedback"
          },
          {
            "name": "rating",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Rating (1-5 scale)",
              "title": "Rating"
            },
            "description": "Rating (1-5 scale)"
          },
          {
            "name": "text_feedback",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Text feedback",
              "title": "Text Feedback"
            },
            "description": "Text feedback"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/quality/assessment/{response_id}": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Quality Assessment",
        "description": "Get detailed quality assessment for a specific AI response.",
        "operationId": "get_quality_assessment_api_v1_chat_quality_assessment__response_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "response_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Response Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/quality/metrics": {
      "get": {
        "tags": [
          "AI Assistant",
          "Chat Assistant"
        ],
        "summary": "Get Quality Metrics",
        "description": "Get comprehensive quality metrics and performance indicators.",
        "operationId": "get_quality_metrics_api_v1_chat_quality_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/track": {
      "post": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Track Ai Usage",
        "description": "Track AI usage and calculate costs.\n\nRecords token usage, calculates costs, and provides efficiency metrics.\nLimited to 100 requests per minute.",
        "operationId": "track_ai_usage_api_v1_ai_cost_api_v1_ai_cost_track_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostTrackingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostTrackingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/analytics/daily": {
      "get": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Get Daily Cost Analytics",
        "description": "Get comprehensive daily cost analytics.\n\nProvides detailed breakdown of costs by service, model, and time.",
        "operationId": "get_daily_cost_analytics_api_v1_ai_cost_api_v1_ai_cost_analytics_daily_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "target_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Target date (default: today)",
              "title": "Target Date"
            },
            "description": "Target date (default: today)"
          },
          {
            "name": "include_hourly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include hourly breakdown",
              "default": false,
              "title": "Include Hourly"
            },
            "description": "Include hourly breakdown"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostAnalyticsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/analytics/trends": {
      "get": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Get Cost Trends",
        "description": "Get cost trends and patterns over time.\n\nAnalyzes cost trends, growth rates, and identifies anomalies.",
        "operationId": "get_cost_trends_api_v1_ai_cost_api_v1_ai_cost_analytics_trends_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 90,
              "minimum": 1,
              "description": "Number of days to analyze",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days to analyze"
          },
          {
            "name": "include_anomalies",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include anomaly detection",
              "default": true,
              "title": "Include Anomalies"
            },
            "description": "Include anomaly detection"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostTrendsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/budget/configure": {
      "post": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Configure Budget",
        "description": "Configure budget limits and constraints.\n\nSet daily, monthly, and service-specific budget limits.",
        "operationId": "configure_budget_api_v1_ai_cost_api_v1_ai_cost_budget_configure_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/budget/status": {
      "get": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Get Budget Status",
        "description": "Get current budget status and usage.\n\nShows current usage against budget limits and projections.",
        "operationId": "get_budget_status_api_v1_ai_cost_api_v1_ai_cost_budget_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/alerts": {
      "get": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Get Budget Alerts",
        "description": "Get current budget alerts and warnings.\n\nReturns active alerts for budget limits, cost spikes, and unusual patterns.",
        "operationId": "get_budget_alerts_api_v1_ai_cost_api_v1_ai_cost_alerts_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertResponse"
                  },
                  "type": "array",
                  "title": "Response Get Budget Alerts Api V1 Ai Cost Api V1 Ai Cost Alerts Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/optimization/recommendations": {
      "get": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Get Optimization Recommendations",
        "description": "Get cost optimization recommendations.\n\nAnalyzes usage patterns and suggests optimizations to reduce costs.",
        "operationId": "get_optimization_recommendations_api_v1_ai_cost_api_v1_ai_cost_optimization_recommendations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OptimizationResponse"
                  },
                  "type": "array",
                  "title": "Response Get Optimization Recommendations Api V1 Ai Cost Api V1 Ai Cost Optimization Recommendations Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/routing/select-model": {
      "post": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Select Optimal Model",
        "description": "Select optimal model based on task requirements and cost constraints.\n\nIntelligently routes requests to cost-effective models based on complexity.",
        "operationId": "select_optimal_model_api_v1_ai_cost_api_v1_ai_cost_routing_select_model_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelRoutingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelRoutingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/reports/monthly": {
      "get": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Generate Monthly Report",
        "description": "Generate comprehensive monthly cost report.\n\nProvides detailed analysis of monthly AI costs with optimization insights.",
        "operationId": "generate_monthly_report_api_v1_ai_cost_api_v1_ai_cost_reports_monthly_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 2030,
              "minimum": 2020,
              "description": "Year for report",
              "title": "Year"
            },
            "description": "Year for report"
          },
          {
            "name": "month",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 12,
              "minimum": 1,
              "description": "Month for report",
              "title": "Month"
            },
            "description": "Month for report"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(json|pdf)$",
              "description": "Report format",
              "default": "json",
              "title": "Format"
            },
            "description": "Report format"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/usage/by-service": {
      "get": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Get Usage By Service",
        "description": "Get usage metrics for specific service over time range.\n\nAnalyzes usage patterns and costs for a specific AI service.",
        "operationId": "get_usage_by_service_api_v1_ai_cost_api_v1_ai_cost_usage_by_service_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "service_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Service name to analyze",
              "title": "Service Name"
            },
            "description": "Service name to analyze"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Start date (default: 7 days ago)",
              "title": "Start Date"
            },
            "description": "Start date (default: 7 days ago)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "description": "End date (default: today)",
              "title": "End Date"
            },
            "description": "End date (default: today)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/health": {
      "get": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Cost Monitoring Health",
        "description": "Health check for cost monitoring system.\n\nVerifies that cost tracking services are operational.",
        "operationId": "cost_monitoring_health_api_v1_ai_cost_api_v1_ai_cost_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost/api/v1/ai/cost/cache/clear": {
      "delete": {
        "tags": [
          "AI Cost Monitoring",
          "AI Cost Management"
        ],
        "summary": "Clear Cost Cache",
        "description": "Clear cost monitoring cache.\n\nAdministrative endpoint to clear cached cost data.\nLimited to 5 requests per hour.",
        "operationId": "clear_cost_cache_api_v1_ai_cost_api_v1_ai_cost_cache_clear_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/cost-websocket/api/v1/ai/cost/ws/admin/background-tasks/start": {
      "post": {
        "tags": [
          "AI Cost WebSocket",
          "AI Cost WebSocket"
        ],
        "summary": "Start Background Tasks",
        "description": "Start WebSocket background tasks manually.",
        "operationId": "start_background_tasks_api_v1_ai_cost_websocket_api_v1_ai_cost_ws_admin_background_tasks_start_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost-websocket/api/v1/ai/cost/ws/admin/background-tasks/stop": {
      "post": {
        "tags": [
          "AI Cost WebSocket",
          "AI Cost WebSocket"
        ],
        "summary": "Stop Background Tasks",
        "description": "Stop WebSocket background tasks manually.",
        "operationId": "stop_background_tasks_api_v1_ai_cost_websocket_api_v1_ai_cost_ws_admin_background_tasks_stop_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost-websocket/api/v1/ai/cost/ws/connections/stats": {
      "get": {
        "tags": [
          "AI Cost WebSocket",
          "AI Cost WebSocket"
        ],
        "summary": "Get Connection Stats",
        "description": "Get statistics about active WebSocket connections.",
        "operationId": "get_connection_stats_api_v1_ai_cost_websocket_api_v1_ai_cost_ws_connections_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost-websocket/api/v1/ai/cost/ws/broadcast/alert": {
      "post": {
        "tags": [
          "AI Cost WebSocket",
          "AI Cost WebSocket"
        ],
        "summary": "Broadcast Budget Alert",
        "description": "Broadcast budget alert to all connected clients.",
        "operationId": "broadcast_budget_alert_api_v1_ai_cost_websocket_api_v1_ai_cost_ws_broadcast_alert_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Alert Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/cost-websocket/api/v1/ai/cost/ws/broadcast/cost-spike": {
      "post": {
        "tags": [
          "AI Cost WebSocket",
          "AI Cost WebSocket"
        ],
        "summary": "Broadcast Cost Spike",
        "description": "Broadcast cost spike alert to connected clients.",
        "operationId": "broadcast_cost_spike_api_v1_ai_cost_websocket_api_v1_ai_cost_ws_broadcast_cost_spike_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Spike Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/policies/policies/generate-policy": {
      "post": {
        "tags": [
          "AI Policy Generation",
          "AI Policy Generation"
        ],
        "summary": "Generate Policy",
        "description": "Generate compliance policy using AI with dual provider fallback.\n\nRequires authentication. Limited to 20 requests per minute per user.\nUses Google AI (primary) with OpenAI fallback for reliability.",
        "operationId": "generate_policy_api_v1_ai_policies_policies_generate_policy_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/policies/policies/refine-policy": {
      "put": {
        "tags": [
          "AI Policy Generation",
          "AI Policy Generation"
        ],
        "summary": "Refine Policy",
        "description": "Refine existing policy based on feedback.\n\nRequires authentication. Limited to 30 requests per minute per user.",
        "operationId": "refine_policy_api_v1_ai_policies_policies_refine_policy_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRefinementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRefinementResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/policies/policies/policy-templates": {
      "get": {
        "tags": [
          "AI Policy Generation",
          "AI Policy Generation"
        ],
        "summary": "Get Policy Templates",
        "description": "Get available policy templates.\n\nCan be filtered by framework and policy type.\nLimited to 100 requests per minute.",
        "operationId": "get_policy_templates_api_v1_ai_policies_policies_policy_templates_get",
        "parameters": [
          {
            "name": "framework_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Framework Id"
            }
          },
          {
            "name": "policy_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Policy Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplatesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/policies/policies/metrics": {
      "get": {
        "tags": [
          "AI Policy Generation",
          "AI Policy Generation"
        ],
        "summary": "Get Ai Metrics",
        "description": "Get AI policy generation metrics and performance data.\n\nRequires authentication. Shows provider performance, costs, and usage.",
        "operationId": "get_ai_metrics_api_v1_ai_policies_policies_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGenerationMetrics"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/policies/policies/validate-policy": {
      "post": {
        "tags": [
          "AI Policy Generation",
          "AI Policy Generation"
        ],
        "summary": "Validate Policy",
        "description": "Validate policy against framework requirements.\n\nRequires authentication. Limited to 50 requests per minute.",
        "operationId": "validate_policy_api_v1_ai_policies_policies_validate_policy_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "policy_content",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Policy Content"
            }
          },
          {
            "name": "framework_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ai/policies/policies/analytics/export": {
      "post": {
        "tags": [
          "AI Policy Generation",
          "AI Policy Generation"
        ],
        "summary": "Export Analytics",
        "description": "Export policy generation analytics.\n\nLimited to 5 exports per hour. Requires admin permissions.",
        "operationId": "export_analytics_api_v1_ai_policies_policies_analytics_export_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "End Date"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "csv",
              "title": "Format"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/overview": {
      "get": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Wrapper",
        "operationId": "wrapper_api_v1_performance_performance_overview_get",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceOverview"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/database": {
      "get": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Wrapper",
        "operationId": "wrapper_api_v1_performance_performance_database_get",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabasePerformanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/cache": {
      "get": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Wrapper",
        "operationId": "wrapper_api_v1_performance_performance_cache_get",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CachePerformanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/api": {
      "get": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Wrapper",
        "operationId": "wrapper_api_v1_performance_performance_api_get",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIPerformanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/system": {
      "get": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Wrapper",
        "operationId": "wrapper_api_v1_performance_performance_system_get",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/recommendations": {
      "get": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Wrapper",
        "operationId": "wrapper_api_v1_performance_performance_recommendations_get",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OptimizationRecommendation"
                  },
                  "title": "Response Wrapper Api V1 Performance Performance Recommendations Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/trends": {
      "get": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Wrapper",
        "operationId": "wrapper_api_v1_performance_performance_trends_get",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceTrendsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/alerts/configure": {
      "post": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Wrapper",
        "operationId": "wrapper_api_v1_performance_performance_alerts_configure_post",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/health": {
      "get": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Performance Monitoring Health",
        "description": "Health check for performance monitoring system.",
        "operationId": "performance_monitoring_health_api_v1_performance_performance_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/monitoring/start": {
      "post": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Start Performance Monitoring",
        "description": "Start continuous performance monitoring.\n\nArgs:\n    interval: Monitoring interval in seconds (10-300)",
        "operationId": "start_performance_monitoring_api_v1_performance_performance_monitoring_start_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "interval",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 300,
              "minimum": 10,
              "description": "Monitoring interval in seconds",
              "default": 60,
              "title": "Interval"
            },
            "description": "Monitoring interval in seconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/monitoring/stop": {
      "post": {
        "tags": [
          "Performance Monitoring",
          "performance-monitoring"
        ],
        "summary": "Stop Performance Monitoring",
        "description": "Stop continuous performance monitoring.",
        "operationId": "stop_performance_monitoring_api_v1_performance_performance_monitoring_stop_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/uk-compliance/api/v1/compliance/frameworks": {
      "get": {
        "tags": [
          "UK Compliance",
          "UK Compliance"
        ],
        "summary": "Get Frameworks",
        "description": "Get compliance frameworks with optional filtering.\n\nSupports filtering by region, category, industry, and complexity.",
        "operationId": "get_frameworks_api_v1_uk_compliance_api_v1_compliance_frameworks_get",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by geographic region",
              "title": "Region"
            },
            "description": "Filter by geographic region"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by framework category",
              "title": "Category"
            },
            "description": "Filter by framework category"
          },
          {
            "name": "industry",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by applicable industry",
              "title": "Industry"
            },
            "description": "Filter by applicable industry"
          },
          {
            "name": "complexity_min",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Complexity Min"
            }
          },
          {
            "name": "complexity_max",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Complexity Max"
            }
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include only active frameworks",
              "default": true,
              "title": "Active Only"
            },
            "description": "Include only active frameworks"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrameworkListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/uk-compliance/api/v1/compliance/frameworks/{framework_id}": {
      "get": {
        "tags": [
          "UK Compliance",
          "UK Compliance"
        ],
        "summary": "Get Framework",
        "description": "Get a specific compliance framework by ID.",
        "operationId": "get_framework_api_v1_uk_compliance_api_v1_compliance_frameworks__framework_id__get",
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrameworkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UK Compliance",
          "UK Compliance"
        ],
        "summary": "Update Framework",
        "description": "Update a specific compliance framework.\n\nRequires authentication.",
        "operationId": "update_framework_api_v1_uk_compliance_api_v1_compliance_frameworks__framework_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UKFrameworkSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrameworkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UK Compliance",
          "UK Compliance"
        ],
        "summary": "Delete Framework",
        "description": "Soft delete a compliance framework (set is_active = False).\n\nRequires authentication.",
        "operationId": "delete_framework_api_v1_uk_compliance_api_v1_compliance_frameworks__framework_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "framework_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Framework Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/uk-compliance/api/v1/compliance/frameworks/load": {
      "post": {
        "tags": [
          "UK Compliance",
          "UK Compliance"
        ],
        "summary": "Load Frameworks",
        "description": "Bulk load UK compliance frameworks.\n\nRequires authentication. Limited to 10 requests per minute.",
        "operationId": "load_frameworks_api_v1_uk_compliance_api_v1_compliance_frameworks_load_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrameworkLoadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrameworkLoadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/users/": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "List Users",
        "description": "List all users with filtering and pagination.",
        "operationId": "list_users_api_admin_admin_users__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search by email or name",
              "title": "Search"
            },
            "description": "Search by email or name"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by role name",
              "title": "Role"
            },
            "description": "Filter by role name"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by active status",
              "title": "Is Active"
            },
            "description": "Filter by active status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/api__routers__admin__user_management__UserResponse"
                  },
                  "title": "Response List Users Api Admin Admin Users  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Create User",
        "description": "Create a new user with optional role assignments.",
        "operationId": "create_user_api_admin_admin_users__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api__routers__admin__user_management__UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admin/users/{user_id}": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Get User",
        "description": "Get a specific user by ID.",
        "operationId": "get_user_api_admin_admin_users__user_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api__routers__admin__user_management__UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Update User",
        "description": "Update a user's information.",
        "operationId": "update_user_api_admin_admin_users__user_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api__routers__admin__user_management__UserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Delete User",
        "description": "Delete a user (soft delete by deactivating).",
        "operationId": "delete_user_api_admin_admin_users__user_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admin/users/roles/": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "List Roles",
        "description": "List all roles with permission and user count information.",
        "operationId": "list_roles_api_admin_admin_users_roles__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RoleResponse"
                  },
                  "type": "array",
                  "title": "Response List Roles Api Admin Admin Users Roles  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Create Role",
        "description": "Create a new role with permissions.",
        "operationId": "create_role_api_admin_admin_users_roles__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/users/{user_id}/roles": {
      "post": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Assign Role To User",
        "description": "Assign a role to a user.",
        "operationId": "assign_role_to_user_api_admin_admin_users__user_id__roles_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api__routers__admin__user_management__RoleAssignmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admin/users/{user_id}/roles/{role_id}": {
      "delete": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Revoke Role From User",
        "description": "Revoke a role from a user.",
        "operationId": "revoke_role_from_user_api_admin_admin_users__user_id__roles__role_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Role Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admin/users/statistics": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Get Admin Statistics",
        "description": "Get comprehensive admin statistics.",
        "operationId": "get_admin_statistics_api_admin_admin_users_statistics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/users/audit-logs": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Get Audit Logs",
        "description": "Get audit logs with filtering and pagination.",
        "operationId": "get_audit_logs_api_admin_admin_users_audit_logs_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by action type",
              "title": "Action"
            },
            "description": "Filter by action type"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by user ID",
              "title": "User Id"
            },
            "description": "Filter by user ID"
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Number of days to look back",
              "default": 30,
              "title": "Days"
            },
            "description": "Number of days to look back"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogResponse"
                  },
                  "title": "Response Get Audit Logs Api Admin Admin Users Audit Logs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admin/users/initialize-rbac": {
      "post": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Initialize Rbac System Endpoint",
        "description": "Initialize RBAC system with default roles and permissions.",
        "operationId": "initialize_rbac_system_endpoint_api_admin_admin_users_initialize_rbac_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/users/cleanup-expired-roles": {
      "post": {
        "tags": [
          "admin",
          "admin",
          "user-management"
        ],
        "summary": "Cleanup Expired Roles",
        "description": "Clean up expired role assignments.",
        "operationId": "cleanup_expired_roles_api_admin_admin_users_cleanup_expired_roles_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/tokens/statistics": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "token-management"
        ],
        "summary": "Get Blacklist Statistics",
        "description": "Get comprehensive blacklist statistics.",
        "operationId": "get_blacklist_statistics_api_admin_admin_tokens_statistics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlacklistStatsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/tokens/entry/{token_hash}": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "token-management"
        ],
        "summary": "Get Blacklist Entry",
        "description": "Get details for a specific blacklisted token by hash.",
        "operationId": "get_blacklist_entry_api_admin_admin_tokens_entry__token_hash__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "token_hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token Hash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/BlacklistEntryResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get Blacklist Entry Api Admin Admin Tokens Entry  Token Hash  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admin/tokens/blacklist": {
      "post": {
        "tags": [
          "admin",
          "admin",
          "token-management"
        ],
        "summary": "Blacklist Token Admin",
        "description": "Administratively blacklist a token.",
        "operationId": "blacklist_token_admin_api_admin_admin_tokens_blacklist_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admin",
          "admin",
          "token-management"
        ],
        "summary": "Remove Token From Blacklist",
        "description": "Remove a token from the blacklist.",
        "operationId": "remove_token_from_blacklist_api_admin_admin_tokens_blacklist_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/tokens/blacklist/user": {
      "post": {
        "tags": [
          "admin",
          "admin",
          "token-management"
        ],
        "summary": "Blacklist User Tokens",
        "description": "Blacklist all tokens for a specific user.",
        "operationId": "blacklist_user_tokens_api_admin_admin_tokens_blacklist_user_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTokenActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/tokens/cleanup": {
      "post": {
        "tags": [
          "admin",
          "admin",
          "token-management"
        ],
        "summary": "Cleanup Expired Tokens",
        "description": "Manually trigger cleanup of expired tokens.",
        "operationId": "cleanup_expired_tokens_api_admin_admin_tokens_cleanup_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/tokens/health": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "token-management"
        ],
        "summary": "Get Blacklist Health",
        "description": "Get health status of the token blacklist system.",
        "operationId": "get_blacklist_health_api_admin_admin_tokens_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/admin/tokens/patterns": {
      "get": {
        "tags": [
          "admin",
          "admin",
          "token-management"
        ],
        "summary": "Get Suspicious Patterns",
        "description": "Get analysis of suspicious blacklisting patterns.",
        "operationId": "get_suspicious_patterns_api_admin_admin_tokens_patterns_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Hours to look back for patterns",
              "default": 24,
              "title": "Hours"
            },
            "description": "Hours to look back for patterns"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/data-access/grant": {
      "post": {
        "tags": [
          "admin",
          "Data Access Management"
        ],
        "summary": "Grant Data Access",
        "description": "Grant data access to a user. Requires admin_permissions.",
        "operationId": "grant_data_access_api_admin_data_access_grant_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataAccessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataAccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/data-access/revoke": {
      "delete": {
        "tags": [
          "admin",
          "Data Access Management"
        ],
        "summary": "Revoke Data Access",
        "description": "Revoke data access from a user. Requires admin_permissions.",
        "operationId": "revoke_data_access_api_admin_data_access_revoke_delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          },
          {
            "name": "business_profile_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Business Profile Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/data-access/user/{user_id}": {
      "get": {
        "tags": [
          "admin",
          "Data Access Management"
        ],
        "summary": "Get User Data Access",
        "description": "Get data access information for a specific user. Requires admin_audit permission.",
        "operationId": "get_user_data_access_api_admin_data_access_user__user_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDataAccessInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/data-access/levels": {
      "get": {
        "tags": [
          "admin",
          "Data Access Management"
        ],
        "summary": "List Access Levels",
        "description": "List available data access levels and their descriptions.",
        "operationId": "list_access_levels_api_admin_data_access_levels_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/admin/data-access/audit": {
      "get": {
        "tags": [
          "admin",
          "Data Access Management"
        ],
        "summary": "Audit Data Access",
        "description": "Get audit information about data access permissions.",
        "operationId": "audit_data_access_api_admin_data_access_audit_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/test-utils/cleanup-test-users": {
      "delete": {
        "tags": [
          "Test Utilities"
        ],
        "summary": "Cleanup Test Users",
        "description": "Clean up test users from the database.\nOnly works in test/development environments.\n\nArgs:\n    email_pattern: Pattern to match test user emails (default: @example.com)\n\nReturns:\n    dict: Number of users deleted",
        "operationId": "cleanup_test_users_api_test_utils_cleanup_test_users_delete",
        "parameters": [
          {
            "name": "email_pattern",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "@example.com",
              "title": "Email Pattern"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/test-utils/create-test-user": {
      "post": {
        "tags": [
          "Test Utilities"
        ],
        "summary": "Create Test User",
        "description": "Create a test user for testing purposes.\nOnly works in test/development environments.\n\nArgs:\n    email: Email for the test user\n    password: Password for the test user (default: TestPassword123!)\n\nReturns:\n    dict: Created user info",
        "operationId": "create_test_user_api_test_utils_create_test_user_post",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Email"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "TestPassword123!",
              "title": "Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/test-utils/clear-rate-limits": {
      "post": {
        "tags": [
          "Test Utilities"
        ],
        "summary": "Clear Rate Limits",
        "description": "Clear all rate limit data.\nOnly works in test/development environments.\n\nReturns:\n    dict: Success status",
        "operationId": "clear_rate_limits_api_test_utils_clear_rate_limits_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/dashboard": {
      "get": {
        "summary": "Get Dashboard",
        "description": "Get user dashboard data",
        "operationId": "get_dashboard_api_dashboard_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "summary": "API Information",
        "description": "Get basic API information",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check API health status with database monitoring",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "summary": "API v1 Health Check",
        "description": "API v1 health check endpoint",
        "operationId": "api_health_check_api_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/detailed": {
      "get": {
        "summary": "Detailed API v1 Health Check",
        "description": "Detailed API v1 health check with component status",
        "operationId": "api_detailed_health_check_api_v1_health_detailed_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AIAnalysisRequest": {
        "properties": {
          "assessment_results": {
            "additionalProperties": true,
            "type": "object",
            "title": "Assessment Results"
          },
          "framework_id": {
            "type": "string",
            "title": "Framework Id"
          },
          "business_profile_id": {
            "type": "string",
            "title": "Business Profile Id"
          }
        },
        "type": "object",
        "required": [
          "assessment_results",
          "framework_id",
          "business_profile_id"
        ],
        "title": "AIAnalysisRequest"
      },
      "AIAnalysisResponse": {
        "properties": {
          "gaps": {
            "items": {
              "$ref": "#/components/schemas/Gap"
            },
            "type": "array",
            "title": "Gaps"
          },
          "recommendations": {
            "items": {
              "$ref": "#/components/schemas/Recommendation"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "risk_assessment": {
            "additionalProperties": true,
            "type": "object",
            "title": "Risk Assessment"
          },
          "compliance_insights": {
            "additionalProperties": true,
            "type": "object",
            "title": "Compliance Insights"
          },
          "evidence_requirements": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Evidence Requirements"
          },
          "request_id": {
            "type": "string",
            "title": "Request Id"
          },
          "generated_at": {
            "type": "string",
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "gaps",
          "recommendations",
          "risk_assessment",
          "compliance_insights",
          "evidence_requirements",
          "request_id",
          "generated_at"
        ],
        "title": "AIAnalysisResponse"
      },
      "AIAnalysisResult": {
        "properties": {
          "scores": {
            "$ref": "#/components/schemas/QualityScoreBreakdown"
          },
          "overall_score": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Overall Score",
            "description": "Overall AI quality score"
          },
          "strengths": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Strengths",
            "description": "Identified strengths"
          },
          "weaknesses": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Weaknesses",
            "description": "Identified weaknesses"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations",
            "description": "Improvement recommendations"
          },
          "ai_confidence": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Ai Confidence",
            "description": "AI analysis confidence"
          }
        },
        "type": "object",
        "required": [
          "scores",
          "overall_score",
          "ai_confidence"
        ],
        "title": "AIAnalysisResult",
        "description": "AI-powered quality analysis result."
      },
      "AIFeedbackRequest": {
        "properties": {
          "interaction_id": {
            "type": "string",
            "title": "Interaction Id"
          },
          "helpful": {
            "type": "boolean",
            "title": "Helpful"
          },
          "rating": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 5.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Rating"
          },
          "comments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comments"
          },
          "improvement_suggestions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Improvement Suggestions"
          }
        },
        "type": "object",
        "required": [
          "interaction_id",
          "helpful"
        ],
        "title": "AIFeedbackRequest"
      },
      "AIFollowUpQuestion": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "options": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning"
          },
          "priority": {
            "type": "string",
            "title": "Priority"
          }
        },
        "type": "object",
        "required": [
          "id",
          "text",
          "type",
          "reasoning",
          "priority"
        ],
        "title": "AIFollowUpQuestion"
      },
      "AIFollowUpRequest": {
        "properties": {
          "framework_id": {
            "type": "string",
            "title": "Framework Id"
          },
          "current_answers": {
            "additionalProperties": true,
            "type": "object",
            "title": "Current Answers"
          },
          "business_context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Context"
          },
          "max_questions": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Max Questions",
            "default": 3
          }
        },
        "type": "object",
        "required": [
          "framework_id",
          "current_answers"
        ],
        "title": "AIFollowUpRequest"
      },
      "AIFollowUpResponse": {
        "properties": {
          "questions": {
            "items": {
              "$ref": "#/components/schemas/AIFollowUpQuestion"
            },
            "type": "array",
            "title": "Questions"
          },
          "total_generated": {
            "type": "integer",
            "title": "Total Generated"
          },
          "request_id": {
            "type": "string",
            "title": "Request Id"
          },
          "generated_at": {
            "type": "string",
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "questions",
          "total_generated",
          "request_id",
          "generated_at"
        ],
        "title": "AIFollowUpResponse"
      },
      "AIHelpRequest": {
        "properties": {
          "question_id": {
            "type": "string",
            "title": "Question Id"
          },
          "question_text": {
            "type": "string",
            "title": "Question Text"
          },
          "framework_id": {
            "type": "string",
            "title": "Framework Id"
          },
          "section_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Section Id"
          },
          "user_context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Context"
          }
        },
        "type": "object",
        "required": [
          "question_id",
          "question_text",
          "framework_id"
        ],
        "title": "AIHelpRequest"
      },
      "AIHelpResponse": {
        "properties": {
          "guidance": {
            "type": "string",
            "title": "Guidance"
          },
          "confidence_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence Score"
          },
          "related_topics": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Related Topics"
          },
          "follow_up_suggestions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Follow Up Suggestions"
          },
          "source_references": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source References"
          },
          "request_id": {
            "type": "string",
            "title": "Request Id"
          },
          "generated_at": {
            "type": "string",
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "guidance",
          "confidence_score",
          "request_id",
          "generated_at"
        ],
        "title": "AIHelpResponse"
      },
      "AIMetricsResponse": {
        "properties": {
          "response_times": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Response Times"
          },
          "accuracy_score": {
            "type": "number",
            "title": "Accuracy Score"
          },
          "user_satisfaction": {
            "type": "number",
            "title": "User Satisfaction"
          },
          "total_interactions": {
            "type": "integer",
            "title": "Total Interactions"
          },
          "quota_usage": {
            "additionalProperties": true,
            "type": "object",
            "title": "Quota Usage"
          }
        },
        "type": "object",
        "required": [
          "response_times",
          "accuracy_score",
          "user_satisfaction",
          "total_interactions",
          "quota_usage"
        ],
        "title": "AIMetricsResponse"
      },
      "AIProviderMetrics": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "requests_total": {
            "type": "integer",
            "title": "Requests Total",
            "default": 0
          },
          "requests_successful": {
            "type": "integer",
            "title": "Requests Successful",
            "default": 0
          },
          "requests_failed": {
            "type": "integer",
            "title": "Requests Failed",
            "default": 0
          },
          "average_response_time_ms": {
            "type": "number",
            "title": "Average Response Time Ms",
            "default": 0.0
          },
          "average_confidence_score": {
            "type": "number",
            "title": "Average Confidence Score",
            "default": 0.0
          },
          "total_cost": {
            "type": "number",
            "title": "Total Cost",
            "default": 0.0
          },
          "last_24h_requests": {
            "type": "integer",
            "title": "Last 24H Requests",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "provider"
        ],
        "title": "AIProviderMetrics",
        "description": "Metrics for AI provider performance"
      },
      "AIRecommendationRequest": {
        "properties": {
          "gaps": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Gaps"
          },
          "business_profile": {
            "additionalProperties": true,
            "type": "object",
            "title": "Business Profile"
          },
          "existing_policies": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Existing Policies"
          },
          "industry_context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry Context"
          },
          "timeline_preferences": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeline Preferences",
            "default": "standard"
          }
        },
        "type": "object",
        "required": [
          "gaps",
          "business_profile"
        ],
        "title": "AIRecommendationRequest"
      },
      "AIRecommendationResponse": {
        "properties": {
          "recommendations": {
            "items": {
              "$ref": "#/components/schemas/Recommendation"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "implementation_plan": {
            "$ref": "#/components/schemas/ImplementationPlan"
          },
          "success_metrics": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Success Metrics"
          },
          "request_id": {
            "type": "string",
            "title": "Request Id"
          },
          "generated_at": {
            "type": "string",
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "recommendations",
          "implementation_plan",
          "success_metrics",
          "request_id",
          "generated_at"
        ],
        "title": "AIRecommendationResponse"
      },
      "APIInfoResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "API name"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "API version"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "API status"
          }
        },
        "type": "object",
        "required": [
          "message",
          "version",
          "status"
        ],
        "title": "APIInfoResponse",
        "description": "API information response"
      },
      "APIPerformanceResponse": {
        "properties": {
          "avg_response_time": {
            "type": "number",
            "title": "Avg Response Time"
          },
          "p95_response_time": {
            "type": "number",
            "title": "P95 Response Time"
          },
          "p99_response_time": {
            "type": "number",
            "title": "P99 Response Time"
          },
          "requests_per_second": {
            "type": "number",
            "title": "Requests Per Second"
          },
          "slowest_endpoints": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Slowest Endpoints"
          },
          "performance_rating": {
            "type": "string",
            "title": "Performance Rating"
          }
        },
        "type": "object",
        "required": [
          "avg_response_time",
          "p95_response_time",
          "p99_response_time",
          "requests_per_second",
          "slowest_endpoints",
          "performance_rating"
        ],
        "title": "APIPerformanceResponse",
        "description": "API performance metrics response."
      },
      "AWSConfigurationRequest": {
        "properties": {
          "auth_type": {
            "type": "string",
            "title": "Auth Type"
          },
          "access_key_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Key Id"
          },
          "secret_access_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secret Access Key"
          },
          "role_arn": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role Arn"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "region": {
            "type": "string",
            "title": "Region",
            "default": "us-east-1"
          }
        },
        "type": "object",
        "required": [
          "auth_type"
        ],
        "title": "AWSConfigurationRequest"
      },
      "AdminStatsResponse": {
        "properties": {
          "total_users": {
            "type": "integer",
            "title": "Total Users"
          },
          "active_users": {
            "type": "integer",
            "title": "Active Users"
          },
          "verified_users": {
            "type": "integer",
            "title": "Verified Users"
          },
          "total_roles": {
            "type": "integer",
            "title": "Total Roles"
          },
          "system_roles": {
            "type": "integer",
            "title": "System Roles"
          },
          "custom_roles": {
            "type": "integer",
            "title": "Custom Roles"
          },
          "total_permissions": {
            "type": "integer",
            "title": "Total Permissions"
          },
          "recent_logins": {
            "type": "integer",
            "title": "Recent Logins"
          },
          "recent_registrations": {
            "type": "integer",
            "title": "Recent Registrations"
          }
        },
        "type": "object",
        "required": [
          "total_users",
          "active_users",
          "verified_users",
          "total_roles",
          "system_roles",
          "custom_roles",
          "total_permissions",
          "recent_logins",
          "recent_registrations"
        ],
        "title": "AdminStatsResponse",
        "description": "Response model for admin statistics."
      },
      "AlertResponse": {
        "properties": {
          "alert_type": {
            "type": "string",
            "title": "Alert Type",
            "description": "Type of alert"
          },
          "severity": {
            "type": "string",
            "title": "Severity",
            "description": "Alert severity"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Alert message"
          },
          "current_usage": {
            "type": "string",
            "title": "Current Usage",
            "description": "Current usage amount"
          },
          "budget_limit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Budget Limit",
            "description": "Budget limit"
          },
          "service_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Name",
            "description": "Service name if service-specific"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Alert timestamp"
          }
        },
        "type": "object",
        "required": [
          "alert_type",
          "severity",
          "message",
          "current_usage",
          "timestamp"
        ],
        "title": "AlertResponse",
        "description": "Response model for budget alerts."
      },
      "AnswerSubmissionRequest": {
        "properties": {
          "question_id": {
            "type": "string",
            "title": "Question Id"
          },
          "answer": {
            "type": "string",
            "title": "Answer"
          },
          "answer_confidence": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(low|medium|high)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Answer Confidence"
          },
          "time_spent_seconds": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Spent Seconds"
          },
          "skip_reason": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Skip Reason"
          }
        },
        "type": "object",
        "required": [
          "question_id",
          "answer"
        ],
        "title": "AnswerSubmissionRequest",
        "description": "Schema for submitting assessment answers."
      },
      "AssessmentQuestion": {
        "properties": {
          "question_id": {
            "type": "string",
            "title": "Question Id",
            "description": "Unique identifier for the question."
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the assessment question."
          },
          "question_type": {
            "type": "string",
            "pattern": "^(multiple_choice|free_text|yes_no)$",
            "title": "Question Type",
            "description": "The type of question."
          },
          "options": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options",
            "description": "A list of options for multiple-choice questions, e.g., [{'value': 'opt1', 'label': 'Option 1'}]."
          }
        },
        "type": "object",
        "required": [
          "question_id",
          "text",
          "question_type"
        ],
        "title": "AssessmentQuestion"
      },
      "AssessmentResponseUpdate": {
        "properties": {
          "responses": {
            "additionalProperties": true,
            "type": "object",
            "title": "Responses",
            "description": "The user's responses to the assessment questions."
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(in_progress|completed)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "The updated status of the assessment session."
          }
        },
        "type": "object",
        "required": [
          "responses"
        ],
        "title": "AssessmentResponseUpdate"
      },
      "AssessmentResultsResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid",
            "title": "Session Id"
          },
          "compliance_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compliance Score"
          },
          "risk_level": {
            "type": "string",
            "title": "Risk Level"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          },
          "risk_assessment": {
            "additionalProperties": true,
            "type": "object",
            "title": "Risk Assessment"
          },
          "recommendations": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "gaps_identified": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Gaps Identified"
          },
          "results_summary": {
            "type": "string",
            "title": "Results Summary"
          },
          "conversion_opportunities": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Conversion Opportunities"
          },
          "next_steps": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Next Steps"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "compliance_score",
          "risk_level",
          "completed_at",
          "risk_assessment",
          "recommendations",
          "gaps_identified",
          "results_summary",
          "conversion_opportunities",
          "next_steps"
        ],
        "title": "AssessmentResultsResponse",
        "description": "Response schema for assessment results."
      },
      "AssessmentSessionCreate": {
        "properties": {
          "business_profile_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Profile Id"
          },
          "session_type": {
            "type": "string",
            "title": "Session Type",
            "default": "compliance_scoping"
          }
        },
        "type": "object",
        "title": "AssessmentSessionCreate"
      },
      "AssessmentSessionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "business_profile_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Profile Id"
          },
          "session_type": {
            "type": "string",
            "title": "Session Type"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "current_stage": {
            "type": "integer",
            "title": "Current Stage"
          },
          "total_stages": {
            "type": "integer",
            "title": "Total Stages"
          },
          "responses": {
            "additionalProperties": true,
            "type": "object",
            "title": "Responses"
          },
          "recommendations": {
            "items": {},
            "type": "array",
            "title": "Recommendations"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "business_profile_id",
          "session_type",
          "status",
          "current_stage",
          "total_stages",
          "responses",
          "recommendations",
          "started_at",
          "completed_at"
        ],
        "title": "AssessmentSessionResponse"
      },
      "AuditLogResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "action": {
            "type": "string",
            "title": "Action"
          },
          "resource_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resource Type"
          },
          "resource_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resource Id"
          },
          "details": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          },
          "severity": {
            "type": "string",
            "title": "Severity"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address"
          },
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "action",
          "resource_type",
          "resource_id",
          "details",
          "severity",
          "created_at",
          "ip_address",
          "user_agent"
        ],
        "title": "AuditLogResponse",
        "description": "Response model for audit log entries."
      },
      "AutomationOpportunities": {
        "properties": {
          "total_tasks": {
            "type": "integer",
            "title": "Total Tasks"
          },
          "automatable_tasks": {
            "type": "integer",
            "title": "Automatable Tasks"
          },
          "automation_percentage": {
            "type": "number",
            "title": "Automation Percentage"
          },
          "effort_savings_hours": {
            "type": "number",
            "title": "Effort Savings Hours"
          },
          "effort_savings_percentage": {
            "type": "number",
            "title": "Effort Savings Percentage"
          },
          "recommended_tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommended Tools"
          }
        },
        "type": "object",
        "required": [
          "total_tasks",
          "automatable_tasks",
          "automation_percentage",
          "effort_savings_hours",
          "effort_savings_percentage",
          "recommended_tools"
        ],
        "title": "AutomationOpportunities",
        "description": "Automation opportunities analysis."
      },
      "BatchDuplicateDetectionRequest": {
        "properties": {
          "evidence_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "maxItems": 100,
            "minItems": 2,
            "title": "Evidence Ids",
            "description": "Evidence IDs to analyze"
          },
          "similarity_threshold": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 50.0,
            "title": "Similarity Threshold",
            "description": "Minimum similarity threshold",
            "default": 80.0
          }
        },
        "type": "object",
        "required": [
          "evidence_ids"
        ],
        "title": "BatchDuplicateDetectionRequest",
        "description": "Request schema for batch duplicate detection."
      },
      "BatchDuplicateDetectionResponse": {
        "properties": {
          "total_items": {
            "type": "integer",
            "title": "Total Items",
            "description": "Total evidence items analyzed"
          },
          "duplicate_groups": {
            "items": {
              "$ref": "#/components/schemas/DuplicateGroup"
            },
            "type": "array",
            "title": "Duplicate Groups"
          },
          "potential_duplicates": {
            "type": "integer",
            "title": "Potential Duplicates",
            "description": "Total potential duplicate items found"
          },
          "unique_items": {
            "type": "integer",
            "title": "Unique Items",
            "description": "Number of unique items"
          },
          "analysis_summary": {
            "type": "string",
            "title": "Analysis Summary",
            "description": "Summary of duplicate analysis"
          },
          "analysis_timestamp": {
            "type": "string",
            "title": "Analysis Timestamp",
            "description": "ISO timestamp of analysis"
          }
        },
        "type": "object",
        "required": [
          "total_items",
          "duplicate_groups",
          "potential_duplicates",
          "unique_items",
          "analysis_summary",
          "analysis_timestamp"
        ],
        "title": "BatchDuplicateDetectionResponse",
        "description": "Response schema for batch duplicate detection."
      },
      "BlacklistEntryResponse": {
        "properties": {
          "token_hash": {
            "type": "string",
            "title": "Token Hash"
          },
          "reason": {
            "type": "string",
            "title": "Reason"
          },
          "blacklisted_at": {
            "type": "string",
            "title": "Blacklisted At"
          },
          "expires_at": {
            "type": "string",
            "title": "Expires At"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address"
          },
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "token_hash",
          "reason",
          "blacklisted_at",
          "expires_at",
          "user_id",
          "session_id",
          "ip_address",
          "user_agent",
          "metadata"
        ],
        "title": "BlacklistEntryResponse",
        "description": "Response model for blacklist entry details."
      },
      "BlacklistStatsResponse": {
        "properties": {
          "current_blacklisted_tokens": {
            "type": "integer",
            "title": "Current Blacklisted Tokens"
          },
          "total_blacklisted": {
            "type": "integer",
            "title": "Total Blacklisted"
          },
          "blacklisted_today": {
            "type": "integer",
            "title": "Blacklisted Today"
          },
          "expired_tokens_cleaned": {
            "type": "integer",
            "title": "Expired Tokens Cleaned"
          },
          "suspicious_patterns_detected": {
            "type": "integer",
            "title": "Suspicious Patterns Detected"
          },
          "bulk_operations_count": {
            "type": "integer",
            "title": "Bulk Operations Count"
          },
          "last_cleanup": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Cleanup"
          }
        },
        "type": "object",
        "required": [
          "current_blacklisted_tokens",
          "total_blacklisted",
          "blacklisted_today",
          "expired_tokens_cleaned",
          "suspicious_patterns_detected",
          "bulk_operations_count",
          "last_cleanup"
        ],
        "title": "BlacklistStatsResponse",
        "description": "Response model for blacklist statistics."
      },
      "Body_login_for_access_token_api_v1_auth_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_for_access_token_api_v1_auth_token_post"
      },
      "Body_login_with_roles_api_v1_auth_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_with_roles_api_v1_auth_login_post"
      },
      "Body_upload_evidence_file_route_api_v1_evidence__evidence_id__upload_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_evidence_file_route_api_v1_evidence__evidence_id__upload_post"
      },
      "BudgetConfigRequest": {
        "properties": {
          "daily_limit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Daily Limit",
            "description": "Daily budget limit in USD"
          },
          "monthly_limit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Monthly Limit",
            "description": "Monthly budget limit in USD"
          },
          "service_limits": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Limits",
            "description": "Per-service budget limits"
          }
        },
        "type": "object",
        "title": "BudgetConfigRequest",
        "description": "Request model for budget configuration."
      },
      "BudgetStatusResponse": {
        "properties": {
          "daily_usage": {
            "type": "string",
            "title": "Daily Usage",
            "description": "Current daily usage"
          },
          "daily_limit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Daily Limit",
            "description": "Daily budget limit"
          },
          "monthly_usage": {
            "type": "string",
            "title": "Monthly Usage",
            "description": "Current monthly usage"
          },
          "monthly_limit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Monthly Limit",
            "description": "Monthly budget limit"
          },
          "usage_percentage": {
            "type": "number",
            "title": "Usage Percentage",
            "description": "Budget usage percentage"
          },
          "remaining_budget": {
            "type": "string",
            "title": "Remaining Budget",
            "description": "Remaining budget"
          },
          "alert_level": {
            "type": "string",
            "title": "Alert Level",
            "description": "Alert level (normal, warning, critical)"
          },
          "projected_monthly_cost": {
            "type": "string",
            "title": "Projected Monthly Cost",
            "description": "Projected end-of-month cost"
          }
        },
        "type": "object",
        "required": [
          "daily_usage",
          "monthly_usage",
          "usage_percentage",
          "remaining_budget",
          "alert_level",
          "projected_monthly_cost"
        ],
        "title": "BudgetStatusResponse",
        "description": "Response model for budget status."
      },
      "BulkClassificationRequest": {
        "properties": {
          "evidence_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "maxItems": 50,
            "minItems": 1,
            "title": "Evidence Ids",
            "description": "List of evidence IDs to classify"
          },
          "force_reclassify": {
            "type": "boolean",
            "title": "Force Reclassify",
            "description": "Force reclassification even if already classified",
            "default": false
          },
          "apply_high_confidence": {
            "type": "boolean",
            "title": "Apply High Confidence",
            "description": "Automatically apply high-confidence suggestions",
            "default": true
          },
          "confidence_threshold": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 50.0,
            "title": "Confidence Threshold",
            "description": "Minimum confidence to auto-apply",
            "default": 70
          }
        },
        "type": "object",
        "required": [
          "evidence_ids"
        ],
        "title": "BulkClassificationRequest",
        "description": "Request schema for bulk evidence classification."
      },
      "BulkClassificationResponse": {
        "properties": {
          "total_processed": {
            "type": "integer",
            "title": "Total Processed"
          },
          "successful_classifications": {
            "type": "integer",
            "title": "Successful Classifications"
          },
          "failed_classifications": {
            "type": "integer",
            "title": "Failed Classifications"
          },
          "auto_applied": {
            "type": "integer",
            "title": "Auto Applied",
            "description": "Number of suggestions automatically applied",
            "default": 0
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/ClassificationResult"
            },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "total_processed",
          "successful_classifications",
          "failed_classifications",
          "results"
        ],
        "title": "BulkClassificationResponse",
        "description": "Response schema for bulk evidence classification."
      },
      "BulkTokenActionRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "default": "security_action"
          },
          "exclude_current_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exclude Current Token"
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "BulkTokenActionRequest",
        "description": "Request model for bulk token actions."
      },
      "BusinessContext": {
        "properties": {
          "organization_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Organization Name"
          },
          "industry": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Industry"
          },
          "employee_count": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 1000000.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Employee Count"
          },
          "annual_revenue": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Annual Revenue"
          },
          "geographic_operations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Geographic Operations"
          },
          "processes_personal_data": {
            "type": "boolean",
            "title": "Processes Personal Data",
            "default": true
          },
          "data_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Data Types"
          },
          "data_retention_period": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data Retention Period"
          },
          "third_party_processors": {
            "type": "boolean",
            "title": "Third Party Processors",
            "default": false
          },
          "cross_border_transfers": {
            "type": "boolean",
            "title": "Cross Border Transfers",
            "default": false
          },
          "cloud_services": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Cloud Services"
          },
          "security_certifications": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Security Certifications"
          },
          "existing_policies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Existing Policies"
          }
        },
        "type": "object",
        "required": [
          "organization_name",
          "industry"
        ],
        "title": "BusinessContext",
        "description": "Business context for policy customization"
      },
      "BusinessProfileCreate": {
        "properties": {
          "company_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 2,
            "title": "Company Name"
          },
          "industry": {
            "type": "string",
            "maxLength": 50,
            "minLength": 2,
            "title": "Industry"
          },
          "employee_count": {
            "type": "integer",
            "maximum": 1000000.0,
            "minimum": 1.0,
            "title": "Employee Count"
          },
          "annual_revenue": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(Under \u00a3\\\\d+[MK]|\u00a3\\\\d+[MK]-\u00a3\\\\d+[MK]|Over \u00a3\\\\d+[MK])$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Annual Revenue"
          },
          "country": {
            "type": "string",
            "maxLength": 50,
            "title": "Country",
            "default": "United Kingdom"
          },
          "data_sensitivity": {
            "type": "string",
            "pattern": "^(Low|Moderate|High|Confidential)$",
            "title": "Data Sensitivity",
            "default": "Low"
          },
          "handles_personal_data": {
            "type": "boolean",
            "title": "Handles Personal Data",
            "description": "Handles personal data",
            "default": false
          },
          "processes_payments": {
            "type": "boolean",
            "title": "Processes Payments",
            "description": "Processes payments",
            "default": false
          },
          "stores_health_data": {
            "type": "boolean",
            "title": "Stores Health Data",
            "description": "Stores health data",
            "default": false
          },
          "provides_financial_services": {
            "type": "boolean",
            "title": "Provides Financial Services",
            "description": "Provides financial services",
            "default": false
          },
          "operates_critical_infrastructure": {
            "type": "boolean",
            "title": "Operates Critical Infrastructure",
            "description": "Operates critical infrastructure",
            "default": false
          },
          "has_international_operations": {
            "type": "boolean",
            "title": "Has International Operations",
            "description": "Has international operations",
            "default": false
          },
          "existing_frameworks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Existing Frameworks"
          },
          "planned_frameworks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Planned Frameworks"
          },
          "cloud_providers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cloud Providers"
          },
          "saas_tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Saas Tools"
          },
          "development_tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Development Tools"
          },
          "compliance_budget": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compliance Budget"
          },
          "compliance_timeline": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compliance Timeline"
          }
        },
        "type": "object",
        "required": [
          "company_name",
          "industry",
          "employee_count"
        ],
        "title": "BusinessProfileCreate"
      },
      "BusinessProfileResponse": {
        "properties": {
          "company_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 2,
            "title": "Company Name"
          },
          "industry": {
            "type": "string",
            "maxLength": 50,
            "minLength": 2,
            "title": "Industry"
          },
          "employee_count": {
            "type": "integer",
            "maximum": 1000000.0,
            "minimum": 1.0,
            "title": "Employee Count"
          },
          "annual_revenue": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Annual Revenue"
          },
          "country": {
            "type": "string",
            "maxLength": 50,
            "title": "Country",
            "default": "United Kingdom"
          },
          "data_sensitivity": {
            "type": "string",
            "pattern": "^(Low|Moderate|High|Confidential)$",
            "title": "Data Sensitivity",
            "default": "Low"
          },
          "handles_personal_data": {
            "type": "boolean",
            "title": "Handles Personal Data",
            "description": "Handles personal data"
          },
          "processes_payments": {
            "type": "boolean",
            "title": "Processes Payments",
            "description": "Processes payments"
          },
          "stores_health_data": {
            "type": "boolean",
            "title": "Stores Health Data",
            "description": "Stores health data"
          },
          "provides_financial_services": {
            "type": "boolean",
            "title": "Provides Financial Services",
            "description": "Provides financial services"
          },
          "operates_critical_infrastructure": {
            "type": "boolean",
            "title": "Operates Critical Infrastructure",
            "description": "Operates critical infrastructure"
          },
          "has_international_operations": {
            "type": "boolean",
            "title": "Has International Operations",
            "description": "Has international operations"
          },
          "existing_frameworks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Existing Frameworks"
          },
          "planned_frameworks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Planned Frameworks"
          },
          "cloud_providers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cloud Providers"
          },
          "saas_tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Saas Tools"
          },
          "development_tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Development Tools"
          },
          "compliance_budget": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compliance Budget"
          },
          "compliance_timeline": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compliance Timeline"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "company_name",
          "industry",
          "employee_count",
          "handles_personal_data",
          "processes_payments",
          "stores_health_data",
          "provides_financial_services",
          "operates_critical_infrastructure",
          "has_international_operations",
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "BusinessProfileResponse"
      },
      "BusinessProfileUpdate": {
        "properties": {
          "company_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Name"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50,
                "minLength": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry"
          },
          "employee_count": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 1000000.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Employee Count"
          },
          "annual_revenue": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(Under \u00a3\\\\d+[MK]|\u00a3\\\\d+[MK]-\u00a3\\\\d+[MK]|Over \u00a3\\\\d+[MK])$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Annual Revenue"
          },
          "country": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "handles_personal_data": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Handles Personal Data"
          },
          "processes_payments": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Processes Payments"
          },
          "stores_health_data": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stores Health Data"
          },
          "provides_financial_services": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provides Financial Services"
          },
          "operates_critical_infrastructure": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Operates Critical Infrastructure"
          },
          "has_international_operations": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has International Operations"
          },
          "existing_frameworks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Existing Frameworks"
          },
          "planned_frameworks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Planned Frameworks"
          },
          "cloud_providers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cloud Providers"
          },
          "saas_tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Saas Tools"
          },
          "development_tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Development Tools"
          },
          "compliance_budget": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compliance Budget"
          },
          "compliance_timeline": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compliance Timeline"
          }
        },
        "type": "object",
        "title": "BusinessProfileUpdate"
      },
      "CachePerformanceResponse": {
        "properties": {
          "hit_rate": {
            "type": "number",
            "title": "Hit Rate"
          },
          "miss_rate": {
            "type": "number",
            "title": "Miss Rate"
          },
          "memory_usage": {
            "type": "integer",
            "title": "Memory Usage"
          },
          "total_requests": {
            "type": "integer",
            "title": "Total Requests"
          },
          "avg_response_time": {
            "type": "number",
            "title": "Avg Response Time"
          },
          "performance_rating": {
            "type": "string",
            "title": "Performance Rating"
          }
        },
        "type": "object",
        "required": [
          "hit_rate",
          "miss_rate",
          "memory_usage",
          "total_requests",
          "avg_response_time",
          "performance_rating"
        ],
        "title": "CachePerformanceResponse",
        "description": "Cache performance metrics response."
      },
      "CircuitBreakerStatus": {
        "properties": {
          "google_status": {
            "type": "string",
            "title": "Google Status"
          },
          "openai_status": {
            "type": "string",
            "title": "Openai Status"
          },
          "last_failure_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Failure Time"
          },
          "failure_count": {
            "type": "integer",
            "title": "Failure Count",
            "default": 0
          },
          "next_retry_time": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Retry Time"
          }
        },
        "type": "object",
        "required": [
          "google_status",
          "openai_status"
        ],
        "title": "CircuitBreakerStatus",
        "description": "Circuit breaker status for AI providers"
      },
      "ClassificationResult": {
        "properties": {
          "evidence_id": {
            "type": "string",
            "format": "uuid",
            "title": "Evidence Id"
          },
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "current_type": {
            "type": "string",
            "title": "Current Type"
          },
          "suggested_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggested Type"
          },
          "confidence": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Confidence"
          },
          "suggested_controls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Suggested Controls"
          },
          "reasoning": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "applied": {
            "type": "boolean",
            "title": "Applied",
            "description": "Whether the suggestion was applied",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "evidence_id",
          "success",
          "current_type"
        ],
        "title": "ClassificationResult",
        "description": "Individual classification result for bulk operations."
      },
      "ClassificationStatsResponse": {
        "properties": {
          "total_evidence": {
            "type": "integer",
            "title": "Total Evidence"
          },
          "classified_evidence": {
            "type": "integer",
            "title": "Classified Evidence"
          },
          "unclassified_evidence": {
            "type": "integer",
            "title": "Unclassified Evidence"
          },
          "classification_accuracy": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Classification Accuracy",
            "description": "Overall classification accuracy"
          },
          "type_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Type Distribution",
            "description": "Distribution of evidence types"
          },
          "confidence_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Confidence Distribution",
            "description": "Distribution of confidence scores"
          },
          "recent_classifications": {
            "type": "integer",
            "title": "Recent Classifications",
            "description": "Classifications in last 30 days"
          }
        },
        "type": "object",
        "required": [
          "total_evidence",
          "classified_evidence",
          "unclassified_evidence",
          "classification_accuracy",
          "type_distribution",
          "confidence_distribution",
          "recent_classifications"
        ],
        "title": "ClassificationStatsResponse",
        "description": "Response schema for classification statistics."
      },
      "CollectionPlanCreate": {
        "properties": {
          "framework": {
            "type": "string",
            "title": "Framework",
            "description": "Compliance framework (ISO27001, GDPR, SOC2, etc.)"
          },
          "target_completion_weeks": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 52.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Completion Weeks",
            "description": "Target completion timeframe in weeks",
            "default": 12
          },
          "include_existing_evidence": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Existing Evidence",
            "description": "Include analysis of existing evidence",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "framework"
        ],
        "title": "CollectionPlanCreate",
        "description": "Request model for creating a collection plan."
      },
      "CollectionPlanResponse": {
        "properties": {
          "plan_id": {
            "type": "string",
            "title": "Plan Id"
          },
          "business_profile_id": {
            "type": "string",
            "title": "Business Profile Id"
          },
          "framework": {
            "type": "string",
            "title": "Framework"
          },
          "total_tasks": {
            "type": "integer",
            "title": "Total Tasks"
          },
          "estimated_total_hours": {
            "type": "number",
            "title": "Estimated Total Hours"
          },
          "completion_target_date": {
            "type": "string",
            "format": "date-time",
            "title": "Completion Target Date"
          },
          "tasks": {
            "items": {
              "$ref": "#/components/schemas/EvidenceTaskResponse"
            },
            "type": "array",
            "title": "Tasks"
          },
          "automation_opportunities": {
            "$ref": "#/components/schemas/AutomationOpportunities"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "plan_id",
          "business_profile_id",
          "framework",
          "total_tasks",
          "estimated_total_hours",
          "completion_target_date",
          "tasks",
          "automation_opportunities",
          "created_at"
        ],
        "title": "CollectionPlanResponse",
        "description": "Response model for a collection plan."
      },
      "CollectionPlanSummary": {
        "properties": {
          "plan_id": {
            "type": "string",
            "title": "Plan Id"
          },
          "framework": {
            "type": "string",
            "title": "Framework"
          },
          "total_tasks": {
            "type": "integer",
            "title": "Total Tasks"
          },
          "completed_tasks": {
            "type": "integer",
            "title": "Completed Tasks"
          },
          "estimated_total_hours": {
            "type": "number",
            "title": "Estimated Total Hours"
          },
          "completion_target_date": {
            "type": "string",
            "format": "date-time",
            "title": "Completion Target Date"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "plan_id",
          "framework",
          "total_tasks",
          "completed_tasks",
          "estimated_total_hours",
          "completion_target_date",
          "status",
          "created_at"
        ],
        "title": "CollectionPlanSummary",
        "description": "Summary model for collection plan listing."
      },
      "ComplianceAnalysisRequest": {
        "properties": {
          "framework": {
            "type": "string",
            "minLength": 1,
            "title": "Framework",
            "description": "Framework to analyze"
          }
        },
        "type": "object",
        "required": [
          "framework"
        ],
        "title": "ComplianceAnalysisRequest",
        "description": "Request schema for compliance gap analysis."
      },
      "ComplianceAnalysisResponse": {
        "properties": {
          "framework": {
            "type": "string",
            "title": "Framework"
          },
          "completion_percentage": {
            "type": "number",
            "title": "Completion Percentage"
          },
          "evidence_collected": {
            "type": "integer",
            "title": "Evidence Collected"
          },
          "evidence_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Evidence Types"
          },
          "recent_activity": {
            "type": "integer",
            "title": "Recent Activity"
          },
          "recommendations": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "critical_gaps": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Critical Gaps"
          },
          "risk_level": {
            "type": "string",
            "title": "Risk Level"
          }
        },
        "type": "object",
        "required": [
          "framework",
          "completion_percentage",
          "evidence_collected",
          "evidence_types",
          "recent_activity",
          "recommendations",
          "critical_gaps",
          "risk_level"
        ],
        "title": "ComplianceAnalysisResponse",
        "description": "Response schema for compliance analysis."
      },
      "ComplianceFrameworkResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "controls": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Controls"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "category",
          "version",
          "controls"
        ],
        "title": "ComplianceFrameworkResponse"
      },
      "ComplianceReport": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Title for the compliance report."
          },
          "framework": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Framework",
            "description": "The name or ID of the compliance framework for the report."
          },
          "report_type": {
            "type": "string",
            "title": "Report Type",
            "description": "Type of report to generate (e.g., 'summary', 'detailed', 'attestation').",
            "default": "summary"
          },
          "format": {
            "type": "string",
            "pattern": "^(pdf|json|docx)$",
            "title": "Format",
            "description": "The output format for the report.",
            "default": "pdf"
          },
          "include_evidence": {
            "type": "boolean",
            "title": "Include Evidence",
            "description": "Whether to include evidence summaries in the report.",
            "default": false
          },
          "include_recommendations": {
            "type": "boolean",
            "title": "Include Recommendations",
            "description": "Whether to include actionable recommendations.",
            "default": true
          }
        },
        "type": "object",
        "title": "ComplianceReport"
      },
      "ComplianceStatusResponse": {
        "properties": {
          "overall_score": {
            "type": "number",
            "title": "Overall Score"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "framework_scores": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Framework Scores"
          },
          "evidence_summary": {
            "additionalProperties": true,
            "type": "object",
            "title": "Evidence Summary"
          },
          "recent_activity": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Activity"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations"
          },
          "last_updated": {
            "type": "string",
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "overall_score",
          "status",
          "message",
          "framework_scores",
          "evidence_summary",
          "recent_activity",
          "recommendations",
          "last_updated"
        ],
        "title": "ComplianceStatusResponse",
        "description": "Response schema for compliance status."
      },
      "ControlMappingRequest": {
        "properties": {
          "evidence_id": {
            "type": "string",
            "format": "uuid",
            "title": "Evidence Id"
          },
          "frameworks": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Frameworks",
            "description": "Target frameworks",
            "default": [
              "ISO27001",
              "SOC2",
              "GDPR"
            ]
          }
        },
        "type": "object",
        "required": [
          "evidence_id"
        ],
        "title": "ControlMappingRequest",
        "description": "Request schema for control mapping suggestions."
      },
      "ControlMappingResponse": {
        "properties": {
          "evidence_id": {
            "type": "string",
            "format": "uuid",
            "title": "Evidence Id"
          },
          "evidence_type": {
            "type": "string",
            "title": "Evidence Type"
          },
          "framework_mappings": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Framework Mappings",
            "description": "Control mappings by framework"
          },
          "confidence_scores": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Confidence Scores",
            "description": "Confidence scores by framework"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning"
          }
        },
        "type": "object",
        "required": [
          "evidence_id",
          "evidence_type",
          "framework_mappings",
          "confidence_scores",
          "reasoning"
        ],
        "title": "ControlMappingResponse",
        "description": "Response schema for control mapping suggestions."
      },
      "ConversationListResponse": {
        "properties": {
          "conversations": {
            "items": {
              "$ref": "#/components/schemas/ConversationSummary"
            },
            "type": "array",
            "title": "Conversations"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page"
          }
        },
        "type": "object",
        "required": [
          "conversations",
          "total",
          "page",
          "per_page"
        ],
        "title": "ConversationListResponse",
        "description": "Response schema for listing conversations."
      },
      "ConversationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/MessageResponse"
            },
            "type": "array",
            "title": "Messages"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "status",
          "messages",
          "created_at",
          "updated_at"
        ],
        "title": "ConversationResponse",
        "description": "Response schema for a conversation with messages."
      },
      "ConversationSummary": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message_count": {
            "type": "integer",
            "title": "Message Count"
          },
          "last_message_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Message At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "status",
          "message_count",
          "created_at"
        ],
        "title": "ConversationSummary",
        "description": "Summary schema for a conversation."
      },
      "CostAnalyticsResponse": {
        "properties": {
          "total_cost": {
            "type": "string",
            "title": "Total Cost",
            "description": "Total cost for period"
          },
          "total_requests": {
            "type": "integer",
            "title": "Total Requests",
            "description": "Total number of requests"
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens",
            "description": "Total tokens processed"
          },
          "average_cost_per_request": {
            "type": "string",
            "title": "Average Cost Per Request",
            "description": "Average cost per request"
          },
          "average_cost_per_token": {
            "type": "string",
            "title": "Average Cost Per Token",
            "description": "Average cost per token"
          },
          "service_breakdown": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Service Breakdown",
            "description": "Cost breakdown by service"
          },
          "model_breakdown": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Model Breakdown",
            "description": "Cost breakdown by model"
          },
          "hourly_breakdown": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hourly Breakdown",
            "description": "Hourly cost breakdown"
          }
        },
        "type": "object",
        "required": [
          "total_cost",
          "total_requests",
          "total_tokens",
          "average_cost_per_request",
          "average_cost_per_token",
          "service_breakdown",
          "model_breakdown"
        ],
        "title": "CostAnalyticsResponse",
        "description": "Response model for cost analytics."
      },
      "CostTrackingRequest": {
        "properties": {
          "service_name": {
            "type": "string",
            "title": "Service Name",
            "description": "Name of the AI service"
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "AI model used"
          },
          "input_tokens": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Input Tokens",
            "description": "Number of input tokens"
          },
          "output_tokens": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Output Tokens",
            "description": "Number of output tokens"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Session identifier"
          },
          "request_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Id",
            "description": "Request identifier"
          },
          "response_quality_score": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Quality Score",
            "description": "Response quality score (0-1)"
          },
          "response_time_ms": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Time Ms",
            "description": "Response time in milliseconds"
          },
          "cache_hit": {
            "type": "boolean",
            "title": "Cache Hit",
            "description": "Whether response was served from cache",
            "default": false
          },
          "error_occurred": {
            "type": "boolean",
            "title": "Error Occurred",
            "description": "Whether an error occurred",
            "default": false
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata"
          }
        },
        "type": "object",
        "required": [
          "service_name",
          "model_name",
          "input_tokens",
          "output_tokens"
        ],
        "title": "CostTrackingRequest",
        "description": "Request model for tracking AI usage costs."
      },
      "CostTrackingResponse": {
        "properties": {
          "usage_id": {
            "type": "string",
            "title": "Usage Id",
            "description": "Unique usage identifier"
          },
          "cost_usd": {
            "type": "string",
            "title": "Cost Usd",
            "description": "Cost in USD"
          },
          "efficiency_score": {
            "type": "string",
            "title": "Efficiency Score",
            "description": "Efficiency score"
          },
          "cost_per_token": {
            "type": "string",
            "title": "Cost Per Token",
            "description": "Cost per token"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Timestamp of usage"
          }
        },
        "type": "object",
        "required": [
          "usage_id",
          "cost_usd",
          "efficiency_score",
          "cost_per_token",
          "timestamp"
        ],
        "title": "CostTrackingResponse",
        "description": "Response model for cost tracking."
      },
      "CostTrendsResponse": {
        "properties": {
          "trends": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Trends",
            "description": "Cost trends over time"
          },
          "growth_rate": {
            "type": "number",
            "title": "Growth Rate",
            "description": "Cost growth rate percentage"
          },
          "seasonal_patterns": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Seasonal Patterns",
            "description": "Seasonal usage patterns"
          },
          "anomalies": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Anomalies",
            "description": "Cost anomalies detected"
          }
        },
        "type": "object",
        "required": [
          "trends",
          "growth_rate",
          "seasonal_patterns",
          "anomalies"
        ],
        "title": "CostTrendsResponse",
        "description": "Response model for cost trends."
      },
      "CreateConversationRequest": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Optional conversation title"
          },
          "initial_message": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2000
              },
              {
                "type": "null"
              }
            ],
            "title": "Initial Message",
            "description": "Optional initial message"
          }
        },
        "type": "object",
        "title": "CreateConversationRequest",
        "description": "Request schema for creating a new conversation."
      },
      "CreateScheduleRequest": {
        "properties": {
          "business_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Business Profile Id"
          },
          "report_type": {
            "type": "string",
            "title": "Report Type"
          },
          "frequency": {
            "type": "string",
            "pattern": "^(daily|weekly|monthly)$",
            "title": "Frequency"
          },
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "minItems": 1,
            "title": "Recipients"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "schedule_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Schedule Config"
          }
        },
        "type": "object",
        "required": [
          "business_profile_id",
          "report_type",
          "frequency",
          "recipients"
        ],
        "title": "CreateScheduleRequest",
        "description": "Request model for creating a scheduled report"
      },
      "CustomizationLevel": {
        "type": "string",
        "enum": [
          "basic",
          "standard",
          "detailed",
          "comprehensive"
        ],
        "title": "CustomizationLevel",
        "description": "Levels of policy customization"
      },
      "DataAccessRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "access_type": {
            "type": "string",
            "title": "Access Type"
          },
          "business_profile_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Profile Id"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "access_type"
        ],
        "title": "DataAccessRequest"
      },
      "DataAccessResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "access_type": {
            "type": "string",
            "title": "Access Type"
          },
          "business_profile_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Profile Id"
          },
          "granted_at": {
            "type": "string",
            "title": "Granted At"
          },
          "granted_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Granted By"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "access_type",
          "granted_at",
          "is_active"
        ],
        "title": "DataAccessResponse"
      },
      "DatabasePerformanceResponse": {
        "properties": {
          "connection_pool_size": {
            "type": "integer",
            "title": "Connection Pool Size"
          },
          "active_connections": {
            "type": "integer",
            "title": "Active Connections"
          },
          "connection_pool_utilization": {
            "type": "number",
            "title": "Connection Pool Utilization"
          },
          "avg_query_time": {
            "type": "number",
            "title": "Avg Query Time"
          },
          "slow_queries_count": {
            "type": "integer",
            "title": "Slow Queries Count"
          },
          "performance_rating": {
            "type": "string",
            "title": "Performance Rating"
          }
        },
        "type": "object",
        "required": [
          "connection_pool_size",
          "active_connections",
          "connection_pool_utilization",
          "avg_query_time",
          "slow_queries_count",
          "performance_rating"
        ],
        "title": "DatabasePerformanceResponse",
        "description": "Database performance metrics response."
      },
      "DuplicateCandidate": {
        "properties": {
          "candidate_id": {
            "type": "string",
            "format": "uuid",
            "title": "Candidate Id"
          },
          "candidate_name": {
            "type": "string",
            "title": "Candidate Name"
          },
          "similarity_score": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Similarity Score",
            "description": "Semantic similarity score"
          },
          "similarity_type": {
            "type": "string",
            "title": "Similarity Type",
            "description": "Type of similarity detected"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning",
            "description": "AI reasoning for similarity"
          },
          "recommendation": {
            "type": "string",
            "title": "Recommendation",
            "description": "Recommended action"
          }
        },
        "type": "object",
        "required": [
          "candidate_id",
          "candidate_name",
          "similarity_score",
          "similarity_type",
          "reasoning",
          "recommendation"
        ],
        "title": "DuplicateCandidate",
        "description": "Potential duplicate evidence candidate."
      },
      "DuplicateDetectionRequest": {
        "properties": {
          "evidence_id": {
            "type": "string",
            "format": "uuid",
            "title": "Evidence Id",
            "description": "ID of evidence to check for duplicates"
          },
          "similarity_threshold": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 50.0,
            "title": "Similarity Threshold",
            "description": "Minimum similarity threshold",
            "default": 80.0
          },
          "max_candidates": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Max Candidates",
            "description": "Maximum number of candidates to check",
            "default": 20
          }
        },
        "type": "object",
        "required": [
          "evidence_id"
        ],
        "title": "DuplicateDetectionRequest",
        "description": "Request schema for duplicate detection."
      },
      "DuplicateDetectionResponse": {
        "properties": {
          "evidence_id": {
            "type": "string",
            "format": "uuid",
            "title": "Evidence Id"
          },
          "evidence_name": {
            "type": "string",
            "title": "Evidence Name"
          },
          "duplicates_found": {
            "type": "integer",
            "title": "Duplicates Found",
            "description": "Number of potential duplicates found"
          },
          "duplicates": {
            "items": {
              "$ref": "#/components/schemas/DuplicateCandidate"
            },
            "type": "array",
            "title": "Duplicates"
          },
          "analysis_timestamp": {
            "type": "string",
            "title": "Analysis Timestamp",
            "description": "ISO timestamp of analysis"
          }
        },
        "type": "object",
        "required": [
          "evidence_id",
          "evidence_name",
          "duplicates_found",
          "duplicates",
          "analysis_timestamp"
        ],
        "title": "DuplicateDetectionResponse",
        "description": "Response schema for duplicate detection."
      },
      "DuplicateGroup": {
        "properties": {
          "primary_evidence": {
            "additionalProperties": true,
            "type": "object",
            "title": "Primary Evidence",
            "description": "Primary evidence item info"
          },
          "duplicates": {
            "items": {
              "$ref": "#/components/schemas/DuplicateCandidate"
            },
            "type": "array",
            "title": "Duplicates"
          },
          "group_size": {
            "type": "integer",
            "title": "Group Size",
            "description": "Total items in duplicate group"
          },
          "highest_similarity": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Highest Similarity",
            "description": "Highest similarity score in group"
          }
        },
        "type": "object",
        "required": [
          "primary_evidence",
          "duplicates",
          "group_size",
          "highest_similarity"
        ],
        "title": "DuplicateGroup",
        "description": "Group of duplicate evidence items."
      },
      "EvidenceAutomationResponse": {
        "properties": {
          "configuration_successful": {
            "type": "boolean",
            "title": "Configuration Successful"
          },
          "automation_enabled": {
            "type": "boolean",
            "title": "Automation Enabled"
          },
          "test_connection": {
            "type": "boolean",
            "title": "Test Connection"
          },
          "next_collection": {
            "type": "string",
            "title": "Next Collection"
          }
        },
        "type": "object",
        "required": [
          "configuration_successful",
          "automation_enabled",
          "test_connection",
          "next_collection"
        ],
        "title": "EvidenceAutomationResponse",
        "description": "Response schema for evidence automation configuration."
      },
      "EvidenceBulkUpdate": {
        "properties": {
          "evidence_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Evidence Ids"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          }
        },
        "type": "object",
        "required": [
          "evidence_ids",
          "status"
        ],
        "title": "EvidenceBulkUpdate",
        "description": "Schema for bulk updating evidence items."
      },
      "EvidenceBulkUpdateResponse": {
        "properties": {
          "updated_count": {
            "type": "integer",
            "title": "Updated Count"
          },
          "failed_count": {
            "type": "integer",
            "title": "Failed Count"
          },
          "failed_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failed Ids"
          }
        },
        "type": "object",
        "required": [
          "updated_count",
          "failed_count"
        ],
        "title": "EvidenceBulkUpdateResponse",
        "description": "Schema for bulk update response."
      },
      "EvidenceClassificationRequest": {
        "properties": {
          "evidence_id": {
            "type": "string",
            "format": "uuid",
            "title": "Evidence Id",
            "description": "ID of the evidence to classify"
          },
          "force_reclassify": {
            "type": "boolean",
            "title": "Force Reclassify",
            "description": "Force reclassification even if already classified",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "evidence_id"
        ],
        "title": "EvidenceClassificationRequest",
        "description": "Request schema for evidence classification."
      },
      "EvidenceClassificationResponse": {
        "properties": {
          "evidence_id": {
            "type": "string",
            "format": "uuid",
            "title": "Evidence Id"
          },
          "current_type": {
            "type": "string",
            "title": "Current Type"
          },
          "ai_classification": {
            "additionalProperties": true,
            "type": "object",
            "title": "Ai Classification",
            "description": "AI classification results"
          },
          "apply_suggestion": {
            "type": "boolean",
            "title": "Apply Suggestion",
            "description": "Whether to apply the AI suggestion"
          },
          "confidence": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Confidence",
            "description": "Classification confidence score"
          },
          "suggested_controls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Suggested Controls",
            "description": "Suggested compliance controls"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning",
            "description": "AI reasoning for classification"
          }
        },
        "type": "object",
        "required": [
          "evidence_id",
          "current_type",
          "ai_classification",
          "apply_suggestion",
          "confidence",
          "reasoning"
        ],
        "title": "EvidenceClassificationResponse",
        "description": "Response schema for evidence classification."
      },
      "EvidenceCollectionResponse": {
        "properties": {
          "collection_id": {
            "type": "string",
            "title": "Collection Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "estimated_duration": {
            "type": "string",
            "title": "Estimated Duration"
          },
          "evidence_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Evidence Types"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "collection_id",
          "status",
          "message",
          "estimated_duration",
          "evidence_types",
          "created_at"
        ],
        "title": "EvidenceCollectionResponse"
      },
      "EvidenceCollectionStatus": {
        "properties": {
          "collection_id": {
            "type": "string",
            "title": "Collection Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress_percentage": {
            "type": "number",
            "title": "Progress Percentage"
          },
          "evidence_collected": {
            "type": "integer",
            "title": "Evidence Collected"
          },
          "total_expected": {
            "type": "integer",
            "title": "Total Expected"
          },
          "quality_score": {
            "type": "number",
            "title": "Quality Score"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "estimated_completion": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Completion"
          },
          "current_activity": {
            "type": "string",
            "title": "Current Activity"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "collection_id",
          "status",
          "progress_percentage",
          "evidence_collected",
          "total_expected",
          "quality_score",
          "started_at",
          "estimated_completion",
          "current_activity",
          "errors"
        ],
        "title": "EvidenceCollectionStatus"
      },
      "EvidenceCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Title",
            "description": "A descriptive title for the evidence."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2000
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A detailed description of the evidence content."
          },
          "control_id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Control Id",
            "description": "The specific control ID this evidence addresses (e.g., 'AC-1')."
          },
          "framework_id": {
            "type": "string",
            "format": "uuid",
            "title": "Framework Id",
            "description": "The compliance framework this evidence belongs to."
          },
          "business_profile_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Profile Id",
            "description": "The business profile this evidence is associated with (auto-populated if not provided)."
          },
          "source": {
            "type": "string",
            "minLength": 1,
            "title": "Source",
            "description": "The source of the evidence (e.g., 'manual_upload', 'integration:jira').",
            "default": "manual_upload"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Keywords for searching and filtering."
          },
          "evidence_type": {
            "type": "string",
            "title": "Evidence Type",
            "description": "The type of evidence (e.g., 'document', 'policy_document', 'screenshot', 'log_file').",
            "default": "document"
          }
        },
        "type": "object",
        "required": [
          "title",
          "control_id",
          "framework_id"
        ],
        "title": "EvidenceCreate"
      },
      "EvidenceDashboardResponse": {
        "properties": {
          "total_items": {
            "type": "integer",
            "title": "Total Items"
          },
          "status_counts": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Status Counts"
          },
          "completion_percentage": {
            "type": "number",
            "title": "Completion Percentage"
          },
          "recently_updated": {
            "items": {
              "$ref": "#/components/schemas/RecentEvidenceItem"
            },
            "type": "array",
            "title": "Recently Updated"
          }
        },
        "type": "object",
        "required": [
          "total_items",
          "status_counts",
          "completion_percentage",
          "recently_updated"
        ],
        "title": "EvidenceDashboardResponse"
      },
      "EvidenceRecommendationRequest": {
        "properties": {
          "framework": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Framework",
            "description": "Specific framework to get recommendations for"
          }
        },
        "type": "object",
        "title": "EvidenceRecommendationRequest",
        "description": "Request schema for getting evidence recommendations."
      },
      "EvidenceRecommendationResponse": {
        "properties": {
          "framework": {
            "type": "string",
            "title": "Framework"
          },
          "recommendations": {
            "type": "string",
            "title": "Recommendations"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          }
        },
        "type": "object",
        "required": [
          "framework",
          "recommendations",
          "generated_at"
        ],
        "title": "EvidenceRecommendationResponse",
        "description": "Response schema for evidence recommendations."
      },
      "EvidenceRequirement": {
        "properties": {
          "control_id": {
            "type": "string",
            "title": "Control Id"
          },
          "evidence_type": {
            "type": "string",
            "title": "Evidence Type"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "automation_possible": {
            "type": "boolean",
            "title": "Automation Possible"
          }
        },
        "type": "object",
        "required": [
          "control_id",
          "evidence_type",
          "title",
          "description",
          "automation_possible"
        ],
        "title": "EvidenceRequirement",
        "description": "Individual evidence requirement."
      },
      "EvidenceRequirementsResponse": {
        "properties": {
          "requirements": {
            "items": {
              "$ref": "#/components/schemas/EvidenceRequirement"
            },
            "type": "array",
            "title": "Requirements"
          }
        },
        "type": "object",
        "required": [
          "requirements"
        ],
        "title": "EvidenceRequirementsResponse",
        "description": "Response schema for evidence requirements."
      },
      "EvidenceResponse": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Title",
            "description": "A descriptive title for the evidence."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2000
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A detailed description of the evidence content."
          },
          "control_id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Control Id",
            "description": "The specific control ID this evidence addresses (e.g., 'AC-1')."
          },
          "framework_id": {
            "type": "string",
            "format": "uuid",
            "title": "Framework Id",
            "description": "The compliance framework this evidence belongs to."
          },
          "business_profile_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Business Profile Id",
            "description": "The business profile this evidence is associated with (auto-populated if not provided)."
          },
          "source": {
            "type": "string",
            "minLength": 1,
            "title": "Source",
            "description": "The source of the evidence (e.g., 'manual_upload', 'integration:jira').",
            "default": "manual_upload"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Keywords for searching and filtering."
          },
          "evidence_type": {
            "type": "string",
            "title": "Evidence Type",
            "description": "The type of evidence (e.g., 'document', 'policy_document', 'screenshot', 'log_file').",
            "default": "document"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "file_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Path"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "title",
          "control_id",
          "framework_id",
          "id",
          "user_id",
          "file_path",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "EvidenceResponse"
      },
      "EvidenceSearchResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/EvidenceSearchResult"
            },
            "type": "array",
            "title": "Results"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          }
        },
        "type": "object",
        "required": [
          "results",
          "total_count",
          "page",
          "page_size"
        ],
        "title": "EvidenceSearchResponse",
        "description": "Response schema for evidence search."
      },
      "EvidenceSearchResult": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "evidence_type": {
            "type": "string",
            "title": "Evidence Type"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "relevance_score": {
            "type": "number",
            "title": "Relevance Score"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "description",
          "evidence_type",
          "status",
          "relevance_score",
          "created_at",
          "updated_at"
        ],
        "title": "EvidenceSearchResult",
        "description": "Individual search result item."
      },
      "EvidenceStatisticsResponse": {
        "properties": {
          "total_evidence_items": {
            "type": "integer",
            "title": "Total Evidence Items"
          },
          "by_status": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "By Status"
          },
          "by_type": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "By Type"
          },
          "by_framework": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "By Framework"
          },
          "average_quality_score": {
            "type": "number",
            "title": "Average Quality Score"
          }
        },
        "type": "object",
        "required": [
          "total_evidence_items",
          "by_status",
          "by_type",
          "by_framework",
          "average_quality_score"
        ],
        "title": "EvidenceStatisticsResponse",
        "description": "Response schema for evidence statistics."
      },
      "EvidenceTaskResponse": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "framework": {
            "type": "string",
            "title": "Framework"
          },
          "control_id": {
            "type": "string",
            "title": "Control Id"
          },
          "evidence_type": {
            "type": "string",
            "title": "Evidence Type"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "priority": {
            "type": "string",
            "title": "Priority"
          },
          "automation_level": {
            "type": "string",
            "title": "Automation Level"
          },
          "estimated_effort_hours": {
            "type": "number",
            "title": "Estimated Effort Hours"
          },
          "dependencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Dependencies",
            "default": []
          },
          "assigned_to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assigned To"
          },
          "due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Due Date"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "framework",
          "control_id",
          "evidence_type",
          "title",
          "description",
          "priority",
          "automation_level",
          "estimated_effort_hours",
          "status",
          "created_at"
        ],
        "title": "EvidenceTaskResponse",
        "description": "Response model for an evidence collection task."
      },
      "EvidenceUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "A descriptive title for the evidence."
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2000
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A detailed description of the evidence content."
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "The review status of the evidence."
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Keywords for searching and filtering."
          },
          "evidence_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Evidence Type",
            "description": "The type of evidence."
          }
        },
        "type": "object",
        "title": "EvidenceUpdate"
      },
      "EvidenceValidationResult": {
        "properties": {
          "quality_score": {
            "type": "integer",
            "title": "Quality Score"
          },
          "validation_results": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Validation Results"
          },
          "issues": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Issues"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations"
          }
        },
        "type": "object",
        "required": [
          "quality_score",
          "validation_results",
          "issues",
          "recommendations"
        ],
        "title": "EvidenceValidationResult",
        "description": "Response schema for evidence validation."
      },
      "FoundationEvidenceRequest": {
        "properties": {
          "framework_id": {
            "type": "string",
            "title": "Framework Id"
          },
          "business_profile": {
            "additionalProperties": true,
            "type": "object",
            "title": "Business Profile"
          },
          "evidence_types": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Evidence Types"
          },
          "collection_mode": {
            "type": "string",
            "title": "Collection Mode",
            "default": "immediate"
          },
          "quality_requirements": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality Requirements"
          }
        },
        "type": "object",
        "required": [
          "framework_id",
          "business_profile"
        ],
        "title": "FoundationEvidenceRequest"
      },
      "FrameworkCategory": {
        "type": "string",
        "enum": [
          "Data Protection",
          "Financial Services",
          "Healthcare",
          "Cybersecurity",
          "General"
        ],
        "title": "FrameworkCategory",
        "description": "Categories of compliance frameworks"
      },
      "FrameworkInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FrameworkInfo"
      },
      "FrameworkListResponse": {
        "properties": {
          "frameworks": {
            "items": {
              "$ref": "#/components/schemas/FrameworkResponse"
            },
            "type": "array",
            "title": "Frameworks"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "filtered_count": {
            "type": "integer",
            "title": "Filtered Count"
          },
          "region": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "frameworks",
          "total_count",
          "filtered_count"
        ],
        "title": "FrameworkListResponse",
        "description": "Response schema for framework list"
      },
      "FrameworkLoadRequest": {
        "properties": {
          "frameworks": {
            "items": {
              "$ref": "#/components/schemas/UKFrameworkSchema"
            },
            "type": "array",
            "title": "Frameworks"
          },
          "overwrite_existing": {
            "type": "boolean",
            "title": "Overwrite Existing",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "frameworks"
        ],
        "title": "FrameworkLoadRequest",
        "description": "Request schema for bulk loading frameworks"
      },
      "FrameworkLoadResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "loaded_count": {
            "type": "integer",
            "title": "Loaded Count"
          },
          "skipped_count": {
            "type": "integer",
            "title": "Skipped Count"
          },
          "error_count": {
            "type": "integer",
            "title": "Error Count"
          },
          "loaded_frameworks": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Loaded Frameworks"
          },
          "skipped_frameworks": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Skipped Frameworks"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Errors"
          },
          "total_processed": {
            "type": "integer",
            "title": "Total Processed"
          }
        },
        "type": "object",
        "required": [
          "success",
          "loaded_count",
          "skipped_count",
          "error_count",
          "loaded_frameworks",
          "skipped_frameworks",
          "errors",
          "total_processed"
        ],
        "title": "FrameworkLoadResponse",
        "description": "Response schema for framework loading result"
      },
      "FrameworkRecommendation": {
        "properties": {
          "framework": {
            "$ref": "#/components/schemas/ComplianceFrameworkResponse"
          },
          "relevance_score": {
            "type": "number",
            "title": "Relevance Score"
          },
          "reasons": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasons",
            "default": []
          },
          "priority": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority",
            "default": "medium"
          }
        },
        "type": "object",
        "required": [
          "framework",
          "relevance_score"
        ],
        "title": "FrameworkRecommendation"
      },
      "FrameworkResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "geographic_scope": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Geographic Scope"
          },
          "complexity_score": {
            "type": "integer",
            "title": "Complexity Score"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "display_name",
          "description",
          "category",
          "geographic_scope",
          "complexity_score",
          "version",
          "is_active",
          "created_at",
          "updated_at"
        ],
        "title": "FrameworkResponse",
        "description": "Response schema for framework data"
      },
      "Gap": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "section": {
            "type": "string",
            "title": "Section"
          },
          "severity": {
            "type": "string",
            "title": "Severity"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "impact": {
            "type": "string",
            "title": "Impact"
          },
          "current_state": {
            "type": "string",
            "title": "Current State"
          },
          "target_state": {
            "type": "string",
            "title": "Target State"
          }
        },
        "type": "object",
        "required": [
          "id",
          "section",
          "severity",
          "description",
          "impact",
          "current_state",
          "target_state"
        ],
        "title": "Gap"
      },
      "GeneratedPolicyResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "policy_name": {
            "type": "string",
            "title": "Policy Name"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "policy_name",
          "content",
          "status",
          "created_at"
        ],
        "title": "GeneratedPolicyResponse"
      },
      "GeographicRegion": {
        "type": "string",
        "enum": [
          "UK",
          "England",
          "Scotland",
          "Wales",
          "Northern Ireland",
          "EU",
          "Global"
        ],
        "title": "GeographicRegion",
        "description": "Geographic regions for frameworks"
      },
      "GoogleAuthResponse": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/api__schemas__models__UserResponse"
          },
          "tokens": {
            "$ref": "#/components/schemas/Token"
          },
          "is_new_user": {
            "type": "boolean",
            "title": "Is New User"
          }
        },
        "type": "object",
        "required": [
          "user",
          "tokens",
          "is_new_user"
        ],
        "title": "GoogleAuthResponse",
        "description": "Response from Google OAuth login"
      },
      "GoogleWorkspaceConfigurationRequest": {
        "properties": {
          "domain": {
            "type": "string",
            "title": "Domain"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": [
          "domain",
          "client_id",
          "client_secret",
          "refresh_token"
        ],
        "title": "GoogleWorkspaceConfigurationRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Service status (healthy, warning, degraded, error)"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "Status message"
          },
          "timestamp": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timestamp",
            "description": "Check timestamp"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "API version",
            "default": "1.0.0"
          },
          "database": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Database",
            "description": "Database monitoring data"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "HealthCheckResponse",
        "description": "Health check response with database monitoring"
      },
      "ImplementationPhase": {
        "properties": {
          "phase_number": {
            "type": "integer",
            "title": "Phase Number"
          },
          "phase_name": {
            "type": "string",
            "title": "Phase Name"
          },
          "duration_weeks": {
            "type": "integer",
            "title": "Duration Weeks"
          },
          "tasks": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tasks"
          },
          "dependencies": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Dependencies"
          }
        },
        "type": "object",
        "required": [
          "phase_number",
          "phase_name",
          "duration_weeks",
          "tasks",
          "dependencies"
        ],
        "title": "ImplementationPhase"
      },
      "ImplementationPlan": {
        "properties": {
          "phases": {
            "items": {
              "$ref": "#/components/schemas/ImplementationPhase"
            },
            "type": "array",
            "title": "Phases"
          },
          "total_timeline_weeks": {
            "type": "integer",
            "title": "Total Timeline Weeks"
          },
          "resource_requirements": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Resource Requirements"
          }
        },
        "type": "object",
        "required": [
          "phases",
          "total_timeline_weeks",
          "resource_requirements"
        ],
        "title": "ImplementationPlan"
      },
      "ImplementationPlanCreate": {
        "properties": {
          "framework_id": {
            "type": "string",
            "format": "uuid",
            "title": "Framework Id"
          },
          "control_domain": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Domain",
            "description": "Control domain to focus on",
            "default": "All Domains"
          },
          "timeline_weeks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeline Weeks",
            "description": "Timeline in weeks for implementation",
            "default": 12
          }
        },
        "type": "object",
        "required": [
          "framework_id"
        ],
        "title": "ImplementationPlanCreate"
      },
      "ImplementationPlanListResponse": {
        "properties": {
          "plans": {
            "items": {
              "$ref": "#/components/schemas/ImplementationPlanResponse"
            },
            "type": "array",
            "title": "Plans"
          }
        },
        "type": "object",
        "required": [
          "plans"
        ],
        "title": "ImplementationPlanListResponse",
        "description": "Response schema for listing implementation plans."
      },
      "ImplementationPlanResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "business_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Business Profile Id"
          },
          "framework_id": {
            "type": "string",
            "format": "uuid",
            "title": "Framework Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "phases": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Phases"
          },
          "planned_start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Planned Start Date"
          },
          "planned_end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Planned End Date"
          },
          "actual_start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Actual Start Date"
          },
          "actual_end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Actual End Date"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "total_phases": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Phases"
          },
          "total_tasks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Tasks"
          },
          "estimated_duration_weeks": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Duration Weeks"
          },
          "tasks": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tasks"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "business_profile_id",
          "framework_id",
          "title",
          "status",
          "phases",
          "created_at",
          "updated_at"
        ],
        "title": "ImplementationPlanResponse"
      },
      "ImplementationTaskUpdate": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "New status of the task (e.g., 'pending', 'in_progress', 'completed', 'blocked')"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes for the task update."
          },
          "assignee_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assignee Id",
            "description": "ID of the user assigned to the task."
          },
          "due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Due Date",
            "description": "New due date for the task."
          },
          "completion_percentage": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Completion Percentage",
            "description": "Percentage of task completion."
          }
        },
        "type": "object",
        "title": "ImplementationTaskUpdate"
      },
      "IntegrationCredentials": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "credentials": {
            "additionalProperties": true,
            "type": "object",
            "title": "Credentials"
          },
          "settings": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Settings"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "credentials"
        ],
        "title": "IntegrationCredentials"
      },
      "IntegrationResponse": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "is_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Enabled"
          },
          "last_sync_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Sync At"
          },
          "last_sync_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Sync Status"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "status"
        ],
        "title": "IntegrationResponse"
      },
      "LeadCaptureRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "company_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Name"
          },
          "company_size": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(1-10|11-50|51-200|201-500|500+)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Size"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 20
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "utm_source": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Utm Source"
          },
          "utm_medium": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Utm Medium"
          },
          "utm_campaign": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Utm Campaign"
          },
          "utm_term": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Utm Term"
          },
          "utm_content": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200
              },
              {
                "type": "null"
              }
            ],
            "title": "Utm Content"
          },
          "referrer_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Referrer Url"
          },
          "landing_page": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Landing Page"
          },
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent"
          },
          "marketing_consent": {
            "type": "boolean",
            "title": "Marketing Consent",
            "default": false
          },
          "newsletter_subscribed": {
            "type": "boolean",
            "title": "Newsletter Subscribed",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "LeadCaptureRequest",
        "description": "Schema for email capture and lead generation."
      },
      "LeadResponse": {
        "properties": {
          "lead_id": {
            "type": "string",
            "format": "uuid",
            "title": "Lead Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "lead_score": {
            "type": "integer",
            "title": "Lead Score"
          },
          "lead_status": {
            "type": "string",
            "title": "Lead Status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "lead_id",
          "email",
          "lead_score",
          "lead_status",
          "created_at"
        ],
        "title": "LeadResponse",
        "description": "Response schema for lead capture."
      },
      "LoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "LoginRequest"
      },
      "MessageResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "role": {
            "type": "string",
            "pattern": "^(user|assistant)$",
            "title": "Role"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "message_metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message Metadata"
          },
          "sequence_number": {
            "type": "integer",
            "title": "Sequence Number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "role",
          "content",
          "sequence_number",
          "created_at"
        ],
        "title": "MessageResponse",
        "description": "Response schema for a chat message."
      },
      "MicrosoftConfigurationRequest": {
        "properties": {
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": [
          "tenant_id",
          "client_id",
          "client_secret"
        ],
        "title": "MicrosoftConfigurationRequest"
      },
      "ModelRoutingRequest": {
        "properties": {
          "task_description": {
            "type": "string",
            "title": "Task Description",
            "description": "Description of the task"
          },
          "task_type": {
            "type": "string",
            "title": "Task Type",
            "description": "Type of task"
          },
          "max_cost_per_request": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Cost Per Request",
            "description": "Maximum cost constraint"
          },
          "quality_requirements": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality Requirements",
            "description": "Quality requirements"
          }
        },
        "type": "object",
        "required": [
          "task_description",
          "task_type"
        ],
        "title": "ModelRoutingRequest",
        "description": "Request model for intelligent model routing."
      },
      "ModelRoutingResponse": {
        "properties": {
          "recommended_model": {
            "type": "string",
            "title": "Recommended Model",
            "description": "Recommended model"
          },
          "alternative_models": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Alternative Models",
            "description": "Alternative models"
          },
          "estimated_cost": {
            "type": "string",
            "title": "Estimated Cost",
            "description": "Estimated cost for recommended model"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning",
            "description": "Reasoning for recommendation"
          },
          "complexity_score": {
            "type": "number",
            "title": "Complexity Score",
            "description": "Task complexity score"
          }
        },
        "type": "object",
        "required": [
          "recommended_model",
          "alternative_models",
          "estimated_cost",
          "reasoning",
          "complexity_score"
        ],
        "title": "ModelRoutingResponse",
        "description": "Response model for model routing recommendations."
      },
      "ModelSelectionRequest": {
        "properties": {
          "task_type": {
            "type": "string",
            "title": "Task Type"
          },
          "complexity": {
            "type": "string",
            "title": "Complexity",
            "default": "medium"
          },
          "prefer_speed": {
            "type": "boolean",
            "title": "Prefer Speed",
            "default": false
          },
          "context": {
            "additionalProperties": true,
            "type": "object",
            "title": "Context",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "task_type"
        ],
        "title": "ModelSelectionRequest"
      },
      "OktaConfigurationRequest": {
        "properties": {
          "domain": {
            "type": "string",
            "title": "Domain"
          },
          "api_token": {
            "type": "string",
            "title": "Api Token"
          }
        },
        "type": "object",
        "required": [
          "domain",
          "api_token"
        ],
        "title": "OktaConfigurationRequest"
      },
      "OptimizationRecommendation": {
        "properties": {
          "category": {
            "type": "string",
            "title": "Category"
          },
          "priority": {
            "type": "string",
            "title": "Priority"
          },
          "issue": {
            "type": "string",
            "title": "Issue"
          },
          "recommendation": {
            "type": "string",
            "title": "Recommendation"
          },
          "current_value": {
            "type": "string",
            "title": "Current Value"
          },
          "suggested_value": {
            "type": "string",
            "title": "Suggested Value"
          },
          "impact": {
            "type": "string",
            "title": "Impact"
          }
        },
        "type": "object",
        "required": [
          "category",
          "priority",
          "issue",
          "recommendation",
          "current_value",
          "suggested_value",
          "impact"
        ],
        "title": "OptimizationRecommendation",
        "description": "Performance optimization recommendation."
      },
      "OptimizationResponse": {
        "properties": {
          "strategy": {
            "type": "string",
            "title": "Strategy",
            "description": "Optimization strategy"
          },
          "recommendation": {
            "type": "string",
            "title": "Recommendation",
            "description": "Detailed recommendation"
          },
          "potential_savings": {
            "type": "string",
            "title": "Potential Savings",
            "description": "Potential savings in USD"
          },
          "confidence_score": {
            "type": "number",
            "title": "Confidence Score",
            "description": "Confidence in recommendation (0-1)"
          },
          "implementation_effort": {
            "type": "string",
            "title": "Implementation Effort",
            "description": "Implementation effort (low/medium/high)"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "description": "Priority level (low/medium/high)"
          }
        },
        "type": "object",
        "required": [
          "strategy",
          "recommendation",
          "potential_savings",
          "confidence_score",
          "implementation_effort",
          "priority"
        ],
        "title": "OptimizationResponse",
        "description": "Response model for optimization recommendations."
      },
      "PerformanceOverview": {
        "properties": {
          "performance_score": {
            "type": "number",
            "title": "Performance Score"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "critical_issues": {
            "type": "integer",
            "title": "Critical Issues"
          },
          "recommendations_count": {
            "type": "integer",
            "title": "Recommendations Count"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "performance_score",
          "status",
          "critical_issues",
          "recommendations_count",
          "last_updated"
        ],
        "title": "PerformanceOverview",
        "description": "Performance overview response model."
      },
      "PerformanceTrendsResponse": {
        "properties": {
          "hours": {
            "type": "integer",
            "title": "Hours"
          },
          "data_points": {
            "type": "integer",
            "title": "Data Points"
          },
          "trends": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "number"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Trends"
          }
        },
        "type": "object",
        "required": [
          "hours",
          "data_points",
          "trends"
        ],
        "title": "PerformanceTrendsResponse",
        "description": "Performance trends response."
      },
      "PolicyGenerateRequest": {
        "properties": {
          "framework_id": {
            "type": "string",
            "format": "uuid",
            "title": "Framework Id",
            "description": "The ID of the compliance framework."
          },
          "policy_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policy Type",
            "description": "The type of policy to generate.",
            "default": "comprehensive"
          },
          "custom_requirements": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Requirements",
            "description": "A list of custom requirements to include."
          }
        },
        "type": "object",
        "required": [
          "framework_id"
        ],
        "title": "PolicyGenerateRequest"
      },
      "PolicyGenerationMetrics": {
        "properties": {
          "total_policies_generated": {
            "type": "integer",
            "title": "Total Policies Generated",
            "default": 0
          },
          "success_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Success Rate",
            "default": 0.0
          },
          "average_generation_time_ms": {
            "type": "number",
            "title": "Average Generation Time Ms",
            "default": 0.0
          },
          "cache_hit_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Cache Hit Rate",
            "default": 0.0
          },
          "provider_metrics": {
            "items": {
              "$ref": "#/components/schemas/AIProviderMetrics"
            },
            "type": "array",
            "title": "Provider Metrics"
          },
          "circuit_breaker_status": {
            "$ref": "#/components/schemas/CircuitBreakerStatus"
          },
          "cost_savings_percentage": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Cost Savings Percentage",
            "default": 0.0
          },
          "monthly_cost_trend": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Monthly Cost Trend"
          }
        },
        "type": "object",
        "required": [
          "circuit_breaker_status"
        ],
        "title": "PolicyGenerationMetrics",
        "description": "Overall policy generation metrics"
      },
      "PolicyGenerationRequest": {
        "properties": {
          "framework_id": {
            "type": "string",
            "title": "Framework Id",
            "description": "ID of the compliance framework"
          },
          "business_context": {
            "$ref": "#/components/schemas/BusinessContext"
          },
          "policy_type": {
            "$ref": "#/components/schemas/PolicyType"
          },
          "customization_level": {
            "$ref": "#/components/schemas/CustomizationLevel",
            "default": "standard"
          },
          "target_audience": {
            "$ref": "#/components/schemas/TargetAudience",
            "default": "general_public"
          },
          "include_templates": {
            "type": "boolean",
            "title": "Include Templates",
            "default": true
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "Policy language (ISO 639-1)",
            "default": "en-GB"
          }
        },
        "type": "object",
        "required": [
          "framework_id",
          "business_context",
          "policy_type"
        ],
        "title": "PolicyGenerationRequest",
        "description": "Request schema for policy generation"
      },
      "PolicyGenerationResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "policy_content": {
            "type": "string",
            "title": "Policy Content"
          },
          "confidence_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence Score"
          },
          "provider_used": {
            "type": "string",
            "title": "Provider Used"
          },
          "generated_sections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Generated Sections"
          },
          "compliance_checklist": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Compliance Checklist"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "fallback_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fallback Content"
          },
          "was_cached": {
            "type": "boolean",
            "title": "Was Cached",
            "default": false
          },
          "generation_time_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Generation Time Ms"
          },
          "validation_result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PolicyValidationResult"
              },
              {
                "type": "null"
              }
            ]
          },
          "estimated_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Cost"
          },
          "tokens_used": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tokens Used"
          }
        },
        "type": "object",
        "required": [
          "success",
          "policy_content",
          "confidence_score",
          "provider_used",
          "generated_sections",
          "compliance_checklist"
        ],
        "title": "PolicyGenerationResponse",
        "description": "Response schema for policy generation"
      },
      "PolicyListResponse": {
        "properties": {
          "policies": {
            "items": {
              "$ref": "#/components/schemas/GeneratedPolicyResponse"
            },
            "type": "array",
            "title": "Policies"
          }
        },
        "type": "object",
        "required": [
          "policies"
        ],
        "title": "PolicyListResponse",
        "description": "Response schema for listing policies."
      },
      "PolicyRefinementRequest": {
        "properties": {
          "original_policy": {
            "type": "string",
            "minLength": 50,
            "title": "Original Policy"
          },
          "feedback": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 10,
            "minItems": 1,
            "title": "Feedback"
          },
          "framework_id": {
            "type": "string",
            "title": "Framework Id"
          },
          "refinement_type": {
            "type": "string",
            "pattern": "^(general|legal|technical|formatting)$",
            "title": "Refinement Type",
            "default": "general"
          }
        },
        "type": "object",
        "required": [
          "original_policy",
          "feedback",
          "framework_id"
        ],
        "title": "PolicyRefinementRequest",
        "description": "Request schema for policy refinement"
      },
      "PolicyRefinementResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "refined_content": {
            "type": "string",
            "title": "Refined Content"
          },
          "changes_made": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Changes Made"
          },
          "confidence_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Confidence Score"
          },
          "provider_used": {
            "type": "string",
            "title": "Provider Used"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          },
          "generation_time_ms": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Generation Time Ms"
          },
          "estimated_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Cost"
          }
        },
        "type": "object",
        "required": [
          "success",
          "refined_content",
          "changes_made",
          "confidence_score",
          "provider_used"
        ],
        "title": "PolicyRefinementResponse",
        "description": "Response schema for policy refinement"
      },
      "PolicyTemplate": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "policy_type": {
            "$ref": "#/components/schemas/PolicyType"
          },
          "framework_compatibility": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Framework Compatibility"
          },
          "sections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sections"
          },
          "customization_options": {
            "additionalProperties": true,
            "type": "object",
            "title": "Customization Options"
          },
          "language": {
            "type": "string",
            "title": "Language",
            "default": "en-GB"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "policy_type",
          "framework_compatibility",
          "sections",
          "customization_options"
        ],
        "title": "PolicyTemplate",
        "description": "Schema for policy templates"
      },
      "PolicyTemplatesResponse": {
        "properties": {
          "templates": {
            "items": {
              "$ref": "#/components/schemas/PolicyTemplate"
            },
            "type": "array",
            "title": "Templates"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "supported_frameworks": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Frameworks"
          },
          "supported_languages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Supported Languages"
          }
        },
        "type": "object",
        "required": [
          "templates",
          "total_count",
          "supported_frameworks",
          "supported_languages"
        ],
        "title": "PolicyTemplatesResponse",
        "description": "Response schema for available policy templates"
      },
      "PolicyType": {
        "type": "string",
        "enum": [
          "privacy_policy",
          "information_security_policy",
          "data_retention_policy",
          "incident_response_policy",
          "access_control_policy",
          "business_continuity_policy"
        ],
        "title": "PolicyType",
        "description": "Types of policies that can be generated"
      },
      "PolicyValidationResult": {
        "properties": {
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "compliance_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Compliance Score"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Errors"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings"
          },
          "suggestions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Suggestions"
          },
          "missing_sections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Missing Sections"
          }
        },
        "type": "object",
        "required": [
          "is_valid",
          "compliance_score"
        ],
        "title": "PolicyValidationResult",
        "description": "Result of policy validation"
      },
      "QualityAnalysisResponse": {
        "properties": {
          "evidence_id": {
            "type": "string",
            "format": "uuid",
            "title": "Evidence Id"
          },
          "evidence_name": {
            "type": "string",
            "title": "Evidence Name"
          },
          "overall_score": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Overall Score",
            "description": "Final combined quality score"
          },
          "traditional_scores": {
            "$ref": "#/components/schemas/TraditionalScoreBreakdown"
          },
          "ai_analysis": {
            "$ref": "#/components/schemas/AIAnalysisResult"
          },
          "scoring_method": {
            "type": "string",
            "title": "Scoring Method",
            "description": "Method used for scoring"
          },
          "confidence": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Confidence",
            "description": "Overall analysis confidence"
          },
          "analysis_timestamp": {
            "type": "string",
            "title": "Analysis Timestamp",
            "description": "ISO timestamp of analysis"
          }
        },
        "type": "object",
        "required": [
          "evidence_id",
          "evidence_name",
          "overall_score",
          "traditional_scores",
          "ai_analysis",
          "scoring_method",
          "confidence",
          "analysis_timestamp"
        ],
        "title": "QualityAnalysisResponse",
        "description": "Response schema for evidence quality analysis."
      },
      "QualityBenchmarkResponse": {
        "properties": {
          "user_average_score": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "User Average Score",
            "description": "User's average quality score"
          },
          "benchmark_score": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Benchmark Score",
            "description": "Benchmark average score"
          },
          "percentile_rank": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Percentile Rank",
            "description": "User's percentile rank"
          },
          "score_distribution": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Score Distribution",
            "description": "Distribution of scores"
          },
          "improvement_areas": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Improvement Areas",
            "description": "Areas for improvement"
          },
          "top_performers": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Top Performers",
            "description": "Top performing evidence examples"
          }
        },
        "type": "object",
        "required": [
          "user_average_score",
          "benchmark_score",
          "percentile_rank",
          "score_distribution"
        ],
        "title": "QualityBenchmarkResponse",
        "description": "Response schema for quality benchmarking."
      },
      "QualityScoreBreakdown": {
        "properties": {
          "completeness": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Completeness",
            "description": "Completeness score"
          },
          "clarity": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Clarity",
            "description": "Clarity score"
          },
          "currency": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Currency",
            "description": "Currency/freshness score"
          },
          "verifiability": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Verifiability",
            "description": "Verifiability score"
          },
          "relevance": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Relevance",
            "description": "Relevance score"
          },
          "sufficiency": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Sufficiency",
            "description": "Sufficiency score"
          }
        },
        "type": "object",
        "required": [
          "completeness",
          "clarity",
          "currency",
          "verifiability",
          "relevance",
          "sufficiency"
        ],
        "title": "QualityScoreBreakdown",
        "description": "Quality score breakdown by dimension."
      },
      "QualityTrendResponse": {
        "properties": {
          "period_days": {
            "type": "integer",
            "title": "Period Days",
            "description": "Analysis period in days"
          },
          "trend_direction": {
            "type": "string",
            "title": "Trend Direction",
            "description": "Overall trend direction"
          },
          "average_score_change": {
            "type": "number",
            "title": "Average Score Change",
            "description": "Change in average score"
          },
          "daily_scores": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Daily Scores",
            "description": "Daily quality score data"
          },
          "insights": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Insights",
            "description": "Key insights from trend analysis"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations",
            "description": "Recommendations based on trends"
          }
        },
        "type": "object",
        "required": [
          "period_days",
          "trend_direction",
          "average_score_change",
          "daily_scores"
        ],
        "title": "QualityTrendResponse",
        "description": "Response schema for quality trend analysis."
      },
      "QuickAssessmentRequest": {
        "properties": {
          "business_profile_id": {
            "type": "string",
            "title": "Business Profile Id"
          },
          "assessment_type": {
            "type": "string",
            "title": "Assessment Type"
          },
          "industry_standard": {
            "type": "boolean",
            "title": "Industry Standard"
          }
        },
        "type": "object",
        "required": [
          "business_profile_id",
          "assessment_type",
          "industry_standard"
        ],
        "title": "QuickAssessmentRequest"
      },
      "QuickAssessmentResponse": {
        "properties": {
          "recommendations": {
            "items": {
              "$ref": "#/components/schemas/QuickRecommendation"
            },
            "type": "array",
            "title": "Recommendations"
          }
        },
        "type": "object",
        "required": [
          "recommendations"
        ],
        "title": "QuickAssessmentResponse"
      },
      "QuickRecommendation": {
        "properties": {
          "framework": {
            "$ref": "#/components/schemas/FrameworkInfo"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "default": "medium"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "framework"
        ],
        "title": "QuickRecommendation"
      },
      "RecentEvidenceItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "control_id": {
            "type": "string",
            "title": "Control Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "control_id",
          "status",
          "updated_at"
        ],
        "title": "RecentEvidenceItem"
      },
      "Recommendation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "priority": {
            "type": "string",
            "title": "Priority"
          },
          "effort_estimate": {
            "type": "string",
            "title": "Effort Estimate"
          },
          "impact_score": {
            "type": "number",
            "title": "Impact Score"
          },
          "resources": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resources"
          },
          "implementation_steps": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Implementation Steps"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "description",
          "priority",
          "effort_estimate",
          "impact_score"
        ],
        "title": "Recommendation"
      },
      "RegisterResponse": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/api__schemas__models__UserResponse"
          },
          "tokens": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "type": "object",
        "required": [
          "user",
          "tokens"
        ],
        "title": "RegisterResponse"
      },
      "ReportRequest": {
        "properties": {
          "business_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Business Profile Id"
          },
          "report_type": {
            "type": "string",
            "title": "Report Type",
            "description": "Type of report to generate"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters",
            "description": "Report parameters"
          },
          "output_format": {
            "type": "string",
            "title": "Output Format",
            "description": "Output format (pdf, json)",
            "default": "pdf"
          },
          "template_customizations": {
            "additionalProperties": true,
            "type": "object",
            "title": "Template Customizations",
            "description": "Template customizations"
          }
        },
        "type": "object",
        "required": [
          "business_profile_id",
          "report_type"
        ],
        "title": "ReportRequest",
        "description": "Request model for report generation"
      },
      "ReportResponse": {
        "properties": {
          "report_id": {
            "type": "string",
            "title": "Report Id"
          },
          "report_type": {
            "type": "string",
            "title": "Report Type"
          },
          "generated_at": {
            "type": "string",
            "title": "Generated At"
          },
          "file_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Url"
          },
          "data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "report_id",
          "report_type",
          "generated_at"
        ],
        "title": "ReportResponse",
        "description": "Response model for report generation"
      },
      "RoleAssignmentResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "assignment_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assignment Id"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "RoleAssignmentResponse"
      },
      "RoleCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-z][a-z0-9_]*$",
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Permissions"
          }
        },
        "type": "object",
        "required": [
          "name",
          "display_name"
        ],
        "title": "RoleCreateRequest",
        "description": "Request model for creating a new role."
      },
      "RoleResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_system_role": {
            "type": "boolean",
            "title": "Is System Role"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "permissions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Permissions"
          },
          "user_count": {
            "type": "integer",
            "title": "User Count"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "display_name",
          "description",
          "is_active",
          "is_system_role",
          "created_at",
          "permissions",
          "user_count"
        ],
        "title": "RoleResponse",
        "description": "Response model for role information."
      },
      "ScheduleResponse": {
        "properties": {
          "schedule_id": {
            "type": "string",
            "title": "Schedule Id"
          },
          "business_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Business Profile Id"
          },
          "report_type": {
            "type": "string",
            "title": "Report Type"
          },
          "frequency": {
            "type": "string",
            "title": "Frequency"
          },
          "recipients": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recipients"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "active": {
            "type": "boolean",
            "title": "Active"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "schedule_id",
          "business_profile_id",
          "report_type",
          "frequency",
          "recipients",
          "parameters",
          "active",
          "created_at"
        ],
        "title": "ScheduleResponse",
        "description": "Response model for report schedules"
      },
      "SecurityTestRequest": {
        "properties": {
          "test_type": {
            "type": "string",
            "title": "Test Type"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "test_type"
        ],
        "title": "SecurityTestRequest"
      },
      "SendMessageRequest": {
        "properties": {
          "message": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Message",
            "description": "The user's message"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "SendMessageRequest",
        "description": "Request schema for sending a chat message."
      },
      "SessionResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid",
            "title": "Session Id"
          },
          "session_token": {
            "type": "string",
            "title": "Session Token"
          },
          "lead_id": {
            "type": "string",
            "format": "uuid",
            "title": "Lead Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress_percentage": {
            "type": "number",
            "title": "Progress Percentage"
          },
          "current_question_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Question Id"
          },
          "total_questions": {
            "type": "integer",
            "title": "Total Questions"
          },
          "questions_answered": {
            "type": "integer",
            "title": "Questions Answered"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "session_token",
          "lead_id",
          "status",
          "progress_percentage",
          "current_question_id",
          "total_questions",
          "questions_answered",
          "expires_at",
          "created_at"
        ],
        "title": "SessionResponse",
        "description": "Response schema for assessment sessions."
      },
      "SessionStartRequest": {
        "properties": {
          "lead_email": {
            "type": "string",
            "format": "email",
            "title": "Lead Email"
          },
          "business_type": {
            "type": "string",
            "maxLength": 100,
            "title": "Business Type"
          },
          "company_size": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(1-10|11-50|51-200|201-500|500+)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Size"
          },
          "assessment_type": {
            "type": "string",
            "pattern": "^(general|gdpr|security|compliance)$",
            "title": "Assessment Type",
            "default": "general"
          },
          "industry_focus": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry Focus"
          },
          "compliance_frameworks": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compliance Frameworks"
          },
          "priority_areas": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority Areas"
          }
        },
        "type": "object",
        "required": [
          "lead_email",
          "business_type"
        ],
        "title": "SessionStartRequest",
        "description": "Schema for starting an assessment session."
      },
      "SystemMetricsResponse": {
        "properties": {
          "cpu_percent": {
            "type": "number",
            "title": "Cpu Percent"
          },
          "memory_percent": {
            "type": "number",
            "title": "Memory Percent"
          },
          "disk_percent": {
            "type": "number",
            "title": "Disk Percent"
          },
          "load_average": {
            "type": "number",
            "title": "Load Average"
          },
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "cpu_percent",
          "memory_percent",
          "disk_percent",
          "load_average",
          "status"
        ],
        "title": "SystemMetricsResponse",
        "description": "System metrics response."
      },
      "TargetAudience": {
        "type": "string",
        "enum": [
          "general_public",
          "employees",
          "customers",
          "regulators",
          "technical_staff"
        ],
        "title": "TargetAudience",
        "description": "Target audience for the policy"
      },
      "TaskStatusUpdate": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "New status: pending, in_progress, completed, blocked, cancelled"
          },
          "completion_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completion Notes",
            "description": "Notes about task completion"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "TaskStatusUpdate",
        "description": "Request model for updating task status."
      },
      "TemplateListResponse": {
        "properties": {
          "templates": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Templates"
          }
        },
        "type": "object",
        "required": [
          "templates"
        ],
        "title": "TemplateListResponse",
        "description": "Response model for template listing"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "refresh_token"
        ],
        "title": "Token"
      },
      "TokenActionRequest": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason",
            "default": "administrative_action"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "TokenActionRequest",
        "description": "Request model for token actions."
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "default": 1800
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "refresh_token"
        ],
        "title": "TokenResponse"
      },
      "TraditionalScoreBreakdown": {
        "properties": {
          "completeness": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Completeness"
          },
          "freshness": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Freshness"
          },
          "content_quality": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Content Quality"
          },
          "relevance": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Relevance"
          }
        },
        "type": "object",
        "required": [
          "completeness",
          "freshness",
          "content_quality",
          "relevance"
        ],
        "title": "TraditionalScoreBreakdown",
        "description": "Traditional algorithmic score breakdown."
      },
      "UKFrameworkSchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name"
          },
          "description": {
            "type": "string",
            "minLength": 10,
            "title": "Description"
          },
          "category": {
            "$ref": "#/components/schemas/FrameworkCategory"
          },
          "applicable_industries": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Applicable Industries"
          },
          "employee_threshold": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Employee Threshold"
          },
          "revenue_threshold": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Revenue Threshold"
          },
          "geographic_scope": {
            "items": {
              "$ref": "#/components/schemas/GeographicRegion"
            },
            "type": "array",
            "title": "Geographic Scope",
            "default": [
              "UK"
            ]
          },
          "key_requirements": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Key Requirements"
          },
          "control_domains": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Control Domains"
          },
          "evidence_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Evidence Types"
          },
          "relevance_factors": {
            "additionalProperties": true,
            "type": "object",
            "title": "Relevance Factors"
          },
          "complexity_score": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Complexity Score",
            "default": 1
          },
          "implementation_time_weeks": {
            "type": "integer",
            "maximum": 104.0,
            "minimum": 1.0,
            "title": "Implementation Time Weeks",
            "default": 12
          },
          "estimated_cost_range": {
            "type": "string",
            "title": "Estimated Cost Range",
            "default": "\u00a35,000-\u00a325,000"
          },
          "policy_template": {
            "type": "string",
            "title": "Policy Template",
            "default": ""
          },
          "control_templates": {
            "additionalProperties": true,
            "type": "object",
            "title": "Control Templates"
          },
          "evidence_templates": {
            "additionalProperties": true,
            "type": "object",
            "title": "Evidence Templates"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+(\\.\\d+)?$",
            "title": "Version",
            "default": "1.0"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "name",
          "display_name",
          "description",
          "category"
        ],
        "title": "UKFrameworkSchema",
        "description": "Schema for UK compliance framework creation/update"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "maxLength": 128,
            "minLength": 8,
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "UserCreate"
      },
      "UserCreateRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "full_name": {
            "type": "string",
            "title": "Full Name"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "default": false
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Roles",
            "description": "List of role names to assign"
          }
        },
        "type": "object",
        "required": [
          "email",
          "full_name",
          "password"
        ],
        "title": "UserCreateRequest",
        "description": "Request model for creating a new user."
      },
      "UserDataAccessInfo": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "access_level": {
            "type": "string",
            "title": "Access Level"
          },
          "accessible_profiles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Accessible Profiles"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "email",
          "access_level",
          "accessible_profiles"
        ],
        "title": "UserDataAccessInfo"
      },
      "UserInfoResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "roles": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Roles"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Permissions"
          },
          "accessible_frameworks": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Accessible Frameworks"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "is_active",
          "created_at",
          "roles",
          "permissions",
          "accessible_frameworks"
        ],
        "title": "UserInfoResponse"
      },
      "UserUpdateRequest": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_verified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Verified"
          }
        },
        "type": "object",
        "title": "UserUpdateRequest",
        "description": "Request model for updating a user."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VaultStatusResponse": {
        "properties": {
          "vault_available": {
            "type": "boolean",
            "title": "Vault Available"
          },
          "vault_enabled": {
            "type": "boolean",
            "title": "Vault Enabled"
          },
          "configuration": {
            "additionalProperties": true,
            "type": "object",
            "title": "Configuration"
          },
          "health": {
            "additionalProperties": true,
            "type": "object",
            "title": "Health"
          },
          "integration_active": {
            "type": "boolean",
            "title": "Integration Active"
          }
        },
        "type": "object",
        "required": [
          "vault_available",
          "vault_enabled",
          "configuration",
          "health",
          "integration_active"
        ],
        "title": "VaultStatusResponse",
        "description": "SecretsVault status response model"
      },
      "api__routers__admin__user_management__RoleAssignmentRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "title": "Role Id"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "role_id"
        ],
        "title": "RoleAssignmentRequest",
        "description": "Request model for role assignment."
      },
      "api__routers__admin__user_management__UserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "last_login": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Login"
          },
          "roles": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Roles"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Permissions"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "full_name",
          "is_active",
          "is_verified",
          "created_at",
          "updated_at",
          "last_login",
          "roles",
          "permissions"
        ],
        "title": "UserResponse",
        "description": "Response model for user information."
      },
      "api__routers__rbac_auth__RoleAssignmentRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "title": "Role Id"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "role_id"
        ],
        "title": "RoleAssignmentRequest"
      },
      "api__schemas__models__UserResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "email",
          "id",
          "is_active",
          "created_at"
        ],
        "title": "UserResponse"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/auth/token"
          }
        }
      }
    }
  }
}